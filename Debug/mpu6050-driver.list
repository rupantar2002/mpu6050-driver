
mpu6050-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800ddd0  0800ddd0  0001ddd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2fc  0800e2fc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2fc  0800e2fc  0001e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e304  0800e304  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e304  0800e304  0001e304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e308  0800e308  0001e308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000a00  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bf4  20000bf4  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016f4f  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b51  00000000  00000000  000371b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001178  00000000  00000000  0003ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d5f  00000000  00000000  0003be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002486c  00000000  00000000  0003cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018222  00000000  00000000  0006144b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc03d  00000000  00000000  0007966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058ac  00000000  00000000  001456ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0014af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddb8 	.word	0x0800ddb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800ddb8 	.word	0x0800ddb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <InitI2c>:
//	{
//		break;
//	}
//}

static void InitI2c(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	gI2cIns.Instance = I2C1;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <InitI2c+0x48>)
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <InitI2c+0x4c>)
 8000eac:	601a      	str	r2, [r3, #0]
	gI2cIns.Init.ClockSpeed = 100000;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <InitI2c+0x48>)
 8000eb0:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <InitI2c+0x50>)
 8000eb2:	605a      	str	r2, [r3, #4]
	gI2cIns.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <InitI2c+0x48>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
	gI2cIns.Init.OwnAddress1 = 0;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <InitI2c+0x48>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
	gI2cIns.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <InitI2c+0x48>)
 8000ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec6:	611a      	str	r2, [r3, #16]
	gI2cIns.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <InitI2c+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
	gI2cIns.Init.OwnAddress2 = 0;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <InitI2c+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
	gI2cIns.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <InitI2c+0x48>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
	gI2cIns.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <InitI2c+0x48>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
	(void) HAL_I2C_Init(&gI2cIns);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <InitI2c+0x48>)
 8000ee2:	f003 fa8b 	bl	80043fc <HAL_I2C_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000210 	.word	0x20000210
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	000186a0 	.word	0x000186a0

08000ef8 <app_Init>:
	printf("{accelX: %d, accelY: %d,accelZ: %d}\r\n", accelX, accelY, accelZ);
}

static mpu6050_t mpu6050;

void app_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	printf("--------MPU6050-------------\r\n");
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <app_Init+0x60>)
 8000f00:	f00b f870 	bl	800bfe4 <puts>
	InitI2c();
 8000f04:	f7ff ffce 	bl	8000ea4 <InitI2c>
	float temperature = 0.0f;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
	mpu6050_Init(&mpu6050, 0, &gI2cIns);
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <app_Init+0x64>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <app_Init+0x68>)
 8000f14:	f000 f8a2 	bl	800105c <mpu6050_Init>
	mpu6050_Reset(&mpu6050);
 8000f18:	4811      	ldr	r0, [pc, #68]	; (8000f60 <app_Init+0x68>)
 8000f1a:	f000 f8d5 	bl	80010c8 <mpu6050_Reset>
	mpu6050_GetAccelerometerScale(&mpu6050, NULL);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <app_Init+0x68>)
 8000f22:	f000 f93f 	bl	80011a4 <mpu6050_GetAccelerometerScale>
	mpu6050_SetAccelerometerScale(&mpu6050, MPU6050_ACCEL_FS_4G);
 8000f26:	2101      	movs	r1, #1
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <app_Init+0x68>)
 8000f2a:	f000 f96d 	bl	8001208 <mpu6050_SetAccelerometerScale>
	mpu6050_GetAccelerometerScale(&mpu6050, NULL);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <app_Init+0x68>)
 8000f32:	f000 f937 	bl	80011a4 <mpu6050_GetAccelerometerScale>
	mpu6050_GetGyroscopeScale(&mpu6050, NULL);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <app_Init+0x68>)
 8000f3a:	f000 fa41 	bl	80013c0 <mpu6050_GetGyroscopeScale>
	mpu6050_SetGyroscopeScale(&mpu6050, MPU6050_GYRO_FS_500_DEG_PER_SEC);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <app_Init+0x68>)
 8000f42:	f000 fa6f 	bl	8001424 <mpu6050_SetGyroscopeScale>
	mpu6050_GetGyroscopeScale(&mpu6050, NULL);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <app_Init+0x68>)
 8000f4a:	f000 fa39 	bl	80013c0 <mpu6050_GetGyroscopeScale>

//	// reset device
//	mpu6050_pwr_mgmt_1_t data = { 0 };
//	IntfWrite(&gI2cIns, (addr << 1), MPU6050_PWR_MGMT_1, &data, 1);

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	0800de4c 	.word	0x0800de4c
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	20000264 	.word	0x20000264

08000f64 <app_ProcessLoop>:

void app_ProcessLoop(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	mpu6050_GetTemperature(&mpu6050, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <app_ProcessLoop+0x28>)
 8000f6c:	f000 f8cc 	bl	8001108 <mpu6050_GetTemperature>
	mpu6050_GetRawAcceleration(&mpu6050, NULL);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <app_ProcessLoop+0x28>)
 8000f74:	f000 f9a8 	bl	80012c8 <mpu6050_GetRawAcceleration>
	mpu6050_GetRawGyroscope(&mpu6050, NULL);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <app_ProcessLoop+0x28>)
 8000f7c:	f000 fab2 	bl	80014e4 <mpu6050_GetRawGyroscope>
	HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f001 f82b 	bl	8001fdc <HAL_Delay>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000264 	.word	0x20000264

08000f90 <ReadMemory>:
#include "stm32f4xx_hal_i2c.h"
#include <stdio.h>
#include <string.h>

static uint8_t ReadMemory(const mpu6050_t *const pHandle, uint8_t regAddr,
		uint8_t *const readBuff, uint16_t len) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	72fb      	strb	r3, [r7, #11]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	813b      	strh	r3, [r7, #8]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pHandle->pI2cHandle,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6818      	ldr	r0, [r3, #0]
			(pHandle->deviceAddr << 1), regAddr, 1, readBuff, len, 100);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(pHandle->pI2cHandle,
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	893b      	ldrh	r3, [r7, #8]
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f003 fc58 	bl	8004878 <HAL_I2C_Mem_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <ReadMemory+0x46>
		return MPU6050_STATUS_SUCCESS;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e00a      	b.n	8000fec <ReadMemory+0x5c>
	else if (status == HAL_TIMEOUT)
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d101      	bne.n	8000fe0 <ReadMemory+0x50>
		return MPU6050_STATUS_TIMEOUT;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	e005      	b.n	8000fec <ReadMemory+0x5c>
	else if (status == HAL_BUSY)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d101      	bne.n	8000fea <ReadMemory+0x5a>
		return MPU6050_STATUS_BUSY;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	e000      	b.n	8000fec <ReadMemory+0x5c>
	else
		return MPU6050_STATUS_FAILOUR;
 8000fea:	2301      	movs	r3, #1

}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <WriteMemory>:

static uint8_t WriteMemory(const mpu6050_t *const pHandle, uint8_t regAddr,
		uint8_t *const readBuff, uint16_t len) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	461a      	mov	r2, r3
 8001000:	460b      	mov	r3, r1
 8001002:	72fb      	strb	r3, [r7, #11]
 8001004:	4613      	mov	r3, r2
 8001006:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(pHandle->pI2cHandle,
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6818      	ldr	r0, [r3, #0]
			(pHandle->deviceAddr << 1), regAddr, 1, readBuff, len,
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(pHandle->pI2cHandle,
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b299      	uxth	r1, r3
 8001016:	7afb      	ldrb	r3, [r7, #11]
 8001018:	b29a      	uxth	r2, r3
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	893b      	ldrh	r3, [r7, #8]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	f003 fb2b 	bl	8004684 <HAL_I2C_Mem_Write>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if (status == HAL_OK)
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <WriteMemory+0x48>
		return MPU6050_STATUS_SUCCESS;
 8001038:	2300      	movs	r3, #0
 800103a:	e00a      	b.n	8001052 <WriteMemory+0x5e>
	else if (status == HAL_TIMEOUT)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d101      	bne.n	8001046 <WriteMemory+0x52>
		return MPU6050_STATUS_TIMEOUT;
 8001042:	2305      	movs	r3, #5
 8001044:	e005      	b.n	8001052 <WriteMemory+0x5e>
	else if (status == HAL_BUSY)
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d101      	bne.n	8001050 <WriteMemory+0x5c>
		return MPU6050_STATUS_BUSY;
 800104c:	2306      	movs	r3, #6
 800104e:	e000      	b.n	8001052 <WriteMemory+0x5e>
	else
		return MPU6050_STATUS_FAILOUR;
 8001050:	2301      	movs	r3, #1

}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <mpu6050_Init>:

uint8_t mpu6050_Init(mpu6050_t *const pDevice, uint8_t addr,
		I2C_HandleTypeDef *const pI2cHandle) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	72fb      	strb	r3, [r7, #11]
	if (pDevice == NULL || pI2cHandle == NULL)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <mpu6050_Init+0x1a>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <mpu6050_Init+0x1e>
		return MPU6050_STATUS_NULL_PTR;
 8001076:	2302      	movs	r3, #2
 8001078:	e01f      	b.n	80010ba <mpu6050_Init+0x5e>

	// set a default address
	if (addr == 0)
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <mpu6050_Init+0x2a>
		pDevice->deviceAddr = (uint8_t) MPU6050_I2C_ADDR_DEFAULT;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2268      	movs	r2, #104	; 0x68
 8001084:	711a      	strb	r2, [r3, #4]

	// set i2c instance
	pDevice->pI2cHandle = pI2cHandle;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]

	uint8_t whoAmI = 0x00;
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]

	// read device WHO_AM_I
	if (ReadMemory(pDevice, MPU6050_WHO_AM_I, &whoAmI, 1)
 8001090:	f107 0217 	add.w	r2, r7, #23
 8001094:	2301      	movs	r3, #1
 8001096:	2175      	movs	r1, #117	; 0x75
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff ff79 	bl	8000f90 <ReadMemory>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <mpu6050_Init+0x4c>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e008      	b.n	80010ba <mpu6050_Init+0x5e>
	if (whoAmI != 0x68)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b68      	cmp	r3, #104	; 0x68
 80010ac:	d001      	beq.n	80010b2 <mpu6050_Init+0x56>
		return MPU6050_STATUS_UNDEFINED;
 80010ae:	2304      	movs	r3, #4
 80010b0:	e003      	b.n	80010ba <mpu6050_Init+0x5e>
	printf("MPU6050 Device found\r\n");
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <mpu6050_Init+0x68>)
 80010b4:	f00a ff96 	bl	800bfe4 <puts>
	return MPU6050_STATUS_SUCCESS;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800de6c 	.word	0x0800de6c

080010c8 <mpu6050_Reset>:

uint8_t mpu6050_Reset(mpu6050_t *const pDevice) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if (pDevice == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <mpu6050_Reset+0x12>
		return MPU6050_STATUS_NULL_PTR;
 80010d6:	2302      	movs	r3, #2
 80010d8:	e012      	b.n	8001100 <mpu6050_Reset+0x38>

	mpu6050_pwr_mgmt_1_t pwrMgm1 = { .clksel = 0, .cycle = 0, .device_reset = 0,
 80010da:	2300      	movs	r3, #0
 80010dc:	733b      	strb	r3, [r7, #12]
			.not_used_01 = 0, .sleep = 0, .temp_dis = 0, };

	uint8_t data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	72fb      	strb	r3, [r7, #11]
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
	(void) memcpy(&data, &pwrMgm1, 1);
 80010e4:	72fb      	strb	r3, [r7, #11]

	if (WriteMemory(pDevice, MPU6050_PWR_MGMT_1, &data, 1)
 80010e6:	f107 020b 	add.w	r2, r7, #11
 80010ea:	2301      	movs	r3, #1
 80010ec:	216b      	movs	r1, #107	; 0x6b
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff80 	bl	8000ff4 <WriteMemory>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <mpu6050_Reset+0x36>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <mpu6050_Reset+0x38>

	return MPU6050_STATUS_SUCCESS;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <mpu6050_GetTemperature>:

uint8_t mpu6050_GetTemperature(mpu6050_t *const pDevice, float *pTemperature) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	if (pDevice == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <mpu6050_GetTemperature+0x14>
		return MPU6050_STATUS_NULL_PTR;
 8001118:	2302      	movs	r3, #2
 800111a:	e039      	b.n	8001190 <mpu6050_GetTemperature+0x88>
	uint8_t data[2];
	int16_t regValue = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	82fb      	strh	r3, [r7, #22]
	float temperature = 0;
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	613b      	str	r3, [r7, #16]

	if (ReadMemory(pDevice, MPU6050_TEMP_OUT_H, data, 2)
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	2302      	movs	r3, #2
 800112c:	2141      	movs	r1, #65	; 0x41
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff2e 	bl	8000f90 <ReadMemory>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <mpu6050_GetTemperature+0x36>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 800113a:	2301      	movs	r3, #1
 800113c:	e028      	b.n	8001190 <mpu6050_GetTemperature+0x88>

	regValue = (int16_t) ((data[0] << 8) | data[1]);
 800113e:	7b3b      	ldrb	r3, [r7, #12]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	82fb      	strh	r3, [r7, #22]
	temperature = (regValue / 340) + 36.53f;
 800114c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <mpu6050_GetTemperature+0x90>)
 8001152:	fb82 1203 	smull	r1, r2, r2, r3
 8001156:	11d2      	asrs	r2, r2, #7
 8001158:	17db      	asrs	r3, r3, #31
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b21b      	sxth	r3, r3
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001166:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800119c <mpu6050_GetTemperature+0x94>
 800116a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116e:	edc7 7a04 	vstr	s15, [r7, #16]
	printf("temperature: %f degC\r\n", temperature);
 8001172:	6938      	ldr	r0, [r7, #16]
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <mpu6050_GetTemperature+0x98>)
 800117e:	f00a fecb 	bl	800bf18 <iprintf>
	if (pTemperature != NULL)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <mpu6050_GetTemperature+0x86>
		*pTemperature = temperature;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]
	return MPU6050_STATUS_SUCCESS;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	60606061 	.word	0x60606061
 800119c:	42121eb8 	.word	0x42121eb8
 80011a0:	0800de84 	.word	0x0800de84

080011a4 <mpu6050_GetAccelerometerScale>:

uint8_t mpu6050_GetAccelerometerScale(mpu6050_t *const pDevice,
		mpu6050_accel_fs_t *pFullscale) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	if (pDevice == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <mpu6050_GetAccelerometerScale+0x14>
		return MPU6050_STATUS_NULL_PTR;
 80011b4:	2302      	movs	r3, #2
 80011b6:	e020      	b.n	80011fa <mpu6050_GetAccelerometerScale+0x56>
	mpu6050_accel_config_t config = { 0 };
 80011b8:	2300      	movs	r3, #0
 80011ba:	733b      	strb	r3, [r7, #12]

	if (ReadMemory(pDevice, MPU6050_ACCEL_CONFIG, &config, 1)
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	2301      	movs	r3, #1
 80011c2:	211c      	movs	r1, #28
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fee3 	bl	8000f90 <ReadMemory>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <mpu6050_GetAccelerometerScale+0x30>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e012      	b.n	80011fa <mpu6050_GetAccelerometerScale+0x56>
	if (pFullscale != NULL)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <mpu6050_GetAccelerometerScale+0x44>
		*pFullscale = config.afs_sel;
 80011da:	7b3b      	ldrb	r3, [r7, #12]
 80011dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
	printf("accel full scale get: %d\r\n", config.afs_sel);
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <mpu6050_GetAccelerometerScale+0x60>)
 80011f4:	f00a fe90 	bl	800bf18 <iprintf>
	return MPU6050_STATUS_SUCCESS;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0800de9c 	.word	0x0800de9c

08001208 <mpu6050_SetAccelerometerScale>:

uint8_t mpu6050_SetAccelerometerScale(mpu6050_t *const pDevice,
		mpu6050_accel_fs_t fullscale) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]

	if (pDevice == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <mpu6050_SetAccelerometerScale+0x16>
		return MPU6050_STATUS_NULL_PTR;
 800121a:	2302      	movs	r3, #2
 800121c:	e046      	b.n	80012ac <mpu6050_SetAccelerometerScale+0xa4>

	mpu6050_accel_config_t config = { 0 };
 800121e:	2300      	movs	r3, #0
 8001220:	733b      	strb	r3, [r7, #12]

	if (ReadMemory(pDevice, MPU6050_ACCEL_CONFIG, &config, 1)
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	2301      	movs	r3, #1
 8001228:	211c      	movs	r1, #28
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff feb0 	bl	8000f90 <ReadMemory>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <mpu6050_SetAccelerometerScale+0x32>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 8001236:	2301      	movs	r3, #1
 8001238:	e038      	b.n	80012ac <mpu6050_SetAccelerometerScale+0xa4>

	config.afs_sel = fullscale;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	f362 03c4 	bfi	r3, r2, #3, #2
 8001248:	733b      	strb	r3, [r7, #12]
	if (WriteMemory(pDevice, MPU6050_ACCEL_CONFIG, &config, 1)
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	2301      	movs	r3, #1
 8001250:	211c      	movs	r1, #28
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fece 	bl	8000ff4 <WriteMemory>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <mpu6050_SetAccelerometerScale+0x5a>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 800125e:	2301      	movs	r3, #1
 8001260:	e024      	b.n	80012ac <mpu6050_SetAccelerometerScale+0xa4>
	printf("accel full scale set: %d\r\n", config.afs_sel);
 8001262:	7b3b      	ldrb	r3, [r7, #12]
 8001264:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <mpu6050_SetAccelerometerScale+0xac>)
 800126e:	f00a fe53 	bl	800bf18 <iprintf>
	switch (config.afs_sel) {
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d011      	beq.n	80012a2 <mpu6050_SetAccelerometerScale+0x9a>
 800127e:	2b03      	cmp	r3, #3
 8001280:	dc03      	bgt.n	800128a <mpu6050_SetAccelerometerScale+0x82>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <mpu6050_SetAccelerometerScale+0x8a>
 8001286:	2b02      	cmp	r3, #2
 8001288:	d007      	beq.n	800129a <mpu6050_SetAccelerometerScale+0x92>
	case MPU6050_ACCEL_FS_2G:
		pDevice->rangePerDigit = .000061f;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <mpu6050_SetAccelerometerScale+0xb0>)
 800128e:	609a      	str	r2, [r3, #8]
		break;
 8001290:	e00b      	b.n	80012aa <mpu6050_SetAccelerometerScale+0xa2>
	case MPU6050_ACCEL_FS_4G:
		pDevice->rangePerDigit = .000122f;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <mpu6050_SetAccelerometerScale+0xb4>)
 8001296:	609a      	str	r2, [r3, #8]
		break;
 8001298:	e007      	b.n	80012aa <mpu6050_SetAccelerometerScale+0xa2>
	case MPU6050_ACCEL_FS_8G:
		pDevice->rangePerDigit = .000244f;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <mpu6050_SetAccelerometerScale+0xb8>)
 800129e:	609a      	str	r2, [r3, #8]
		break;
 80012a0:	e003      	b.n	80012aa <mpu6050_SetAccelerometerScale+0xa2>
	case MPU6050_ACCEL_FS_16G:
		pDevice->rangePerDigit = .0004882f;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <mpu6050_SetAccelerometerScale+0xbc>)
 80012a6:	609a      	str	r2, [r3, #8]
		break;
 80012a8:	bf00      	nop
	}
	return MPU6050_STATUS_SUCCESS;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0800deb8 	.word	0x0800deb8
 80012b8:	387fda40 	.word	0x387fda40
 80012bc:	38ffda40 	.word	0x38ffda40
 80012c0:	397fda40 	.word	0x397fda40
 80012c4:	39fff518 	.word	0x39fff518

080012c8 <mpu6050_GetRawAcceleration>:

uint8_t mpu6050_GetRawAcceleration(mpu6050_t *const pDevice,
		mpu6050_vector_t *pVector) {
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b08c      	sub	sp, #48	; 0x30
 80012ce:	af04      	add	r7, sp, #16
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
	if (pDevice == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <mpu6050_GetRawAcceleration+0x16>
		return MPU6050_STATUS_NULL_PTR;
 80012da:	2302      	movs	r3, #2
 80012dc:	e068      	b.n	80013b0 <mpu6050_GetRawAcceleration+0xe8>

	uint8_t data[6];
	mpu6050_vector_t vector = { .xAxis = 0.0f, .yAxis = 0.0f, .zAxis = 0.0f };
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

	if (ReadMemory(pDevice, MPU6050_ACCEL_XOUT_H, data, 6)
 80012f0:	f107 0218 	add.w	r2, r7, #24
 80012f4:	2306      	movs	r3, #6
 80012f6:	213b      	movs	r1, #59	; 0x3b
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fe49 	bl	8000f90 <ReadMemory>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <mpu6050_GetRawAcceleration+0x40>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 8001304:	2301      	movs	r3, #1
 8001306:	e053      	b.n	80013b0 <mpu6050_GetRawAcceleration+0xe8>

	vector.xAxis = ((data[0] << 8) | data[1]) * pDevice->rangePerDigit;
 8001308:	7e3b      	ldrb	r3, [r7, #24]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7e7a      	ldrb	r2, [r7, #25]
 800130e:	4313      	orrs	r3, r2
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a02 	vldr	s15, [r3, #8]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a03 	vstr	s15, [r7, #12]
	vector.yAxis = ((data[2] << 8) | data[3]) * pDevice->rangePerDigit;
 8001326:	7ebb      	ldrb	r3, [r7, #26]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	7efa      	ldrb	r2, [r7, #27]
 800132c:	4313      	orrs	r3, r2
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a02 	vldr	s15, [r3, #8]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	edc7 7a04 	vstr	s15, [r7, #16]
	vector.zAxis = ((data[4] << 8) | data[5]) * pDevice->rangePerDigit;
 8001344:	7f3b      	ldrb	r3, [r7, #28]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	7f7a      	ldrb	r2, [r7, #29]
 800134a:	4313      	orrs	r3, r2
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a02 	vldr	s15, [r3, #8]
 800135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135e:	edc7 7a05 	vstr	s15, [r7, #20]

	printf("raw acceleration :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ef 	bl	8000548 <__aeabi_f2d>
 800136a:	4680      	mov	r8, r0
 800136c:	4689      	mov	r9, r1
			vector.yAxis, vector.zAxis);
 800136e:	693b      	ldr	r3, [r7, #16]
	printf("raw acceleration :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8e9 	bl	8000548 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
			vector.yAxis, vector.zAxis);
 800137a:	697b      	ldr	r3, [r7, #20]
	printf("raw acceleration :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8e3 	bl	8000548 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800138a:	e9cd 4500 	strd	r4, r5, [sp]
 800138e:	4642      	mov	r2, r8
 8001390:	464b      	mov	r3, r9
 8001392:	480a      	ldr	r0, [pc, #40]	; (80013bc <mpu6050_GetRawAcceleration+0xf4>)
 8001394:	f00a fdc0 	bl	800bf18 <iprintf>
	if (pVector != NULL)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <mpu6050_GetRawAcceleration+0xe6>
		*pVector = vector;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	461c      	mov	r4, r3
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return MPU6050_STATUS_SUCCESS;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	0800ded4 	.word	0x0800ded4

080013c0 <mpu6050_GetGyroscopeScale>:

uint8_t mpu6050_GetGyroscopeScale(mpu6050_t *const pDevice,
		mpu6050_gyro_fs_t *pFullscale) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

	if (pDevice == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <mpu6050_GetGyroscopeScale+0x14>
		return MPU6050_STATUS_NULL_PTR;
 80013d0:	2302      	movs	r3, #2
 80013d2:	e020      	b.n	8001416 <mpu6050_GetGyroscopeScale+0x56>

	mpu6050_gyro_config_t config = { 0 };
 80013d4:	2300      	movs	r3, #0
 80013d6:	733b      	strb	r3, [r7, #12]

	if (ReadMemory(pDevice, MPU6050_GYRO_CONFIG, &config, 1)
 80013d8:	f107 020c 	add.w	r2, r7, #12
 80013dc:	2301      	movs	r3, #1
 80013de:	211b      	movs	r1, #27
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fdd5 	bl	8000f90 <ReadMemory>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <mpu6050_GetGyroscopeScale+0x30>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e012      	b.n	8001416 <mpu6050_GetGyroscopeScale+0x56>
	if (pFullscale != NULL)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <mpu6050_GetGyroscopeScale+0x44>
		*pFullscale = config.fs_sel;
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	701a      	strb	r2, [r3, #0]
	printf("gyro full scale get: %d\r\n", config.fs_sel);
 8001404:	7b3b      	ldrb	r3, [r7, #12]
 8001406:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <mpu6050_GetGyroscopeScale+0x60>)
 8001410:	f00a fd82 	bl	800bf18 <iprintf>
	return MPU6050_STATUS_SUCCESS;
 8001414:	2300      	movs	r3, #0

}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	0800df04 	.word	0x0800df04

08001424 <mpu6050_SetGyroscopeScale>:

uint8_t mpu6050_SetGyroscopeScale(mpu6050_t *const pDevice,
		mpu6050_gyro_fs_t fullscale) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	if (pDevice == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <mpu6050_SetGyroscopeScale+0x16>
		return MPU6050_STATUS_NULL_PTR;
 8001436:	2302      	movs	r3, #2
 8001438:	e046      	b.n	80014c8 <mpu6050_SetGyroscopeScale+0xa4>

	mpu6050_gyro_config_t config = { 0 };
 800143a:	2300      	movs	r3, #0
 800143c:	733b      	strb	r3, [r7, #12]

	if (ReadMemory(pDevice, MPU6050_GYRO_CONFIG, &config, 1)
 800143e:	f107 020c 	add.w	r2, r7, #12
 8001442:	2301      	movs	r3, #1
 8001444:	211b      	movs	r1, #27
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fda2 	bl	8000f90 <ReadMemory>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <mpu6050_SetGyroscopeScale+0x32>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 8001452:	2301      	movs	r3, #1
 8001454:	e038      	b.n	80014c8 <mpu6050_SetGyroscopeScale+0xa4>

	config.fs_sel = fullscale;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	7b3b      	ldrb	r3, [r7, #12]
 8001460:	f362 03c4 	bfi	r3, r2, #3, #2
 8001464:	733b      	strb	r3, [r7, #12]
	if (WriteMemory(pDevice, MPU6050_GYRO_CONFIG, &config, 1)
 8001466:	f107 020c 	add.w	r2, r7, #12
 800146a:	2301      	movs	r3, #1
 800146c:	211b      	movs	r1, #27
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fdc0 	bl	8000ff4 <WriteMemory>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <mpu6050_SetGyroscopeScale+0x5a>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 800147a:	2301      	movs	r3, #1
 800147c:	e024      	b.n	80014c8 <mpu6050_SetGyroscopeScale+0xa4>
	printf("gyro full scale set: %d\r\n", config.fs_sel);
 800147e:	7b3b      	ldrb	r3, [r7, #12]
 8001480:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <mpu6050_SetGyroscopeScale+0xac>)
 800148a:	f00a fd45 	bl	800bf18 <iprintf>
	switch (config.fs_sel) {
 800148e:	7b3b      	ldrb	r3, [r7, #12]
 8001490:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d011      	beq.n	80014be <mpu6050_SetGyroscopeScale+0x9a>
 800149a:	2b03      	cmp	r3, #3
 800149c:	dc03      	bgt.n	80014a6 <mpu6050_SetGyroscopeScale+0x82>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d005      	beq.n	80014ae <mpu6050_SetGyroscopeScale+0x8a>
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d007      	beq.n	80014b6 <mpu6050_SetGyroscopeScale+0x92>
	case MPU6050_GYRO_FS_250_DEG_PER_SEC:
		pDevice->dpsPerDigit = .007633f;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <mpu6050_SetGyroscopeScale+0xb0>)
 80014aa:	60da      	str	r2, [r3, #12]
		break;
 80014ac:	e00b      	b.n	80014c6 <mpu6050_SetGyroscopeScale+0xa2>
	case MPU6050_GYRO_FS_500_DEG_PER_SEC:
		pDevice->dpsPerDigit = .015267f;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <mpu6050_SetGyroscopeScale+0xb4>)
 80014b2:	60da      	str	r2, [r3, #12]
		break;
 80014b4:	e007      	b.n	80014c6 <mpu6050_SetGyroscopeScale+0xa2>
	case MPU6050_GYRO_FS_1000_DEG_PER_SEC:
		pDevice->dpsPerDigit = .030487f;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <mpu6050_SetGyroscopeScale+0xb8>)
 80014ba:	60da      	str	r2, [r3, #12]
		break;
 80014bc:	e003      	b.n	80014c6 <mpu6050_SetGyroscopeScale+0xa2>
	case MPU6050_GYRO_FS_2000_DEG_PER_SEC:
		pDevice->dpsPerDigit = .060975f;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <mpu6050_SetGyroscopeScale+0xbc>)
 80014c2:	60da      	str	r2, [r3, #12]
		break;
 80014c4:	bf00      	nop
	}
	return MPU6050_STATUS_SUCCESS;
 80014c6:	2300      	movs	r3, #0

}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800df20 	.word	0x0800df20
 80014d4:	3bfa1e3f 	.word	0x3bfa1e3f
 80014d8:	3c7a2270 	.word	0x3c7a2270
 80014dc:	3cf9bfdf 	.word	0x3cf9bfdf
 80014e0:	3d79c0ec 	.word	0x3d79c0ec

080014e4 <mpu6050_GetRawGyroscope>:

uint8_t mpu6050_GetRawGyroscope(mpu6050_t *const pDevice,
		mpu6050_vector_t *pVector) {
 80014e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e8:	b08c      	sub	sp, #48	; 0x30
 80014ea:	af04      	add	r7, sp, #16
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	if (pDevice == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <mpu6050_GetRawGyroscope+0x16>
		return MPU6050_STATUS_NULL_PTR;
 80014f6:	2302      	movs	r3, #2
 80014f8:	e068      	b.n	80015cc <mpu6050_GetRawGyroscope+0xe8>

	uint8_t data[6];
	mpu6050_vector_t vector = { .xAxis = 0.0f, .yAxis = 0.0f, .zAxis = 0.0f };
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

	if (ReadMemory(pDevice, MPU6050_GYRO_XOUT_H, data, 6)
 800150c:	f107 0218 	add.w	r2, r7, #24
 8001510:	2306      	movs	r3, #6
 8001512:	2143      	movs	r1, #67	; 0x43
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fd3b 	bl	8000f90 <ReadMemory>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <mpu6050_GetRawGyroscope+0x40>
			!= MPU6050_STATUS_SUCCESS)
		return MPU6050_STATUS_FAILOUR;
 8001520:	2301      	movs	r3, #1
 8001522:	e053      	b.n	80015cc <mpu6050_GetRawGyroscope+0xe8>

	vector.xAxis = ((data[0] << 8) | data[1]) * pDevice->dpsPerDigit;
 8001524:	7e3b      	ldrb	r3, [r7, #24]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	7e7a      	ldrb	r2, [r7, #25]
 800152a:	4313      	orrs	r3, r2
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 7a03 	vldr	s15, [r3, #12]
 800153a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153e:	edc7 7a03 	vstr	s15, [r7, #12]
	vector.yAxis = ((data[2] << 8) | data[3]) * pDevice->dpsPerDigit;
 8001542:	7ebb      	ldrb	r3, [r7, #26]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	7efa      	ldrb	r2, [r7, #27]
 8001548:	4313      	orrs	r3, r2
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 7a03 	vldr	s15, [r3, #12]
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]
	vector.zAxis = ((data[4] << 8) | data[5]) * pDevice->dpsPerDigit;
 8001560:	7f3b      	ldrb	r3, [r7, #28]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	7f7a      	ldrb	r2, [r7, #29]
 8001566:	4313      	orrs	r3, r2
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a03 	vldr	s15, [r3, #12]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	edc7 7a05 	vstr	s15, [r7, #20]

	printf("raw gyroscope :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	4680      	mov	r8, r0
 8001588:	4689      	mov	r9, r1
			vector.yAxis, vector.zAxis);
 800158a:	693b      	ldr	r3, [r7, #16]
	printf("raw gyroscope :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_f2d>
 8001592:	4604      	mov	r4, r0
 8001594:	460d      	mov	r5, r1
			vector.yAxis, vector.zAxis);
 8001596:	697b      	ldr	r3, [r7, #20]
	printf("raw gyroscope :{ x: %f , y: %f, z: %f }\r\n", vector.xAxis,
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a6:	e9cd 4500 	strd	r4, r5, [sp]
 80015aa:	4642      	mov	r2, r8
 80015ac:	464b      	mov	r3, r9
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <mpu6050_GetRawGyroscope+0xf4>)
 80015b0:	f00a fcb2 	bl	800bf18 <iprintf>
	if (pVector != NULL)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <mpu6050_GetRawGyroscope+0xe6>
		*pVector = vector;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	461c      	mov	r4, r3
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return MPU6050_STATUS_SUCCESS;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d6:	bf00      	nop
 80015d8:	0800df3c 	.word	0x0800df3c

080015dc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch	, 1, HAL_MAX_DELAY);
 80015e4:	1d39      	adds	r1, r7, #4
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2201      	movs	r2, #1
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <__io_putchar+0x20>)
 80015ee:	f006 f85c 	bl	80076aa <HAL_UART_Transmit>
	return ch;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000037c 	.word	0x2000037c

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fc78 	bl	8001ef8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f814 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 f926 	bl	800185c <MX_GPIO_Init>
  MX_DMA_Init();
 8001610:	f000 f904 	bl	800181c <MX_DMA_Init>
  MX_USB_HOST_Init();
 8001614:	f009 fb94 	bl	800ad40 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 8001618:	f000 f87a 	bl	8001710 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800161c:	f000 f8d4 	bl	80017c8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001620:	f000 f8a4 	bl	800176c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	app_Init();
 8001624:	f7ff fc68 	bl	8000ef8 <app_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001628:	f009 fbb0 	bl	800ad8c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		app_ProcessLoop();
 800162c:	f7ff fc9a 	bl	8000f64 <app_ProcessLoop>
    MX_USB_HOST_Process();
 8001630:	e7fa      	b.n	8001628 <main+0x28>
	...

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00a fdae 	bl	800c1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <SystemClock_Config+0xd4>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <SystemClock_Config+0xd4>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <SystemClock_Config+0xd4>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <SystemClock_Config+0xd8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <SystemClock_Config+0xd8>)
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <SystemClock_Config+0xd8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169a:	2301      	movs	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169e:	2310      	movs	r3, #16
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016ac:	2308      	movs	r3, #8
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ba:	2307      	movs	r3, #7
 80016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 fb0c 	bl	8006ce0 <HAL_RCC_OscConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ce:	f000 f981 	bl	80019d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	230f      	movs	r3, #15
 80016d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 fd6d 	bl	80071d0 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80016fc:	f000 f96a 	bl	80019d4 <Error_Handler>
  }
}
 8001700:	bf00      	nop
 8001702:	3750      	adds	r7, #80	; 0x50
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000

08001710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C1_Init+0x50>)
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_I2C1_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_I2C1_Init+0x50>)
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_I2C1_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_I2C1_Init+0x50>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_I2C1_Init+0x50>)
 800174e:	f002 fe55 	bl	80043fc <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001758:	f000 f93c 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000274 	.word	0x20000274
 8001764:	40005400 	.word	0x40005400
 8001768:	000186a0 	.word	0x000186a0

0800176c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C2_Init+0x50>)
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_I2C2_Init+0x54>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C2_Init+0x50>)
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_I2C2_Init+0x58>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C2_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_I2C2_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_I2C2_Init+0x50>)
 800178a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_I2C2_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_I2C2_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_I2C2_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_I2C2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_I2C2_Init+0x50>)
 80017aa:	f002 fe27 	bl	80043fc <HAL_I2C_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 f90e 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002c8 	.word	0x200002c8
 80017c0:	40005800 	.word	0x40005800
 80017c4:	000186a0 	.word	0x000186a0

080017c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_USART2_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 8001800:	f005 ff06 	bl	8007610 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f8e3 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000037c 	.word	0x2000037c
 8001818:	40004400 	.word	0x40004400

0800181c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_DMA_Init+0x3c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <MX_DMA_Init+0x3c>)
 800182c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_DMA_Init+0x3c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	200b      	movs	r0, #11
 8001844:	f000 fcc9 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001848:	200b      	movs	r0, #11
 800184a:	f000 fce2 	bl	8002212 <HAL_NVIC_EnableIRQ>

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <MX_GPIO_Init+0x164>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <MX_GPIO_Init+0x164>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <MX_GPIO_Init+0x164>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <MX_GPIO_Init+0x164>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a4a      	ldr	r2, [pc, #296]	; (80019c0 <MX_GPIO_Init+0x164>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <MX_GPIO_Init+0x164>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	2101      	movs	r1, #1
 8001902:	4830      	ldr	r0, [pc, #192]	; (80019c4 <MX_GPIO_Init+0x168>)
 8001904:	f001 f956 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800190e:	482e      	ldr	r0, [pc, #184]	; (80019c8 <MX_GPIO_Init+0x16c>)
 8001910:	f001 f950 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <MX_GPIO_Init+0x168>)
 800192c:	f000 ffa6 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001930:	2308      	movs	r3, #8
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001940:	2305      	movs	r3, #5
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <MX_GPIO_Init+0x168>)
 800194c:	f000 ff96 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001954:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <MX_GPIO_Init+0x170>)
 8001966:	f000 ff89 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800196a:	2304      	movs	r3, #4
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4814      	ldr	r0, [pc, #80]	; (80019d0 <MX_GPIO_Init+0x174>)
 800197e:	f000 ff7d 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001982:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_GPIO_Init+0x16c>)
 800199c:	f000 ff6e 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019a0:	2320      	movs	r3, #32
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_GPIO_Init+0x16c>)
 80019b4:	f000 ff62 	bl	800287c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f000 fbd0 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_I2C_MspInit+0x178>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d173      	bne.n	8001b3a <HAL_I2C_MspInit+0x10a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b55      	ldr	r3, [pc, #340]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a54      	ldr	r2, [pc, #336]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b52      	ldr	r3, [pc, #328]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a72:	2312      	movs	r3, #18
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4849      	ldr	r0, [pc, #292]	; (8001bb0 <HAL_I2C_MspInit+0x180>)
 8001a8a:	f000 fef7 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001aac:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <HAL_I2C_MspInit+0x188>)
 8001aae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ab2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001af0:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001afc:	482d      	ldr	r0, [pc, #180]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001afe:	f000 fba3 	bl	8002248 <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_MspInit+0xdc>
    {
      Error_Handler();
 8001b08:	f7ff ff64 	bl	80019d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
 8001b12:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_I2C_MspInit+0x184>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	201f      	movs	r0, #31
 8001b1e:	f000 fb5c 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b22:	201f      	movs	r0, #31
 8001b24:	f000 fb75 	bl	8002212 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2020      	movs	r0, #32
 8001b2e:	f000 fb54 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b32:	2020      	movs	r0, #32
 8001b34:	f000 fb6d 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b38:	e031      	b.n	8001b9e <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_I2C_MspInit+0x18c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12c      	bne.n	8001b9e <HAL_I2C_MspInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b72:	2304      	movs	r3, #4
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <HAL_I2C_MspInit+0x180>)
 8001b7e:	f000 fe7d 	bl	800287c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_I2C_MspInit+0x17c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
}
 8001b9e:	bf00      	nop
 8001ba0:	3730      	adds	r7, #48	; 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	2000031c 	.word	0x2000031c
 8001bb8:	40026010 	.word	0x40026010
 8001bbc:	40005800 	.word	0x40005800

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_UART_MspInit+0x84>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12b      	bne.n	8001c3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_UART_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_UART_MspInit+0x8c>)
 8001c36:	f000 fe21 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40004400 	.word	0x40004400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9c:	f000 f97e 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA1_Stream0_IRQHandler+0x10>)
 8001caa:	f000 fb9d 	bl	80023e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000031c 	.word	0x2000031c

08001cb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <I2C1_EV_IRQHandler+0x10>)
 8001cbe:	f003 f801 	bl	8004cc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000274 	.word	0x20000274

08001ccc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <I2C1_ER_IRQHandler+0x10>)
 8001cd2:	f003 f94a 	bl	8004f6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000274 	.word	0x20000274

08001ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <OTG_FS_IRQHandler+0x10>)
 8001ce6:	f001 f9e9 	bl	80030bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200007a4 	.word	0x200007a4

08001cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_kill>:

int _kill(int pid, int sig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0e:	f00a faab 	bl	800c268 <__errno>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2216      	movs	r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_exit>:

void _exit (int status)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe7 	bl	8001d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d36:	e7fe      	b.n	8001d36 <_exit+0x12>

08001d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
  }

  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e009      	b.n	8001d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc25 	bl	80015dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf1      	blt.n	8001d84 <_write+0x12>
  }
  return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_close>:

int _close(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_isatty>:

int _isatty(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <_sbrk+0x5c>)
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <_sbrk+0x60>)
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_sbrk+0x64>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <_sbrk+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e44:	f00a fa10 	bl	800c268 <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	e009      	b.n	8001e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_sbrk+0x64>)
 8001e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20020000 	.word	0x20020000
 8001e74:	00000400 	.word	0x00000400
 8001e78:	200003c0 	.word	0x200003c0
 8001e7c:	20000bf8 	.word	0x20000bf8

08001e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eaa:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec0:	4c0b      	ldr	r4, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ece:	f7ff ffd7 	bl	8001e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f00a f9cf 	bl	800c274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed6:	f7ff fb93 	bl	8001600 <main>
  bx  lr    
 8001eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ee8:	0800e30c 	.word	0x0800e30c
  ldr r2, =_sbss
 8001eec:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001ef0:	20000bf4 	.word	0x20000bf4

08001ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_Init+0x40>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_Init+0x40>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x40>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f94f 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fd58 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f967 	bl	800222e <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f92f 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200003c4 	.word	0x200003c4

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200003c4 	.word	0x200003c4

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff feb6 	bl	8001fc4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e099      	b.n	8002398 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002284:	e00f      	b.n	80022a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002286:	f7ff fe9d 	bl	8001fc4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b05      	cmp	r3, #5
 8002292:	d908      	bls.n	80022a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e078      	b.n	8002398 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e8      	bne.n	8002286 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_DMA_Init+0x158>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d107      	bne.n	8002310 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4313      	orrs	r3, r2
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b04      	cmp	r3, #4
 8002338:	d117      	bne.n	800236a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa19 	bl	8002784 <DMA_CheckFifoParam>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002366:	2301      	movs	r3, #1
 8002368:	e016      	b.n	8002398 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9d0 	bl	8002718 <DMA_CalcBaseAndBitshift>
 8002378:	4603      	mov	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	223f      	movs	r2, #63	; 0x3f
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	f010803f 	.word	0xf010803f

080023a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00c      	b.n	80023dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2205      	movs	r2, #5
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023f4:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_DMA_IRQHandler+0x248>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a8e      	ldr	r2, [pc, #568]	; (8002634 <HAL_DMA_IRQHandler+0x24c>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a9b      	lsrs	r3, r3, #10
 8002400:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	2208      	movs	r2, #8
 8002414:	409a      	lsls	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01a      	beq.n	8002454 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2208      	movs	r2, #8
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2201      	movs	r2, #1
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d012      	beq.n	800248a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2201      	movs	r2, #1
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0202 	orr.w	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2204      	movs	r2, #4
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2204      	movs	r2, #4
 80024ae:	409a      	lsls	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f043 0204 	orr.w	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2210      	movs	r2, #16
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d043      	beq.n	8002558 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03c      	beq.n	8002558 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2210      	movs	r2, #16
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d018      	beq.n	800252a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
 8002516:	e01f      	b.n	8002558 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
 8002528:	e016      	b.n	8002558 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0208 	bic.w	r2, r2, #8
 8002546:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	2220      	movs	r2, #32
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 808f 	beq.w	8002688 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8087 	beq.w	8002688 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2220      	movs	r2, #32
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b05      	cmp	r3, #5
 8002590:	d136      	bne.n	8002600 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0216 	bic.w	r2, r2, #22
 80025a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x1da>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0208 	bic.w	r2, r2, #8
 80025d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	223f      	movs	r2, #63	; 0x3f
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d07e      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
        }
        return;
 80025fe:	e079      	b.n	80026f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01d      	beq.n	800264a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	2b00      	cmp	r3, #0
 8002622:	d031      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
 800262c:	e02c      	b.n	8002688 <HAL_DMA_IRQHandler+0x2a0>
 800262e:	bf00      	nop
 8002630:	20000000 	.word	0x20000000
 8002634:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d023      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e01e      	b.n	8002688 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0210 	bic.w	r2, r2, #16
 8002666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	2b00      	cmp	r3, #0
 800268e:	d032      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2205      	movs	r2, #5
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d307      	bcc.n	80026d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f2      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x2cc>
 80026ce:	e000      	b.n	80026d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
 80026f2:	e000      	b.n	80026f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026f4:	bf00      	nop
    }
  }
}
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270a:	b2db      	uxtb	r3, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3b10      	subs	r3, #16
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <DMA_CalcBaseAndBitshift+0x64>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <DMA_CalcBaseAndBitshift+0x68>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d909      	bls.n	800275a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	1d1a      	adds	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	; 0x58
 8002758:	e007      	b.n	800276a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	aaaaaaab 	.word	0xaaaaaaab
 8002780:	0800df84 	.word	0x0800df84

08002784 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11f      	bne.n	80027de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d856      	bhi.n	8002852 <DMA_CheckFifoParam+0xce>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <DMA_CheckFifoParam+0x28>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027cf 	.word	0x080027cf
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	08002853 	.word	0x08002853
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d046      	beq.n	8002856 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e043      	b.n	8002856 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d6:	d140      	bne.n	800285a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027dc:	e03d      	b.n	800285a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e6:	d121      	bne.n	800282c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d837      	bhi.n	800285e <DMA_CheckFifoParam+0xda>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <DMA_CheckFifoParam+0x70>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002805 	.word	0x08002805
 80027f8:	0800280b 	.word	0x0800280b
 80027fc:	08002805 	.word	0x08002805
 8002800:	0800281d 	.word	0x0800281d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e030      	b.n	800286c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d025      	beq.n	8002862 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281a:	e022      	b.n	8002862 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002824:	d11f      	bne.n	8002866 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800282a:	e01c      	b.n	8002866 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d903      	bls.n	800283a <DMA_CheckFifoParam+0xb6>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d003      	beq.n	8002840 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002838:	e018      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      break;
 800283e:	e015      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e00b      	b.n	800286a <DMA_CheckFifoParam+0xe6>
      break;
 8002852:	bf00      	nop
 8002854:	e00a      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e008      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e006      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e004      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;   
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
    }
  } 
  
  return status; 
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e16b      	b.n	8002b70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 815a 	bne.w	8002b6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d005      	beq.n	80028ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d130      	bne.n	8002930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d017      	beq.n	800296c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d123      	bne.n	80029c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	69b9      	ldr	r1, [r7, #24]
 80029bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80b4 	beq.w	8002b6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a5f      	ldr	r2, [pc, #380]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1e:	4a5b      	ldr	r2, [pc, #364]	; (8002b8c <HAL_GPIO_Init+0x310>)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_GPIO_Init+0x314>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02b      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_GPIO_Init+0x318>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d025      	beq.n	8002a9e <HAL_GPIO_Init+0x222>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_GPIO_Init+0x31c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <HAL_GPIO_Init+0x21e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_GPIO_Init+0x320>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x21a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_GPIO_Init+0x324>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x216>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_GPIO_Init+0x328>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x212>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x32c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x20e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_GPIO_Init+0x330>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x20a>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e00e      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e00c      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e00a      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a8e:	2305      	movs	r3, #5
 8002a90:	e008      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_GPIO_Init+0x310>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae6:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b10:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b0f      	cmp	r3, #15
 8002b74:	f67f ae90 	bls.w	8002898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40021c00 	.word	0x40021c00
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be8:	b08f      	sub	sp, #60	; 0x3c
 8002bea:	af0a      	add	r7, sp, #40	; 0x28
 8002bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e054      	b.n	8002ca2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f008 f8f2 	bl	800adfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 f91e 	bl	8007e78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	687e      	ldr	r6, [r7, #4]
 8002c44:	466d      	mov	r5, sp
 8002c46:	f106 0410 	add.w	r4, r6, #16
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c5a:	1d33      	adds	r3, r6, #4
 8002c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5e:	6838      	ldr	r0, [r7, #0]
 8002c60:	f005 f898 	bl	8007d94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 f915 	bl	8007e9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	687e      	ldr	r6, [r7, #4]
 8002c78:	466d      	mov	r5, sp
 8002c7a:	f106 0410 	add.w	r4, r6, #16
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c8e:	1d33      	adds	r3, r6, #4
 8002c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	f005 fa9e 	bl	80081d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002caa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002caa:	b590      	push	{r4, r7, lr}
 8002cac:	b089      	sub	sp, #36	; 0x24
 8002cae:	af04      	add	r7, sp, #16
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	70fb      	strb	r3, [r7, #3]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70bb      	strb	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_HCD_HC_Init+0x28>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e076      	b.n	8002dc0 <HAL_HCD_HC_Init+0x116>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3338      	adds	r3, #56	; 0x38
 8002cfa:	787a      	ldrb	r2, [r7, #1]
 8002cfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3340      	adds	r3, #64	; 0x40
 8002d0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d0e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3339      	adds	r3, #57	; 0x39
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333f      	adds	r3, #63	; 0x3f
 8002d30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	78ba      	ldrb	r2, [r7, #2]
 8002d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d3e:	b2d0      	uxtb	r0, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	333a      	adds	r3, #58	; 0x3a
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da09      	bge.n	8002d6c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	333b      	adds	r3, #59	; 0x3b
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e008      	b.n	8002d7e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	333b      	adds	r3, #59	; 0x3b
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d90:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	787c      	ldrb	r4, [r7, #1]
 8002d98:	78ba      	ldrb	r2, [r7, #2]
 8002d9a:	78f9      	ldrb	r1, [r7, #3]
 8002d9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	4623      	mov	r3, r4
 8002dae:	f005 fb97 	bl	80084e0 <USB_HC_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_HCD_HC_Halt+0x1e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e00f      	b.n	8002e06 <HAL_HCD_HC_Halt+0x3e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f005 fde7 	bl	80089ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	70fb      	strb	r3, [r7, #3]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70bb      	strb	r3, [r7, #2]
 8002e26:	4613      	mov	r3, r2
 8002e28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	333b      	adds	r3, #59	; 0x3b
 8002e38:	78ba      	ldrb	r2, [r7, #2]
 8002e3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	333f      	adds	r3, #63	; 0x3f
 8002e4a:	787a      	ldrb	r2, [r7, #1]
 8002e4c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e4e:	7c3b      	ldrb	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d112      	bne.n	8002e7a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3342      	adds	r3, #66	; 0x42
 8002e62:	2203      	movs	r2, #3
 8002e64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333d      	adds	r3, #61	; 0x3d
 8002e74:	7f3a      	ldrb	r2, [r7, #28]
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e008      	b.n	8002e8c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3342      	adds	r3, #66	; 0x42
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	f200 80c6 	bhi.w	8003020 <HAL_HCD_HC_SubmitRequest+0x210>
 8002e94:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	0800300d 	.word	0x0800300d
 8002ea4:	08002f11 	.word	0x08002f11
 8002ea8:	08002f8f 	.word	0x08002f8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002eac:	7c3b      	ldrb	r3, [r7, #16]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	f040 80b8 	bne.w	8003024 <HAL_HCD_HC_SubmitRequest+0x214>
 8002eb4:	78bb      	ldrb	r3, [r7, #2]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80b4 	bne.w	8003024 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ebc:	8b3b      	ldrh	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3355      	adds	r3, #85	; 0x55
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3355      	adds	r3, #85	; 0x55
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3342      	adds	r3, #66	; 0x42
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002efa:	e093      	b.n	8003024 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3342      	adds	r3, #66	; 0x42
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	e089      	b.n	8003024 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f10:	78bb      	ldrb	r3, [r7, #2]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3355      	adds	r3, #85	; 0x55
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3342      	adds	r3, #66	; 0x42
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f3c:	e073      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3342      	adds	r3, #66	; 0x42
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
      break;
 8002f50:	e069      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3354      	adds	r3, #84	; 0x54
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3342      	adds	r3, #66	; 0x42
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
      break;
 8002f78:	e055      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3342      	adds	r3, #66	; 0x42
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
      break;
 8002f8c:	e04b      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f8e:	78bb      	ldrb	r3, [r7, #2]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3355      	adds	r3, #85	; 0x55
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3342      	adds	r3, #66	; 0x42
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fba:	e034      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3342      	adds	r3, #66	; 0x42
 8002fca:	2202      	movs	r2, #2
 8002fcc:	701a      	strb	r2, [r3, #0]
      break;
 8002fce:	e02a      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3354      	adds	r3, #84	; 0x54
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3342      	adds	r3, #66	; 0x42
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
      break;
 8002ff6:	e016      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3342      	adds	r3, #66	; 0x42
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e00c      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3342      	adds	r3, #66	; 0x42
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
      break;
 800301e:	e002      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003024:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3344      	adds	r3, #68	; 0x44
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	8b3a      	ldrh	r2, [r7, #24]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	202c      	movs	r0, #44	; 0x2c
 8003040:	fb00 f303 	mul.w	r3, r0, r3
 8003044:	440b      	add	r3, r1
 8003046:	334c      	adds	r3, #76	; 0x4c
 8003048:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3350      	adds	r3, #80	; 0x50
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3339      	adds	r3, #57	; 0x39
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3361      	adds	r3, #97	; 0x61
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	222c      	movs	r2, #44	; 0x2c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	3338      	adds	r3, #56	; 0x38
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	18d1      	adds	r1, r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	f005 fb3a 	bl	8008724 <USB_HC_StartXfer>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f005 f83b 	bl	800814e <USB_GetMode>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 80f6 	bne.w	80032cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 f81f 	bl	8008128 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80ec 	beq.w	80032ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f005 f816 	bl	8008128 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003106:	d104      	bne.n	8003112 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003110:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f005 f806 	bl	8008128 <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003126:	d104      	bne.n	8003132 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003130:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f004 fff6 	bl	8008128 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003146:	d104      	bne.n	8003152 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003150:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f004 ffe6 	bl	8008128 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d103      	bne.n	800316e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2202      	movs	r2, #2
 800316c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f004 ffd8 	bl	8008128 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003182:	d11c      	bne.n	80031be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800318c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800319e:	2110      	movs	r1, #16
 80031a0:	6938      	ldr	r0, [r7, #16]
 80031a2:	f004 fec7 	bl	8007f34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031a6:	6938      	ldr	r0, [r7, #16]
 80031a8:	f004 fef8 	bl	8007f9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 f8ce 	bl	8008354 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f007 fe9d 	bl	800aef8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 ffb0 	bl	8008128 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d2:	d102      	bne.n	80031da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f001 f89e 	bl	8004316 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 ffa2 	bl	8008128 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d106      	bne.n	80031fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f007 fe66 	bl	800aec0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2208      	movs	r2, #8
 80031fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f004 ff91 	bl	8008128 <USB_ReadInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d101      	bne.n	8003214 <HAL_HCD_IRQHandler+0x158>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_HCD_IRQHandler+0x15a>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0210 	bic.w	r2, r2, #16
 8003228:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ffa1 	bl	8004172 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0210 	orr.w	r2, r2, #16
 800323e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 ff6f 	bl	8008128 <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003254:	d13a      	bne.n	80032cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f005 fba4 	bl	80089a8 <USB_HC_ReadInterrupt>
 8003260:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e025      	b.n	80032b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d018      	beq.n	80032ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	d106      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8ab 	bl	80033f6 <HCD_HC_IN_IRQHandler>
 80032a0:	e005      	b.n	80032ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fbf9 	bl	8003aa0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3d4      	bcc.n	8003268 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c6:	615a      	str	r2, [r3, #20]
 80032c8:	e000      	b.n	80032cc <HAL_HCD_IRQHandler+0x210>
      return;
 80032ca:	bf00      	nop
    }
  }
}
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_HCD_Start+0x16>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e013      	b.n	8003310 <HAL_HCD_Start+0x3e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 f890 	bl	800841c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fda8 	bl	8007e56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_HCD_Stop+0x16>
 800332a:	2302      	movs	r3, #2
 800332c:	e00d      	b.n	800334a <HAL_HCD_Stop+0x32>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f005 fc7e 	bl	8008c3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 f832 	bl	80083c8 <USB_ResetPort>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	781b      	ldrb	r3, [r3, #0]
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3350      	adds	r3, #80	; 0x50
 80033b0:	681b      	ldr	r3, [r3, #0]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 f876 	bl	80084bc <USB_GetCurrentFrame>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f005 f851 	bl	800848e <USB_GetHostSpeed>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d11a      	bne.n	800345c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	461a      	mov	r2, r3
 8003434:	2304      	movs	r3, #4
 8003436:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3361      	adds	r3, #97	; 0x61
 8003446:	2206      	movs	r2, #6
 8003448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f005 fab8 	bl	80089ca <USB_HC_Halt>
 800345a:	e0af      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d11b      	bne.n	80034ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	461a      	mov	r2, r3
 8003482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003486:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	2207      	movs	r2, #7
 8003498:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 fa90 	bl	80089ca <USB_HC_Halt>
 80034aa:	e087      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d109      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2320      	movs	r3, #32
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	e072      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d11a      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2308      	movs	r3, #8
 80034fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3361      	adds	r3, #97	; 0x61
 800350c:	2205      	movs	r2, #5
 800350e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f005 fa55 	bl	80089ca <USB_HC_Halt>
 8003520:	e04c      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d11b      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	461a      	mov	r2, r3
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	3361      	adds	r3, #97	; 0x61
 800355c:	2208      	movs	r2, #8
 800355e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f005 fa2d 	bl	80089ca <USB_HC_Halt>
 8003570:	e024      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d119      	bne.n	80035bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3361      	adds	r3, #97	; 0x61
 80035a8:	2206      	movs	r2, #6
 80035aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fa07 	bl	80089ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d112      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f005 f9f3 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80035f8:	e24e      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 80df 	bne.w	80037d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3348      	adds	r3, #72	; 0x48
 8003628:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0159      	lsls	r1, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	440b      	add	r3, r1
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800363c:	1ad2      	subs	r2, r2, r3
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	202c      	movs	r0, #44	; 0x2c
 8003644:	fb00 f303 	mul.w	r3, r0, r3
 8003648:	440b      	add	r3, r1
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	335c      	adds	r3, #92	; 0x5c
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	461a      	mov	r2, r3
 8003680:	2301      	movs	r3, #1
 8003682:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	333f      	adds	r3, #63	; 0x3f
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	333f      	adds	r3, #63	; 0x3f
 80036a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d111      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f005 f987 	bl	80089ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2310      	movs	r3, #16
 80036cc:	6093      	str	r3, [r2, #8]
 80036ce:	e03a      	b.n	8003746 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	333f      	adds	r3, #63	; 0x3f
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d009      	beq.n	80036f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	333f      	adds	r3, #63	; 0x3f
 80036f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d126      	bne.n	8003746 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	0151      	lsls	r1, r2, #5
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	440a      	add	r2, r1
 800370e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003716:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3360      	adds	r3, #96	; 0x60
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	202c      	movs	r0, #44	; 0x2c
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	4413      	add	r3, r2
 800373a:	3360      	adds	r3, #96	; 0x60
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f007 fbe7 	bl	800af14 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12b      	bne.n	80037a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3348      	adds	r3, #72	; 0x48
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	202c      	movs	r0, #44	; 0x2c
 8003764:	fb00 f202 	mul.w	r2, r0, r2
 8003768:	440a      	add	r2, r1
 800376a:	3240      	adds	r2, #64	; 0x40
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 818e 	beq.w	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3354      	adds	r3, #84	; 0x54
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f083 0301 	eor.w	r3, r3, #1
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3354      	adds	r3, #84	; 0x54
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
}
 80037a4:	e178      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3354      	adds	r3, #84	; 0x54
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	f083 0301 	eor.w	r3, r3, #1
 80037ba:	b2d8      	uxtb	r0, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3354      	adds	r3, #84	; 0x54
 80037ca:	4602      	mov	r2, r0
 80037cc:	701a      	strb	r2, [r3, #0]
}
 80037ce:	e163      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 80f6 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3361      	adds	r3, #97	; 0x61
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d109      	bne.n	8003810 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3360      	adds	r3, #96	; 0x60
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e0c9      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3361      	adds	r3, #97	; 0x61
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d109      	bne.n	8003838 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3360      	adds	r3, #96	; 0x60
 8003832:	2205      	movs	r2, #5
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e0b5      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3361      	adds	r3, #97	; 0x61
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b06      	cmp	r3, #6
 800384a:	d009      	beq.n	8003860 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3361      	adds	r3, #97	; 0x61
 800385a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800385c:	2b08      	cmp	r3, #8
 800385e:	d150      	bne.n	8003902 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	335c      	adds	r3, #92	; 0x5c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	202c      	movs	r0, #44	; 0x2c
 8003878:	fb00 f303 	mul.w	r3, r0, r3
 800387c:	440b      	add	r3, r1
 800387e:	335c      	adds	r3, #92	; 0x5c
 8003880:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	335c      	adds	r3, #92	; 0x5c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d912      	bls.n	80038bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	335c      	adds	r3, #92	; 0x5c
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3360      	adds	r3, #96	; 0x60
 80038b6:	2204      	movs	r2, #4
 80038b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038ba:	e073      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3360      	adds	r3, #96	; 0x60
 80038ca:	2202      	movs	r2, #2
 80038cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003900:	e050      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	3361      	adds	r3, #97	; 0x61
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d122      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3360      	adds	r3, #96	; 0x60
 8003924:	2202      	movs	r2, #2
 8003926:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800393e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003946:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e023      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b07      	cmp	r3, #7
 800396e:	d119      	bne.n	80039a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	335c      	adds	r3, #92	; 0x5c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	440b      	add	r3, r1
 800398e:	335c      	adds	r3, #92	; 0x5c
 8003990:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3360      	adds	r3, #96	; 0x60
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	2302      	movs	r3, #2
 80039b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	b2d9      	uxtb	r1, r3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	202c      	movs	r0, #44	; 0x2c
 80039c0:	fb00 f303 	mul.w	r3, r0, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3360      	adds	r3, #96	; 0x60
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f007 faa1 	bl	800af14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039d2:	e061      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d156      	bne.n	8003a98 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	333f      	adds	r3, #63	; 0x3f
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d111      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	335c      	adds	r3, #92	; 0x5c
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 ffd5 	bl	80089ca <USB_HC_Halt>
 8003a20:	e031      	b.n	8003a86 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	333f      	adds	r3, #63	; 0x3f
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	333f      	adds	r3, #63	; 0x3f
 8003a44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d11d      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3361      	adds	r3, #97	; 0x61
 8003a72:	2203      	movs	r2, #3
 8003a74:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 ffa2 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2310      	movs	r3, #16
 8003a96:	6093      	str	r3, [r2, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d11a      	bne.n	8003b06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003adc:	461a      	mov	r2, r3
 8003ade:	2304      	movs	r3, #4
 8003ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3361      	adds	r3, #97	; 0x61
 8003af0:	2206      	movs	r2, #6
 8003af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 ff63 	bl	80089ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003b04:	e331      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d12e      	bne.n	8003b7a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	333d      	adds	r3, #61	; 0x3d
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f040 8313 	bne.w	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	333d      	adds	r3, #61	; 0x3d
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	3360      	adds	r3, #96	; 0x60
 8003b64:	2202      	movs	r2, #2
 8003b66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 ff29 	bl	80089ca <USB_HC_Halt>
}
 8003b78:	e2f7      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b90:	d112      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ba4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f004 ff0a 	bl	80089ca <USB_HC_Halt>
}
 8003bb6:	e2d8      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d140      	bne.n	8003c50 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	212c      	movs	r1, #44	; 0x2c
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	335c      	adds	r3, #92	; 0x5c
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d111      	bne.n	8003c1a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	333d      	adds	r3, #61	; 0x3d
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	2340      	movs	r3, #64	; 0x40
 8003c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	2301      	movs	r3, #1
 8003c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3361      	adds	r3, #97	; 0x61
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 febe 	bl	80089ca <USB_HC_Halt>
}
 8003c4e:	e28c      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d12c      	bne.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3361      	adds	r3, #97	; 0x61
 8003c74:	2204      	movs	r2, #4
 8003c76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	333d      	adds	r3, #61	; 0x3d
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	212c      	movs	r1, #44	; 0x2c
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	335c      	adds	r3, #92	; 0x5c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fe8f 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	6093      	str	r3, [r2, #8]
}
 8003cbe:	e254      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d11a      	bne.n	8003d0c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3361      	adds	r3, #97	; 0x61
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 fe60 	bl	80089ca <USB_HC_Halt>
}
 8003d0a:	e22e      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d140      	bne.n	8003da4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	335c      	adds	r3, #92	; 0x5c
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3361      	adds	r3, #97	; 0x61
 8003d42:	2203      	movs	r2, #3
 8003d44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	333d      	adds	r3, #61	; 0x3d
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d112      	bne.n	8003d80 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	333c      	adds	r3, #60	; 0x3c
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	333d      	adds	r3, #61	; 0x3d
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 fe1d 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2310      	movs	r3, #16
 8003da0:	6093      	str	r3, [r2, #8]
}
 8003da2:	e1e2      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d164      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d111      	bne.n	8003de6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3361      	adds	r3, #97	; 0x61
 8003dd0:	2206      	movs	r2, #6
 8003dd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 fdf3 	bl	80089ca <USB_HC_Halt>
 8003de4:	e044      	b.n	8003e70 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	335c      	adds	r3, #92	; 0x5c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	202c      	movs	r0, #44	; 0x2c
 8003dfe:	fb00 f303 	mul.w	r3, r0, r3
 8003e02:	440b      	add	r3, r1
 8003e04:	335c      	adds	r3, #92	; 0x5c
 8003e06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	335c      	adds	r3, #92	; 0x5c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d920      	bls.n	8003e5e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	335c      	adds	r3, #92	; 0x5c
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3360      	adds	r3, #96	; 0x60
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	b2d9      	uxtb	r1, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	202c      	movs	r0, #44	; 0x2c
 8003e4a:	fb00 f303 	mul.w	r3, r0, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3360      	adds	r3, #96	; 0x60
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f007 f85c 	bl	800af14 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e5c:	e008      	b.n	8003e70 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3360      	adds	r3, #96	; 0x60
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	6093      	str	r3, [r2, #8]
}
 8003e82:	e172      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d11b      	bne.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3361      	adds	r3, #97	; 0x61
 8003eaa:	2208      	movs	r2, #8
 8003eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fd86 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed0:	6093      	str	r3, [r2, #8]
}
 8003ed2:	e14a      	b.n	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	f040 813f 	bne.w	800416a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3361      	adds	r3, #97	; 0x61
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d17d      	bne.n	8003ffc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3360      	adds	r3, #96	; 0x60
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	333f      	adds	r3, #63	; 0x3f
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d00a      	beq.n	8003f3c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	333f      	adds	r3, #63	; 0x3f
 8003f34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	f040 8100 	bne.w	800413c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d113      	bne.n	8003f6c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	212c      	movs	r1, #44	; 0x2c
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	3355      	adds	r3, #85	; 0x55
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	f083 0301 	eor.w	r3, r3, #1
 8003f58:	b2d8      	uxtb	r0, r3
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3355      	adds	r3, #85	; 0x55
 8003f68:	4602      	mov	r2, r0
 8003f6a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 80e3 	bne.w	800413c <HCD_HC_OUT_IRQHandler+0x69c>
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	334c      	adds	r3, #76	; 0x4c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80d8 	beq.w	800413c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	334c      	adds	r3, #76	; 0x4c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	202c      	movs	r0, #44	; 0x2c
 8003fa2:	fb00 f202 	mul.w	r2, r0, r2
 8003fa6:	440a      	add	r2, r1
 8003fa8:	3240      	adds	r2, #64	; 0x40
 8003faa:	8812      	ldrh	r2, [r2, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	202c      	movs	r0, #44	; 0x2c
 8003fb6:	fb00 f202 	mul.w	r2, r0, r2
 8003fba:	440a      	add	r2, r1
 8003fbc:	3240      	adds	r2, #64	; 0x40
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80b5 	beq.w	800413c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3355      	adds	r3, #85	; 0x55
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	b2d8      	uxtb	r0, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3355      	adds	r3, #85	; 0x55
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e09f      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3361      	adds	r3, #97	; 0x61
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d109      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e08b      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3361      	adds	r3, #97	; 0x61
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d109      	bne.n	800404c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3360      	adds	r3, #96	; 0x60
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e077      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3361      	adds	r3, #97	; 0x61
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d109      	bne.n	8004074 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3360      	adds	r3, #96	; 0x60
 800406e:	2205      	movs	r2, #5
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e063      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3361      	adds	r3, #97	; 0x61
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d009      	beq.n	800409c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	3361      	adds	r3, #97	; 0x61
 8004096:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004098:	2b08      	cmp	r3, #8
 800409a:	d14f      	bne.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	335c      	adds	r3, #92	; 0x5c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	202c      	movs	r0, #44	; 0x2c
 80040b4:	fb00 f303 	mul.w	r3, r0, r3
 80040b8:	440b      	add	r3, r1
 80040ba:	335c      	adds	r3, #92	; 0x5c
 80040bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d912      	bls.n	80040f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	335c      	adds	r3, #92	; 0x5c
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3360      	adds	r3, #96	; 0x60
 80040f2:	2204      	movs	r2, #4
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e021      	b.n	800413c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004120:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004128:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	461a      	mov	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	2302      	movs	r3, #2
 800414c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	b2d9      	uxtb	r1, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	202c      	movs	r0, #44	; 0x2c
 8004158:	fb00 f303 	mul.w	r3, r0, r3
 800415c:	4413      	add	r3, r2
 800415e:	3360      	adds	r3, #96	; 0x60
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f006 fed5 	bl	800af14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800416a:	bf00      	nop
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08a      	sub	sp, #40	; 0x28
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	0c5b      	lsrs	r3, r3, #17
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d004      	beq.n	80041b8 <HCD_RXQLVL_IRQHandler+0x46>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	f000 80a9 	beq.w	8004308 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041b6:	e0aa      	b.n	800430e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80a6 	beq.w	800430c <HCD_RXQLVL_IRQHandler+0x19a>
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3344      	adds	r3, #68	; 0x44
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 809b 	beq.w	800430c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3350      	adds	r3, #80	; 0x50
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	441a      	add	r2, r3
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	202c      	movs	r0, #44	; 0x2c
 80041f0:	fb00 f303 	mul.w	r3, r0, r3
 80041f4:	440b      	add	r3, r1
 80041f6:	334c      	adds	r3, #76	; 0x4c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d87a      	bhi.n	80042f4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	212c      	movs	r1, #44	; 0x2c
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	3344      	adds	r3, #68	; 0x44
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	b292      	uxth	r2, r2
 8004216:	4619      	mov	r1, r3
 8004218:	f003 ff2e 	bl	8008078 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3344      	adds	r3, #68	; 0x44
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	441a      	add	r2, r3
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	202c      	movs	r0, #44	; 0x2c
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	440b      	add	r3, r1
 800423c:	3344      	adds	r3, #68	; 0x44
 800423e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3350      	adds	r3, #80	; 0x50
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	441a      	add	r2, r3
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	202c      	movs	r0, #44	; 0x2c
 800425a:	fb00 f303 	mul.w	r3, r0, r3
 800425e:	440b      	add	r3, r1
 8004260:	3350      	adds	r3, #80	; 0x50
 8004262:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	0cdb      	lsrs	r3, r3, #19
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	3340      	adds	r3, #64	; 0x40
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4293      	cmp	r3, r2
 8004290:	d13c      	bne.n	800430c <HCD_RXQLVL_IRQHandler+0x19a>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d039      	beq.n	800430c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3354      	adds	r3, #84	; 0x54
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f083 0301 	eor.w	r3, r3, #1
 80042de:	b2d8      	uxtb	r0, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3354      	adds	r3, #84	; 0x54
 80042ee:	4602      	mov	r2, r0
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e00b      	b.n	800430c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3360      	adds	r3, #96	; 0x60
 8004302:	2204      	movs	r2, #4
 8004304:	701a      	strb	r2, [r3, #0]
      break;
 8004306:	e001      	b.n	800430c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800430c:	bf00      	nop
  }
}
 800430e:	bf00      	nop
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004342:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d10b      	bne.n	8004366 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d102      	bne.n	800435e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f006 fdbf 	bl	800aedc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b08      	cmp	r3, #8
 800436e:	d132      	bne.n	80043d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d126      	bne.n	80043d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d113      	bne.n	80043b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004390:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004394:	d106      	bne.n	80043a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f003 ffd9 	bl	8008354 <USB_InitFSLSPClkSel>
 80043a2:	e011      	b.n	80043c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 ffd2 	bl	8008354 <USB_InitFSLSPClkSel>
 80043b0:	e00a      	b.n	80043c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d106      	bne.n	80043c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043c0:	461a      	mov	r2, r3
 80043c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f006 fdb1 	bl	800af30 <HAL_HCD_PortEnabled_Callback>
 80043ce:	e002      	b.n	80043d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f006 fdbb 	bl	800af4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d103      	bne.n	80043e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f043 0320 	orr.w	r3, r3, #32
 80043e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e12b      	b.n	8004666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd fb04 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800445e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004460:	f003 f8ae 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 8004464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a81      	ldr	r2, [pc, #516]	; (8004670 <HAL_I2C_Init+0x274>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d807      	bhi.n	8004480 <HAL_I2C_Init+0x84>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a80      	ldr	r2, [pc, #512]	; (8004674 <HAL_I2C_Init+0x278>)
 8004474:	4293      	cmp	r3, r2
 8004476:	bf94      	ite	ls
 8004478:	2301      	movls	r3, #1
 800447a:	2300      	movhi	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e006      	b.n	800448e <HAL_I2C_Init+0x92>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_I2C_Init+0x27c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	bf94      	ite	ls
 8004488:	2301      	movls	r3, #1
 800448a:	2300      	movhi	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0e7      	b.n	8004666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a78      	ldr	r2, [pc, #480]	; (800467c <HAL_I2C_Init+0x280>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0c9b      	lsrs	r3, r3, #18
 80044a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4a6a      	ldr	r2, [pc, #424]	; (8004670 <HAL_I2C_Init+0x274>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <HAL_I2C_Init+0xd4>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3301      	adds	r3, #1
 80044ce:	e009      	b.n	80044e4 <HAL_I2C_Init+0xe8>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	4a69      	ldr	r2, [pc, #420]	; (8004680 <HAL_I2C_Init+0x284>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	3301      	adds	r3, #1
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	495c      	ldr	r1, [pc, #368]	; (8004670 <HAL_I2C_Init+0x274>)
 8004500:	428b      	cmp	r3, r1
 8004502:	d819      	bhi.n	8004538 <HAL_I2C_Init+0x13c>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e59      	subs	r1, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004518:	400b      	ands	r3, r1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_I2C_Init+0x138>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1e59      	subs	r1, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fbb1 f3f3 	udiv	r3, r1, r3
 800452c:	3301      	adds	r3, #1
 800452e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004532:	e051      	b.n	80045d8 <HAL_I2C_Init+0x1dc>
 8004534:	2304      	movs	r3, #4
 8004536:	e04f      	b.n	80045d8 <HAL_I2C_Init+0x1dc>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d111      	bne.n	8004564 <HAL_I2C_Init+0x168>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1e58      	subs	r0, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	440b      	add	r3, r1
 800454e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e012      	b.n	800458a <HAL_I2C_Init+0x18e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1e58      	subs	r0, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	0099      	lsls	r1, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	fbb0 f3f3 	udiv	r3, r0, r3
 800457a:	3301      	adds	r3, #1
 800457c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x196>
 800458e:	2301      	movs	r3, #1
 8004590:	e022      	b.n	80045d8 <HAL_I2C_Init+0x1dc>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10e      	bne.n	80045b8 <HAL_I2C_Init+0x1bc>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1e58      	subs	r0, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6859      	ldr	r1, [r3, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	440b      	add	r3, r1
 80045a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	e00f      	b.n	80045d8 <HAL_I2C_Init+0x1dc>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1e58      	subs	r0, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	0099      	lsls	r1, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	6809      	ldr	r1, [r1, #0]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6911      	ldr	r1, [r2, #16]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	430b      	orrs	r3, r1
 800461a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	000186a0 	.word	0x000186a0
 8004674:	001e847f 	.word	0x001e847f
 8004678:	003d08ff 	.word	0x003d08ff
 800467c:	431bde83 	.word	0x431bde83
 8004680:	10624dd3 	.word	0x10624dd3

08004684 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	4603      	mov	r3, r0
 8004694:	817b      	strh	r3, [r7, #10]
 8004696:	460b      	mov	r3, r1
 8004698:	813b      	strh	r3, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800469e:	f7fd fc91 	bl	8001fc4 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	f040 80d9 	bne.w	8004864 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	2319      	movs	r3, #25
 80046b8:	2201      	movs	r2, #1
 80046ba:	496d      	ldr	r1, [pc, #436]	; (8004870 <HAL_I2C_Mem_Write+0x1ec>)
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f002 f8e5 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0cc      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_I2C_Mem_Write+0x56>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e0c5      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d007      	beq.n	8004700 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2221      	movs	r2, #33	; 0x21
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a4d      	ldr	r2, [pc, #308]	; (8004874 <HAL_I2C_Mem_Write+0x1f0>)
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004742:	88f8      	ldrh	r0, [r7, #6]
 8004744:	893a      	ldrh	r2, [r7, #8]
 8004746:	8979      	ldrh	r1, [r7, #10]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4603      	mov	r3, r0
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f001 fe74 	bl	8006440 <I2C_RequestMemoryWrite>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d052      	beq.n	8004804 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e081      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f002 f966 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06b      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d11b      	bne.n	8004804 <HAL_I2C_Mem_Write+0x180>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1aa      	bne.n	8004762 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f002 f952 	bl	8006aba <I2C_WaitOnBTFFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	2b04      	cmp	r3, #4
 8004822:	d107      	bne.n	8004834 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e016      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	00100002 	.word	0x00100002
 8004874:	ffff0000 	.word	0xffff0000

08004878 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	817b      	strh	r3, [r7, #10]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004892:	f7fd fb97 	bl	8001fc4 <HAL_GetTick>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f040 8208 	bne.w	8004cb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2319      	movs	r3, #25
 80048ac:	2201      	movs	r2, #1
 80048ae:	497b      	ldr	r1, [pc, #492]	; (8004a9c <HAL_I2C_Mem_Read+0x224>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f001 ffeb 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
 80048be:	e1fb      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_I2C_Mem_Read+0x56>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e1f4      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d007      	beq.n	80048f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2222      	movs	r2, #34	; 0x22
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a5b      	ldr	r2, [pc, #364]	; (8004aa0 <HAL_I2C_Mem_Read+0x228>)
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004936:	88f8      	ldrh	r0, [r7, #6]
 8004938:	893a      	ldrh	r2, [r7, #8]
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4603      	mov	r3, r0
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f001 fe10 	bl	800656c <I2C_RequestMemoryRead>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1b0      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d113      	bne.n	8004986 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e184      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	2b01      	cmp	r3, #1
 800498c:	d11b      	bne.n	80049c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e164      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d11b      	bne.n	8004a06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	e144      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a1c:	e138      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	f200 80f1 	bhi.w	8004c0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d123      	bne.n	8004a78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f002 f8b3 	bl	8006ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e139      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a76:	e10b      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d14e      	bne.n	8004b1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	2200      	movs	r2, #0
 8004a88:	4906      	ldr	r1, [pc, #24]	; (8004aa4 <HAL_I2C_Mem_Read+0x22c>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f001 fefe 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e10e      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
 8004a9a:	bf00      	nop
 8004a9c:	00100002 	.word	0x00100002
 8004aa0:	ffff0000 	.word	0xffff0000
 8004aa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b1c:	e0b8      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	2200      	movs	r2, #0
 8004b26:	4966      	ldr	r1, [pc, #408]	; (8004cc0 <HAL_I2C_Mem_Read+0x448>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f001 feaf 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0bf      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2200      	movs	r2, #0
 8004b82:	494f      	ldr	r1, [pc, #316]	; (8004cc0 <HAL_I2C_Mem_Read+0x448>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f001 fe81 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e091      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c08:	e042      	b.n	8004c90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f001 ffc6 	bl	8006ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e04c      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d118      	bne.n	8004c90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f47f aec2 	bne.w	8004a1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3728      	adds	r7, #40	; 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	00010004 	.word	0x00010004

08004cc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d003      	beq.n	8004cfc <HAL_I2C_EV_IRQHandler+0x38>
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	f040 80b1 	bne.w	8004e5e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <HAL_I2C_EV_IRQHandler+0x6e>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d1c:	d003      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x62>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_EV_IRQHandler+0x66>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_I2C_EV_IRQHandler+0x68>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f000 8114 	beq.w	8004f5a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x90>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d006      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 ffaf 	bl	8006caa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fd5e 	bl	800580e <I2C_Master_SB>
 8004d52:	e083      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_I2C_EV_IRQHandler+0xac>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fdd6 	bl	800591a <I2C_Master_ADD10>
 8004d6e:	e075      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_I2C_EV_IRQHandler+0xc8>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fdf2 	bl	800596e <I2C_Master_ADDR>
 8004d8a:	e067      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d036      	beq.n	8004e04 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da4:	f000 80db 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x10a>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x10a>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9d6 	bl	8005178 <I2C_MasterTransmit_TXE>
 8004dcc:	e046      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80c2 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80bc 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004de6:	7bbb      	ldrb	r3, [r7, #14]
 8004de8:	2b21      	cmp	r3, #33	; 0x21
 8004dea:	d103      	bne.n	8004df4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa5f 	bl	80052b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df2:	e0b4      	b.n	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	f040 80b1 	bne.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 facd 	bl	800539c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e02:	e0ac      	b.n	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	f000 80a4 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x178>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x178>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb45 	bl	80054c4 <I2C_MasterReceive_RXNE>
 8004e3a:	e00f      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 808b 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8085 	beq.w	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fbf0 	bl	800563a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e5a:	e080      	b.n	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
 8004e5c:	e07f      	b.n	8004f5e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e007      	b.n	8004e80 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d011      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x1ea>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ea4:	69b9      	ldr	r1, [r7, #24]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 ffb0 	bl	8005e0c <I2C_Slave_ADDR>
 8004eac:	e05a      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_I2C_EV_IRQHandler+0x206>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ffea 	bl	8005e9c <I2C_Slave_STOPF>
 8004ec8:	e04c      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eca:	7bbb      	ldrb	r3, [r7, #14]
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d002      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0x212>
 8004ed0:	7bbb      	ldrb	r3, [r7, #14]
 8004ed2:	2b29      	cmp	r3, #41	; 0x29
 8004ed4:	d120      	bne.n	8004f18 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x238>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x238>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fecb 	bl	8005c90 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004efa:	e032      	b.n	8004f62 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02d      	beq.n	8004f62 <HAL_I2C_EV_IRQHandler+0x29e>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d028      	beq.n	8004f62 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fefa 	bl	8005d0a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f16:	e024      	b.n	8004f62 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <HAL_I2C_EV_IRQHandler+0x27a>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_I2C_EV_IRQHandler+0x27a>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 ff08 	bl	8005d4c <I2C_SlaveReceive_RXNE>
 8004f3c:	e012      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 ff38 	bl	8005dc8 <I2C_SlaveReceive_BTF>
 8004f58:	e004      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b08a      	sub	sp, #40	; 0x28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_I2C_ER_IRQHandler+0x4a>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fb2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <HAL_I2C_ER_IRQHandler+0x70>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004fd8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d03e      	beq.n	8005062 <HAL_I2C_ER_IRQHandler+0xf8>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d039      	beq.n	8005062 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004fee:	7efb      	ldrb	r3, [r7, #27]
 8004ff0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005008:	7ebb      	ldrb	r3, [r7, #26]
 800500a:	2b20      	cmp	r3, #32
 800500c:	d112      	bne.n	8005034 <HAL_I2C_ER_IRQHandler+0xca>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10f      	bne.n	8005034 <HAL_I2C_ER_IRQHandler+0xca>
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	2b21      	cmp	r3, #33	; 0x21
 8005018:	d008      	beq.n	800502c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b29      	cmp	r3, #41	; 0x29
 800501e:	d005      	beq.n	800502c <HAL_I2C_ER_IRQHandler+0xc2>
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	2b28      	cmp	r3, #40	; 0x28
 8005024:	d106      	bne.n	8005034 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b21      	cmp	r3, #33	; 0x21
 800502a:	d103      	bne.n	8005034 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 f865 	bl	80060fc <I2C_Slave_AF>
 8005032:	e016      	b.n	8005062 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005046:	7efb      	ldrb	r3, [r7, #27]
 8005048:	2b10      	cmp	r3, #16
 800504a:	d002      	beq.n	8005052 <HAL_I2C_ER_IRQHandler+0xe8>
 800504c:	7efb      	ldrb	r3, [r7, #27]
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d107      	bne.n	8005062 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005060:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <HAL_I2C_ER_IRQHandler+0x11e>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	f043 0308 	orr.w	r3, r3, #8
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005086:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 f89e 	bl	80061dc <I2C_ITError>
  }
}
 80050a0:	bf00      	nop
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
 8005104:	4613      	mov	r3, r2
 8005106:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005186:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800518e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d150      	bne.n	8005240 <I2C_MasterTransmit_TXE+0xc8>
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b21      	cmp	r3, #33	; 0x21
 80051a2:	d14d      	bne.n	8005240 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d01d      	beq.n	80051e6 <I2C_MasterTransmit_TXE+0x6e>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d01a      	beq.n	80051e6 <I2C_MasterTransmit_TXE+0x6e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b6:	d016      	beq.n	80051e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2211      	movs	r2, #17
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ff62 	bl	80050a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051e4:	e060      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005204:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d107      	bne.n	8005230 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff7d 	bl	8005128 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800522e:	e03b      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff35 	bl	80050a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800523e:	e033      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b21      	cmp	r3, #33	; 0x21
 8005244:	d005      	beq.n	8005252 <I2C_MasterTransmit_TXE+0xda>
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d12d      	bne.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b22      	cmp	r3, #34	; 0x22
 8005250:	d12a      	bne.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800526c:	e01c      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d103      	bne.n	8005282 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f88e 	bl	800539c <I2C_MemoryTransmit_TXE_BTF>
}
 8005280:	e012      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052a6:	e7ff      	b.n	80052a8 <I2C_MasterTransmit_TXE+0x130>
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b21      	cmp	r3, #33	; 0x21
 80052c8:	d164      	bne.n	8005394 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80052f8:	e04c      	b.n	8005394 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d01d      	beq.n	800533c <I2C_MasterTransmit_BTF+0x8c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b20      	cmp	r3, #32
 8005304:	d01a      	beq.n	800533c <I2C_MasterTransmit_BTF+0x8c>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800530c:	d016      	beq.n	800533c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800531c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2211      	movs	r2, #17
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff feb7 	bl	80050a8 <HAL_I2C_MasterTxCpltCallback>
}
 800533a:	e02b      	b.n	8005394 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800534a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d107      	bne.n	8005386 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fed2 	bl	8005128 <HAL_I2C_MemTxCpltCallback>
}
 8005384:	e006      	b.n	8005394 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fe8a 	bl	80050a8 <HAL_I2C_MasterTxCpltCallback>
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11d      	bne.n	80053f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10b      	bne.n	80053d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80053d2:	e073      	b.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	b29b      	uxth	r3, r3
 80053da:	121b      	asrs	r3, r3, #8
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053ee:	e065      	b.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10b      	bne.n	8005410 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800540e:	e055      	b.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	2b02      	cmp	r3, #2
 8005416:	d151      	bne.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b22      	cmp	r3, #34	; 0x22
 800541c:	d10d      	bne.n	800543a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005438:	e040      	b.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b21      	cmp	r3, #33	; 0x21
 8005448:	d112      	bne.n	8005470 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800546e:	e025      	b.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d120      	bne.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b21      	cmp	r3, #33	; 0x21
 800547e:	d11d      	bne.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800548e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fe36 	bl	8005128 <HAL_I2C_MemTxCpltCallback>
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b22      	cmp	r3, #34	; 0x22
 80054d6:	f040 80ac 	bne.w	8005632 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d921      	bls.n	800552c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	f040 808c 	bne.w	8005632 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800552a:	e082      	b.n	8005632 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	2b02      	cmp	r3, #2
 8005532:	d075      	beq.n	8005620 <I2C_MasterReceive_RXNE+0x15c>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d002      	beq.n	8005540 <I2C_MasterReceive_RXNE+0x7c>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d16f      	bne.n	8005620 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 fafb 	bl	8006b3c <I2C_WaitOnSTOPRequestThroughIT>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d142      	bne.n	80055d2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d10a      	bne.n	80055bc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fdc1 	bl	800513c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055ba:	e03a      	b.n	8005632 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2212      	movs	r2, #18
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fd76 	bl	80050bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055d0:	e02f      	b.n	8005632 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fd99 	bl	8005150 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800561e:	e008      	b.n	8005632 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	605a      	str	r2, [r3, #4]
}
 8005630:	e7ff      	b.n	8005632 <I2C_MasterReceive_RXNE+0x16e>
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b04      	cmp	r3, #4
 8005650:	d11b      	bne.n	800568a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005660:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005688:	e0bd      	b.n	8005806 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d129      	bne.n	80056e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d00a      	beq.n	80056c0 <I2C_MasterReceive_BTF+0x86>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d007      	beq.n	80056c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056e6:	e08e      	b.n	8005806 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d176      	bne.n	80057e0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <I2C_MasterReceive_BTF+0xc4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d108      	bne.n	8005710 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e019      	b.n	8005744 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b04      	cmp	r3, #4
 8005714:	d002      	beq.n	800571c <I2C_MasterReceive_BTF+0xe2>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d108      	bne.n	800572e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e00a      	b.n	8005744 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b10      	cmp	r3, #16
 8005732:	d007      	beq.n	8005744 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005742:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800579e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d10a      	bne.n	80057ca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fcba 	bl	800513c <HAL_I2C_MemRxCpltCallback>
}
 80057c8:	e01d      	b.n	8005806 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2212      	movs	r2, #18
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fc6f 	bl	80050bc <HAL_I2C_MasterRxCpltCallback>
}
 80057de:	e012      	b.n	8005806 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d117      	bne.n	8005852 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800583a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800583c:	e067      	b.n	800590e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]
}
 8005850:	e05d      	b.n	800590e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585a:	d133      	bne.n	80058c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b21      	cmp	r3, #33	; 0x21
 8005866:	d109      	bne.n	800587c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005878:	611a      	str	r2, [r3, #16]
 800587a:	e008      	b.n	800588e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	b2da      	uxtb	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <I2C_Master_SB+0x92>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d032      	beq.n	800590e <I2C_Master_SB+0x100>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02d      	beq.n	800590e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c0:	605a      	str	r2, [r3, #4]
}
 80058c2:	e024      	b.n	800590e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	11db      	asrs	r3, r3, #7
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 0306 	and.w	r3, r3, #6
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f063 030f 	orn	r3, r3, #15
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	611a      	str	r2, [r3, #16]
}
 80058e8:	e011      	b.n	800590e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10d      	bne.n	800590e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	11db      	asrs	r3, r3, #7
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0306 	and.w	r3, r3, #6
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f063 030e 	orn	r3, r3, #14
 8005906:	b2da      	uxtb	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	611a      	str	r2, [r3, #16]
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	b2da      	uxtb	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <I2C_Master_ADD10+0x26>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d108      	bne.n	8005952 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00c      	beq.n	8005962 <I2C_Master_ADD10+0x48>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005960:	605a      	str	r2, [r3, #4]
  }
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800596e:	b480      	push	{r7}
 8005970:	b091      	sub	sp, #68	; 0x44
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b22      	cmp	r3, #34	; 0x22
 8005996:	f040 8169 	bne.w	8005c6c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <I2C_Master_ADDR+0x54>
 80059a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d10b      	bne.n	80059c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	633b      	str	r3, [r7, #48]	; 0x30
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	e160      	b.n	8005c84 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11d      	bne.n	8005a06 <I2C_Master_ADDR+0x98>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059d2:	d118      	bne.n	8005a06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d4:	2300      	movs	r3, #0
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	651a      	str	r2, [r3, #80]	; 0x50
 8005a04:	e13e      	b.n	8005c84 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d113      	bne.n	8005a38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a10:	2300      	movs	r3, #0
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e115      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f040 808a 	bne.w	8005b58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a4a:	d137      	bne.n	8005abc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6a:	d113      	bne.n	8005a94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	e0e7      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a94:	2300      	movs	r3, #0
 8005a96:	623b      	str	r3, [r7, #32]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e0d3      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d02e      	beq.n	8005b20 <I2C_Master_ADDR+0x1b2>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d02b      	beq.n	8005b20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	2b12      	cmp	r3, #18
 8005acc:	d102      	bne.n	8005ad4 <I2C_Master_ADDR+0x166>
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d125      	bne.n	8005b20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d00e      	beq.n	8005af8 <I2C_Master_ADDR+0x18a>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d00b      	beq.n	8005af8 <I2C_Master_ADDR+0x18a>
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d008      	beq.n	8005af8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	e0a1      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b30:	2300      	movs	r3, #0
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e085      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d14d      	bne.n	8005bfe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d016      	beq.n	8005b96 <I2C_Master_ADDR+0x228>
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d013      	beq.n	8005b96 <I2C_Master_ADDR+0x228>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d010      	beq.n	8005b96 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e007      	b.n	8005ba6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d117      	bne.n	8005be6 <I2C_Master_ADDR+0x278>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bbc:	d00b      	beq.n	8005bd6 <I2C_Master_ADDR+0x268>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d008      	beq.n	8005bd6 <I2C_Master_ADDR+0x268>
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d005      	beq.n	8005bd6 <I2C_Master_ADDR+0x268>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d002      	beq.n	8005bd6 <I2C_Master_ADDR+0x268>
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d107      	bne.n	8005be6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	e032      	b.n	8005c64 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c0c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d117      	bne.n	8005c4e <I2C_Master_ADDR+0x2e0>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c24:	d00b      	beq.n	8005c3e <I2C_Master_ADDR+0x2d0>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d008      	beq.n	8005c3e <I2C_Master_ADDR+0x2d0>
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d005      	beq.n	8005c3e <I2C_Master_ADDR+0x2d0>
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d002      	beq.n	8005c3e <I2C_Master_ADDR+0x2d0>
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d107      	bne.n	8005c4e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c6a:	e00b      	b.n	8005c84 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	e7ff      	b.n	8005c84 <I2C_Master_ADDR+0x316>
 8005c84:	bf00      	nop
 8005c86:	3744      	adds	r7, #68	; 0x44
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02b      	beq.n	8005d02 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	781a      	ldrb	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d114      	bne.n	8005d02 <I2C_SlaveTransmit_TXE+0x72>
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b29      	cmp	r3, #41	; 0x29
 8005cdc:	d111      	bne.n	8005d02 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2221      	movs	r2, #33	; 0x21
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2228      	movs	r2, #40	; 0x28
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff f9e7 	bl	80050d0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d011      	beq.n	8005d40 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02c      	beq.n	8005dc0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d114      	bne.n	8005dc0 <I2C_SlaveReceive_RXNE+0x74>
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9a:	d111      	bne.n	8005dc0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005daa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2222      	movs	r2, #34	; 0x22
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2228      	movs	r2, #40	; 0x28
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff f992 	bl	80050e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d012      	beq.n	8005e00 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e26:	2b28      	cmp	r3, #40	; 0x28
 8005e28:	d125      	bne.n	8005e76 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	81bb      	strh	r3, [r7, #12]
 8005e58:	e002      	b.n	8005e60 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e68:	89ba      	ldrh	r2, [r7, #12]
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff f942 	bl	80050f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e74:	e00e      	b.n	8005e94 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef8:	d172      	bne.n	8005fe0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b22      	cmp	r3, #34	; 0x22
 8005efe:	d002      	beq.n	8005f06 <I2C_Slave_STOPF+0x6a>
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d135      	bne.n	8005f72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f043 0204 	orr.w	r2, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fc fbdc 	bl	80026fc <HAL_DMA_GetState>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d049      	beq.n	8005fde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	4a69      	ldr	r2, [pc, #420]	; (80060f4 <I2C_Slave_STOPF+0x258>)
 8005f50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fc fa24 	bl	80023a4 <HAL_DMA_Abort_IT>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03d      	beq.n	8005fde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f70:	e035      	b.n	8005fde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc fba6 	bl	80026fc <HAL_DMA_GetState>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d014      	beq.n	8005fe0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	4a4e      	ldr	r2, [pc, #312]	; (80060f4 <I2C_Slave_STOPF+0x258>)
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fc f9ee 	bl	80023a4 <HAL_DMA_Abort_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
 8005fdc:	e000      	b.n	8005fe0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d03e      	beq.n	8006068 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d112      	bne.n	800601e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d112      	bne.n	8006052 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	f043 0204 	orr.w	r2, r3, #4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8b3 	bl	80061dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006076:	e039      	b.n	80060ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b2a      	cmp	r3, #42	; 0x2a
 800607c:	d109      	bne.n	8006092 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2228      	movs	r2, #40	; 0x28
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f829 	bl	80050e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b28      	cmp	r3, #40	; 0x28
 800609c:	d111      	bne.n	80060c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <I2C_Slave_STOPF+0x25c>)
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f82a 	bl	8005114 <HAL_I2C_ListenCpltCallback>
}
 80060c0:	e014      	b.n	80060ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	2b22      	cmp	r3, #34	; 0x22
 80060c8:	d002      	beq.n	80060d0 <I2C_Slave_STOPF+0x234>
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b22      	cmp	r3, #34	; 0x22
 80060ce:	d10d      	bne.n	80060ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fe fffc 	bl	80050e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	0800673d 	.word	0x0800673d
 80060f8:	ffff0000 	.word	0xffff0000

080060fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d002      	beq.n	800611e <I2C_Slave_AF+0x22>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b20      	cmp	r3, #32
 800611c:	d129      	bne.n	8006172 <I2C_Slave_AF+0x76>
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b28      	cmp	r3, #40	; 0x28
 8006122:	d126      	bne.n	8006172 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a2c      	ldr	r2, [pc, #176]	; (80061d8 <I2C_Slave_AF+0xdc>)
 8006128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006138:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006142:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006152:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fe ffd2 	bl	8005114 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006170:	e02e      	b.n	80061d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b21      	cmp	r3, #33	; 0x21
 8006176:	d126      	bne.n	80061c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <I2C_Slave_AF+0xdc>)
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2221      	movs	r2, #33	; 0x21
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe ff86 	bl	80050d0 <HAL_I2C_SlaveTxCpltCallback>
}
 80061c4:	e004      	b.n	80061d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ce:	615a      	str	r2, [r3, #20]
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	ffff0000 	.word	0xffff0000

080061dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d002      	beq.n	8006200 <I2C_ITError+0x24>
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d10a      	bne.n	8006216 <I2C_ITError+0x3a>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b22      	cmp	r3, #34	; 0x22
 8006204:	d107      	bne.n	8006216 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006214:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800621c:	2b28      	cmp	r3, #40	; 0x28
 800621e:	d107      	bne.n	8006230 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2228      	movs	r2, #40	; 0x28
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800622e:	e015      	b.n	800625c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800623a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623e:	d00a      	beq.n	8006256 <I2C_ITError+0x7a>
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b60      	cmp	r3, #96	; 0x60
 8006244:	d007      	beq.n	8006256 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	d162      	bne.n	8006332 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800627a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	d020      	beq.n	80062cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	4a6a      	ldr	r2, [pc, #424]	; (8006438 <I2C_ITError+0x25c>)
 8006290:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc f884 	bl	80023a4 <HAL_DMA_Abort_IT>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8089 	beq.w	80063b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062c6:	4610      	mov	r0, r2
 80062c8:	4798      	blx	r3
 80062ca:	e074      	b.n	80063b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	4a59      	ldr	r2, [pc, #356]	; (8006438 <I2C_ITError+0x25c>)
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fc f863 	bl	80023a4 <HAL_DMA_Abort_IT>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d068      	beq.n	80063b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d10b      	bne.n	800630a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
 8006330:	e041      	b.n	80063b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b60      	cmp	r3, #96	; 0x60
 800633c:	d125      	bne.n	800638a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d10b      	bne.n	8006372 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fe feee 	bl	8005164 <HAL_I2C_AbortCpltCallback>
 8006388:	e015      	b.n	80063b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d10b      	bne.n	80063b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fe fecd 	bl	8005150 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b04      	cmp	r3, #4
 8006406:	d113      	bne.n	8006430 <I2C_ITError+0x254>
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b28      	cmp	r3, #40	; 0x28
 800640c:	d110      	bne.n	8006430 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a0a      	ldr	r2, [pc, #40]	; (800643c <I2C_ITError+0x260>)
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fe fe72 	bl	8005114 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	0800673d 	.word	0x0800673d
 800643c:	ffff0000 	.word	0xffff0000

08006440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	817b      	strh	r3, [r7, #10]
 8006452:	460b      	mov	r3, r1
 8006454:	813b      	strh	r3, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	2200      	movs	r2, #0
 8006472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa08 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006490:	d103      	bne.n	800649a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e05f      	b.n	800655e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800649e:	897b      	ldrh	r3, [r7, #10]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	492d      	ldr	r1, [pc, #180]	; (8006568 <I2C_RequestMemoryWrite+0x128>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fa40 	bl	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e04c      	b.n	800655e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064dc:	6a39      	ldr	r1, [r7, #32]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 faaa 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d107      	bne.n	8006502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e02b      	b.n	800655e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d105      	bne.n	8006518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800650c:	893b      	ldrh	r3, [r7, #8]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	611a      	str	r2, [r3, #16]
 8006516:	e021      	b.n	800655c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006518:	893b      	ldrh	r3, [r7, #8]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b29b      	uxth	r3, r3
 800651e:	b2da      	uxtb	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	6a39      	ldr	r1, [r7, #32]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fa84 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	2b04      	cmp	r3, #4
 800653c:	d107      	bne.n	800654e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e005      	b.n	800655e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006552:	893b      	ldrh	r3, [r7, #8]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	00010002 	.word	0x00010002

0800656c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	4603      	mov	r3, r0
 800657c:	817b      	strh	r3, [r7, #10]
 800657e:	460b      	mov	r3, r1
 8006580:	813b      	strh	r3, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006594:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f96a 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065cc:	d103      	bne.n	80065d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0aa      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	6a3a      	ldr	r2, [r7, #32]
 80065ee:	4952      	ldr	r1, [pc, #328]	; (8006738 <I2C_RequestMemoryRead+0x1cc>)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f9a2 	bl	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e097      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	6a39      	ldr	r1, [r7, #32]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fa0c 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b04      	cmp	r3, #4
 800662c:	d107      	bne.n	800663e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e076      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	611a      	str	r2, [r3, #16]
 8006652:	e021      	b.n	8006698 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b29b      	uxth	r3, r3
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	6a39      	ldr	r1, [r7, #32]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f9e6 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2b04      	cmp	r3, #4
 8006678:	d107      	bne.n	800668a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e050      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800668e:	893b      	ldrh	r3, [r7, #8]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	6a39      	ldr	r1, [r7, #32]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f9cb 	bl	8006a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00d      	beq.n	80066c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d107      	bne.n	80066c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e035      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2200      	movs	r2, #0
 80066dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f8d3 	bl	800688c <I2C_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d103      	bne.n	8006704 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e013      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006708:	897b      	ldrh	r3, [r7, #10]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	b2da      	uxtb	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	4906      	ldr	r1, [pc, #24]	; (8006738 <I2C_RequestMemoryRead+0x1cc>)
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f90b 	bl	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	00010002 	.word	0x00010002

0800673c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006756:	4b4b      	ldr	r3, [pc, #300]	; (8006884 <I2C_DMAAbort+0x148>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	4a4a      	ldr	r2, [pc, #296]	; (8006888 <I2C_DMAAbort+0x14c>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0a1a      	lsrs	r2, r3, #8
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	00da      	lsls	r2, r3, #3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006782:	e00a      	b.n	800679a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b01      	subs	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006798:	d0ea      	beq.n	8006770 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	2200      	movs	r2, #0
 80067a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	2200      	movs	r2, #0
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	2200      	movs	r2, #0
 80067de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	2200      	movs	r2, #0
 80067ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b60      	cmp	r3, #96	; 0x60
 800680a:	d10e      	bne.n	800682a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2200      	movs	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f7fe fc9e 	bl	8005164 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006828:	e027      	b.n	800687a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800682a:	7cfb      	ldrb	r3, [r7, #19]
 800682c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006830:	2b28      	cmp	r3, #40	; 0x28
 8006832:	d117      	bne.n	8006864 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006852:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2228      	movs	r2, #40	; 0x28
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006862:	e007      	b.n	8006874 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f7fe fc6b 	bl	8005150 <HAL_I2C_ErrorCallback>
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000000 	.word	0x20000000
 8006888:	14f8b589 	.word	0x14f8b589

0800688c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689c:	e025      	b.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d021      	beq.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a6:	f7fb fb8d 	bl	8001fc4 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d116      	bne.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f043 0220 	orr.w	r2, r3, #32
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e023      	b.n	8006932 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	0c1b      	lsrs	r3, r3, #16
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d10d      	bne.n	8006910 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	43da      	mvns	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4013      	ands	r3, r2
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	e00c      	b.n	800692a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	43da      	mvns	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d0b6      	beq.n	800689e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006948:	e051      	b.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006958:	d123      	bne.n	80069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006968:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006972:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e046      	b.n	8006a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d021      	beq.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069aa:	f7fb fb0b 	bl	8001fc4 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d302      	bcc.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d116      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e020      	b.n	8006a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	0c1b      	lsrs	r3, r3, #16
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10c      	bne.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	43da      	mvns	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bf14      	ite	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	2300      	moveq	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	e00b      	b.n	8006a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	43da      	mvns	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d18d      	bne.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a44:	e02d      	b.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f900 	bl	8006c4c <I2C_IsAcknowledgeFailed>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e02d      	b.n	8006ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d021      	beq.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5e:	f7fb fab1 	bl	8001fc4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d116      	bne.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e007      	b.n	8006ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d1ca      	bne.n	8006a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ac6:	e02d      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f8bf 	bl	8006c4c <I2C_IsAcknowledgeFailed>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e02d      	b.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d021      	beq.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae0:	f7fb fa70 	bl	8001fc4 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d302      	bcc.n	8006af6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d116      	bne.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e007      	b.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d1ca      	bne.n	8006ac8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	0a1a      	lsrs	r2, r3, #8
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e008      	b.n	8006b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b88:	d0e9      	beq.n	8006b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20000000 	.word	0x20000000
 8006b9c:	14f8b589 	.word	0x14f8b589

08006ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bac:	e042      	b.n	8006c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d119      	bne.n	8006bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0210 	mvn.w	r2, #16
 8006bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e029      	b.n	8006c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf0:	f7fb f9e8 	bl	8001fc4 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d302      	bcc.n	8006c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d116      	bne.n	8006c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e007      	b.n	8006c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d1b5      	bne.n	8006bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c62:	d11b      	bne.n	8006c9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	f043 0204 	orr.w	r2, r3, #4
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006cba:	d103      	bne.n	8006cc4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cc2:	e007      	b.n	8006cd4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ccc:	d102      	bne.n	8006cd4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e267      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d075      	beq.n	8006dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cfe:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d00c      	beq.n	8006d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d0a:	4b85      	ldr	r3, [pc, #532]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d112      	bne.n	8006d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d16:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d22:	d10b      	bne.n	8006d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d24:	4b7e      	ldr	r3, [pc, #504]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d05b      	beq.n	8006de8 <HAL_RCC_OscConfig+0x108>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d157      	bne.n	8006de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e242      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x74>
 8006d46:	4b76      	ldr	r3, [pc, #472]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a75      	ldr	r2, [pc, #468]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e01d      	b.n	8006d90 <HAL_RCC_OscConfig+0xb0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d5c:	d10c      	bne.n	8006d78 <HAL_RCC_OscConfig+0x98>
 8006d5e:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a6f      	ldr	r2, [pc, #444]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a6c      	ldr	r2, [pc, #432]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e00b      	b.n	8006d90 <HAL_RCC_OscConfig+0xb0>
 8006d78:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a68      	ldr	r2, [pc, #416]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a65      	ldr	r2, [pc, #404]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d013      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fb f914 	bl	8001fc4 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006da0:	f7fb f910 	bl	8001fc4 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	; 0x64
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e207      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	4b5b      	ldr	r3, [pc, #364]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0xc0>
 8006dbe:	e014      	b.n	8006dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fb f900 	bl	8001fc4 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7fb f8fc 	bl	8001fc4 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	; 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1f3      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dda:	4b51      	ldr	r3, [pc, #324]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0xe8>
 8006de6:	e000      	b.n	8006dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d063      	beq.n	8006ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006df6:	4b4a      	ldr	r3, [pc, #296]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e02:	4b47      	ldr	r3, [pc, #284]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d11c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0e:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1a:	4b41      	ldr	r3, [pc, #260]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x152>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e1c7      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4937      	ldr	r1, [pc, #220]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e46:	e03a      	b.n	8006ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d020      	beq.n	8006e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e50:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <HAL_RCC_OscConfig+0x244>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7fb f8b5 	bl	8001fc4 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5e:	f7fb f8b1 	bl	8001fc4 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e1a8      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7c:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	4925      	ldr	r1, [pc, #148]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]
 8006e90:	e015      	b.n	8006ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e92:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <HAL_RCC_OscConfig+0x244>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fb f894 	bl	8001fc4 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7fb f890 	bl	8001fc4 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e187      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <HAL_RCC_OscConfig+0x248>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed8:	f7fb f874 	bl	8001fc4 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee0:	f7fb f870 	bl	8001fc4 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e167      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x200>
 8006efe:	e01b      	b.n	8006f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <HAL_RCC_OscConfig+0x248>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f06:	f7fb f85d 	bl	8001fc4 <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f0c:	e00e      	b.n	8006f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fb f859 	bl	8001fc4 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d907      	bls.n	8006f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e150      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
 8006f20:	40023800 	.word	0x40023800
 8006f24:	42470000 	.word	0x42470000
 8006f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	4b88      	ldr	r3, [pc, #544]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ea      	bne.n	8006f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8097 	beq.w	8007074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4a:	4b81      	ldr	r3, [pc, #516]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	4b7d      	ldr	r3, [pc, #500]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f64:	6413      	str	r3, [r2, #64]	; 0x40
 8006f66:	4b7a      	ldr	r3, [pc, #488]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f76:	4b77      	ldr	r3, [pc, #476]	; (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d118      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f82:	4b74      	ldr	r3, [pc, #464]	; (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a73      	ldr	r2, [pc, #460]	; (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8e:	f7fb f819 	bl	8001fc4 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fb f815 	bl	8001fc4 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e10c      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa8:	4b6a      	ldr	r3, [pc, #424]	; (8007154 <HAL_RCC_OscConfig+0x474>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x2ea>
 8006fbc:	4b64      	ldr	r3, [pc, #400]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	4a63      	ldr	r2, [pc, #396]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc8:	e01c      	b.n	8007004 <HAL_RCC_OscConfig+0x324>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x30c>
 8006fd2:	4b5f      	ldr	r3, [pc, #380]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	4a5e      	ldr	r2, [pc, #376]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fde:	4b5c      	ldr	r3, [pc, #368]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a5b      	ldr	r2, [pc, #364]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fea:	e00b      	b.n	8007004 <HAL_RCC_OscConfig+0x324>
 8006fec:	4b58      	ldr	r3, [pc, #352]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	4a57      	ldr	r2, [pc, #348]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff8:	4b55      	ldr	r3, [pc, #340]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	4a54      	ldr	r2, [pc, #336]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ffe:	f023 0304 	bic.w	r3, r3, #4
 8007002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700c:	f7fa ffda 	bl	8001fc4 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007012:	e00a      	b.n	800702a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fa ffd6 	bl	8001fc4 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0cb      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702a:	4b49      	ldr	r3, [pc, #292]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0ee      	beq.n	8007014 <HAL_RCC_OscConfig+0x334>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007038:	f7fa ffc4 	bl	8001fc4 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800703e:	e00a      	b.n	8007056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007040:	f7fa ffc0 	bl	8001fc4 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e0b5      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007056:	4b3e      	ldr	r3, [pc, #248]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ee      	bne.n	8007040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007068:	4b39      	ldr	r3, [pc, #228]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	4a38      	ldr	r2, [pc, #224]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80a1 	beq.w	80071c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800707e:	4b34      	ldr	r3, [pc, #208]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b08      	cmp	r3, #8
 8007088:	d05c      	beq.n	8007144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d141      	bne.n	8007116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007092:	4b31      	ldr	r3, [pc, #196]	; (8007158 <HAL_RCC_OscConfig+0x478>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007098:	f7fa ff94 	bl	8001fc4 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a0:	f7fa ff90 	bl	8001fc4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e087      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f0      	bne.n	80070a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	019b      	lsls	r3, r3, #6
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	3b01      	subs	r3, #1
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	491b      	ldr	r1, [pc, #108]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070e8:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <HAL_RCC_OscConfig+0x478>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fa ff69 	bl	8001fc4 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f6:	f7fa ff65 	bl	8001fc4 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e05c      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x416>
 8007114:	e054      	b.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <HAL_RCC_OscConfig+0x478>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fa ff52 	bl	8001fc4 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007124:	f7fa ff4e 	bl	8001fc4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e045      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <HAL_RCC_OscConfig+0x470>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x444>
 8007142:	e03d      	b.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d107      	bne.n	800715c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e038      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
 8007150:	40023800 	.word	0x40023800
 8007154:	40007000 	.word	0x40007000
 8007158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <HAL_RCC_OscConfig+0x4ec>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d028      	beq.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d121      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d11a      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800718c:	4013      	ands	r3, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007194:	4293      	cmp	r3, r2
 8007196:	d111      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	3b01      	subs	r3, #1
 80071a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d107      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40023800 	.word	0x40023800

080071d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0cc      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071e4:	4b68      	ldr	r3, [pc, #416]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d90c      	bls.n	800720c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f2:	4b65      	ldr	r3, [pc, #404]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	4b63      	ldr	r3, [pc, #396]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0b8      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007224:	4b59      	ldr	r3, [pc, #356]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4a58      	ldr	r2, [pc, #352]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800722a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800722e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800723c:	4b53      	ldr	r3, [pc, #332]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a52      	ldr	r2, [pc, #328]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007248:	4b50      	ldr	r3, [pc, #320]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	494d      	ldr	r1, [pc, #308]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	4313      	orrs	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d044      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726e:	4b47      	ldr	r3, [pc, #284]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d119      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e07f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d003      	beq.n	800728e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800728a:	2b03      	cmp	r3, #3
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728e:	4b3f      	ldr	r3, [pc, #252]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e06f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729e:	4b3b      	ldr	r3, [pc, #236]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e067      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ae:	4b37      	ldr	r3, [pc, #220]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 0203 	bic.w	r2, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4934      	ldr	r1, [pc, #208]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072c0:	f7fa fe80 	bl	8001fc4 <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	e00a      	b.n	80072de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c8:	f7fa fe7c 	bl	8001fc4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e04f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	4b2b      	ldr	r3, [pc, #172]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 020c 	and.w	r2, r3, #12
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1eb      	bne.n	80072c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20c      	bcs.n	8007318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fe:	4b22      	ldr	r3, [pc, #136]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007306:	4b20      	ldr	r3, [pc, #128]	; (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d001      	beq.n	8007318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e032      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007324:	4b19      	ldr	r3, [pc, #100]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	4916      	ldr	r1, [pc, #88]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007342:	4b12      	ldr	r3, [pc, #72]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	490e      	ldr	r1, [pc, #56]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007356:	f000 f821 	bl	800739c <HAL_RCC_GetSysClockFreq>
 800735a:	4602      	mov	r2, r0
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	490a      	ldr	r1, [pc, #40]	; (8007390 <HAL_RCC_ClockConfig+0x1c0>)
 8007368:	5ccb      	ldrb	r3, [r1, r3]
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	4a09      	ldr	r2, [pc, #36]	; (8007394 <HAL_RCC_ClockConfig+0x1c4>)
 8007370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_RCC_ClockConfig+0x1c8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f7fa fde0 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40023c00 	.word	0x40023c00
 800738c:	40023800 	.word	0x40023800
 8007390:	0800df6c 	.word	0x0800df6c
 8007394:	20000000 	.word	0x20000000
 8007398:	20000004 	.word	0x20000004

0800739c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800739c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a0:	b094      	sub	sp, #80	; 0x50
 80073a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	647b      	str	r3, [r7, #68]	; 0x44
 80073a8:	2300      	movs	r3, #0
 80073aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ac:	2300      	movs	r3, #0
 80073ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073b4:	4b79      	ldr	r3, [pc, #484]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d00d      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x40>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	f200 80e1 	bhi.w	8007588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0x34>
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d003      	beq.n	80073d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073ce:	e0db      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073d0:	4b73      	ldr	r3, [pc, #460]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80073d4:	e0db      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073d6:	4b73      	ldr	r3, [pc, #460]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073da:	e0d8      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073dc:	4b6f      	ldr	r3, [pc, #444]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073e6:	4b6d      	ldr	r3, [pc, #436]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d063      	beq.n	80074ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073f2:	4b6a      	ldr	r3, [pc, #424]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	2200      	movs	r2, #0
 80073fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80073fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007404:	633b      	str	r3, [r7, #48]	; 0x30
 8007406:	2300      	movs	r3, #0
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
 800740a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800740e:	4622      	mov	r2, r4
 8007410:	462b      	mov	r3, r5
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f04f 0100 	mov.w	r1, #0
 800741a:	0159      	lsls	r1, r3, #5
 800741c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007420:	0150      	lsls	r0, r2, #5
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4621      	mov	r1, r4
 8007428:	1a51      	subs	r1, r2, r1
 800742a:	6139      	str	r1, [r7, #16]
 800742c:	4629      	mov	r1, r5
 800742e:	eb63 0301 	sbc.w	r3, r3, r1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007440:	4659      	mov	r1, fp
 8007442:	018b      	lsls	r3, r1, #6
 8007444:	4651      	mov	r1, sl
 8007446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800744a:	4651      	mov	r1, sl
 800744c:	018a      	lsls	r2, r1, #6
 800744e:	4651      	mov	r1, sl
 8007450:	ebb2 0801 	subs.w	r8, r2, r1
 8007454:	4659      	mov	r1, fp
 8007456:	eb63 0901 	sbc.w	r9, r3, r1
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800746a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800746e:	4690      	mov	r8, r2
 8007470:	4699      	mov	r9, r3
 8007472:	4623      	mov	r3, r4
 8007474:	eb18 0303 	adds.w	r3, r8, r3
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	462b      	mov	r3, r5
 800747c:	eb49 0303 	adc.w	r3, r9, r3
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800748e:	4629      	mov	r1, r5
 8007490:	024b      	lsls	r3, r1, #9
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007498:	4621      	mov	r1, r4
 800749a:	024a      	lsls	r2, r1, #9
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a2:	2200      	movs	r2, #0
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ac:	f7f9 fb7c 	bl	8000ba8 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4613      	mov	r3, r2
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b8:	e058      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ba:	4b38      	ldr	r3, [pc, #224]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	099b      	lsrs	r3, r3, #6
 80074c0:	2200      	movs	r2, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	4611      	mov	r1, r2
 80074c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074ca:	623b      	str	r3, [r7, #32]
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	f04f 0000 	mov.w	r0, #0
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	0159      	lsls	r1, r3, #5
 80074e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074e6:	0150      	lsls	r0, r2, #5
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4641      	mov	r1, r8
 80074ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80074f2:	4649      	mov	r1, r9
 80074f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800750c:	ebb2 040a 	subs.w	r4, r2, sl
 8007510:	eb63 050b 	sbc.w	r5, r3, fp
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	00eb      	lsls	r3, r5, #3
 800751e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007522:	00e2      	lsls	r2, r4, #3
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	4643      	mov	r3, r8
 800752a:	18e3      	adds	r3, r4, r3
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	464b      	mov	r3, r9
 8007530:	eb45 0303 	adc.w	r3, r5, r3
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007542:	4629      	mov	r1, r5
 8007544:	028b      	lsls	r3, r1, #10
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800754c:	4621      	mov	r1, r4
 800754e:	028a      	lsls	r2, r1, #10
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007556:	2200      	movs	r2, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	61fa      	str	r2, [r7, #28]
 800755c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007560:	f7f9 fb22 	bl	8000ba8 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4613      	mov	r3, r2
 800756a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	3301      	adds	r3, #1
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800757c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007586:	e002      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800758a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800758c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800758e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007590:	4618      	mov	r0, r3
 8007592:	3750      	adds	r7, #80	; 0x50
 8007594:	46bd      	mov	sp, r7
 8007596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	007a1200 	.word	0x007a1200

080075a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ac:	4b03      	ldr	r3, [pc, #12]	; (80075bc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20000000 	.word	0x20000000

080075c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075c4:	f7ff fff0 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	0a9b      	lsrs	r3, r3, #10
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4903      	ldr	r1, [pc, #12]	; (80075e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	0800df7c 	.word	0x0800df7c

080075e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075ec:	f7ff ffdc 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	0b5b      	lsrs	r3, r3, #13
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	4903      	ldr	r1, [pc, #12]	; (800760c <HAL_RCC_GetPCLK2Freq+0x24>)
 80075fe:	5ccb      	ldrb	r3, [r1, r3]
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40023800 	.word	0x40023800
 800760c:	0800df7c 	.word	0x0800df7c

08007610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e03f      	b.n	80076a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fa fac2 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f929 	bl	80078ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b08a      	sub	sp, #40	; 0x28
 80076ae:	af02      	add	r7, sp, #8
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d17c      	bne.n	80077c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_UART_Transmit+0x2c>
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e075      	b.n	80077c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Transmit+0x3e>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e06e      	b.n	80077c6 <HAL_UART_Transmit+0x11c>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2221      	movs	r2, #33	; 0x21
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076fe:	f7fa fc61 	bl	8001fc4 <HAL_GetTick>
 8007702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d108      	bne.n	800772c <HAL_UART_Transmit+0x82>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e003      	b.n	8007734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800773c:	e02a      	b.n	8007794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f840 	bl	80077ce <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e036      	b.n	80077c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800776c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	3302      	adds	r3, #2
 8007772:	61bb      	str	r3, [r7, #24]
 8007774:	e007      	b.n	8007786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	3301      	adds	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1cf      	bne.n	800773e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2140      	movs	r1, #64	; 0x40
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f810 	bl	80077ce <UART_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e006      	b.n	80077c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e000      	b.n	80077c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
  }
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b090      	sub	sp, #64	; 0x40
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	603b      	str	r3, [r7, #0]
 80077da:	4613      	mov	r3, r2
 80077dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077de:	e050      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d04c      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <UART_WaitOnFlagUntilTimeout+0x30>
 80077ee:	f7fa fbe9 	bl	8001fc4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d241      	bcs.n	8007882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800781e:	637a      	str	r2, [r7, #52]	; 0x34
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e5      	bne.n	80077fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3314      	adds	r3, #20
 8007850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007852:	623a      	str	r2, [r7, #32]
 8007854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	69f9      	ldr	r1, [r7, #28]
 8007858:	6a3a      	ldr	r2, [r7, #32]
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e5      	bne.n	8007832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e00f      	b.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	429a      	cmp	r2, r3
 800789e:	d09f      	beq.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3740      	adds	r7, #64	; 0x40
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b0:	b0c0      	sub	sp, #256	; 0x100
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	ea40 0301 	orr.w	r3, r0, r1
 80078d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007904:	f021 010c 	bic.w	r1, r1, #12
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007912:	430b      	orrs	r3, r1
 8007914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007926:	6999      	ldr	r1, [r3, #24]
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	ea40 0301 	orr.w	r3, r0, r1
 8007932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b8f      	ldr	r3, [pc, #572]	; (8007b78 <UART_SetConfig+0x2cc>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d005      	beq.n	800794c <UART_SetConfig+0xa0>
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4b8d      	ldr	r3, [pc, #564]	; (8007b7c <UART_SetConfig+0x2d0>)
 8007948:	429a      	cmp	r2, r3
 800794a:	d104      	bne.n	8007956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800794c:	f7ff fe4c 	bl	80075e8 <HAL_RCC_GetPCLK2Freq>
 8007950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007954:	e003      	b.n	800795e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007956:	f7ff fe33 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 800795a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007968:	f040 810c 	bne.w	8007b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800796c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800797a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	1891      	adds	r1, r2, r2
 8007984:	65b9      	str	r1, [r7, #88]	; 0x58
 8007986:	415b      	adcs	r3, r3
 8007988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800798a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800798e:	4621      	mov	r1, r4
 8007990:	eb12 0801 	adds.w	r8, r2, r1
 8007994:	4629      	mov	r1, r5
 8007996:	eb43 0901 	adc.w	r9, r3, r1
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079ae:	4690      	mov	r8, r2
 80079b0:	4699      	mov	r9, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	eb18 0303 	adds.w	r3, r8, r3
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079bc:	462b      	mov	r3, r5
 80079be:	eb49 0303 	adc.w	r3, r9, r3
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079da:	460b      	mov	r3, r1
 80079dc:	18db      	adds	r3, r3, r3
 80079de:	653b      	str	r3, [r7, #80]	; 0x50
 80079e0:	4613      	mov	r3, r2
 80079e2:	eb42 0303 	adc.w	r3, r2, r3
 80079e6:	657b      	str	r3, [r7, #84]	; 0x54
 80079e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079f0:	f7f9 f8da 	bl	8000ba8 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4b61      	ldr	r3, [pc, #388]	; (8007b80 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	011c      	lsls	r4, r3, #4
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a24:	4641      	mov	r1, r8
 8007a26:	eb12 0a01 	adds.w	sl, r2, r1
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a44:	4692      	mov	sl, r2
 8007a46:	469b      	mov	fp, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a52:	464b      	mov	r3, r9
 8007a54:	eb4b 0303 	adc.w	r3, fp, r3
 8007a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a70:	460b      	mov	r3, r1
 8007a72:	18db      	adds	r3, r3, r3
 8007a74:	643b      	str	r3, [r7, #64]	; 0x40
 8007a76:	4613      	mov	r3, r2
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a86:	f7f9 f88f 	bl	8000ba8 <__aeabi_uldivmod>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4b3b      	ldr	r3, [pc, #236]	; (8007b80 <UART_SetConfig+0x2d4>)
 8007a92:	fba3 2301 	umull	r2, r3, r3, r1
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2264      	movs	r2, #100	; 0x64
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	1acb      	subs	r3, r1, r3
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007aa6:	4b36      	ldr	r3, [pc, #216]	; (8007b80 <UART_SetConfig+0x2d4>)
 8007aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ab4:	441c      	add	r4, r3
 8007ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6339      	str	r1, [r7, #48]	; 0x30
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	460a      	mov	r2, r1
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	18db      	adds	r3, r3, r3
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b32:	4613      	mov	r3, r2
 8007b34:	eb42 0303 	adc.w	r3, r2, r3
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b42:	f7f9 f831 	bl	8000ba8 <__aeabi_uldivmod>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <UART_SetConfig+0x2d4>)
 8007b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	2164      	movs	r1, #100	; 0x64
 8007b54:	fb01 f303 	mul.w	r3, r1, r3
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	3332      	adds	r3, #50	; 0x32
 8007b5e:	4a08      	ldr	r2, [pc, #32]	; (8007b80 <UART_SetConfig+0x2d4>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	f003 0207 	and.w	r2, r3, #7
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4422      	add	r2, r4
 8007b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b74:	e106      	b.n	8007d84 <UART_SetConfig+0x4d8>
 8007b76:	bf00      	nop
 8007b78:	40011000 	.word	0x40011000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b96:	4642      	mov	r2, r8
 8007b98:	464b      	mov	r3, r9
 8007b9a:	1891      	adds	r1, r2, r2
 8007b9c:	6239      	str	r1, [r7, #32]
 8007b9e:	415b      	adcs	r3, r3
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	1854      	adds	r4, r2, r1
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb43 0501 	adc.w	r5, r3, r1
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	00eb      	lsls	r3, r5, #3
 8007bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bbe:	00e2      	lsls	r2, r4, #3
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	18e3      	adds	r3, r4, r3
 8007bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bcc:	464b      	mov	r3, r9
 8007bce:	eb45 0303 	adc.w	r3, r5, r3
 8007bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	008b      	lsls	r3, r1, #2
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	008a      	lsls	r2, r1, #2
 8007c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c04:	f7f8 ffd0 	bl	8000ba8 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4b60      	ldr	r3, [pc, #384]	; (8007d90 <UART_SetConfig+0x4e4>)
 8007c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	011c      	lsls	r4, r3, #4
 8007c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	61b9      	str	r1, [r7, #24]
 8007c30:	415b      	adcs	r3, r3
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c38:	4641      	mov	r1, r8
 8007c3a:	1851      	adds	r1, r2, r1
 8007c3c:	6139      	str	r1, [r7, #16]
 8007c3e:	4649      	mov	r1, r9
 8007c40:	414b      	adcs	r3, r1
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c50:	4659      	mov	r1, fp
 8007c52:	00cb      	lsls	r3, r1, #3
 8007c54:	4651      	mov	r1, sl
 8007c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	00ca      	lsls	r2, r1, #3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	4642      	mov	r2, r8
 8007c66:	189b      	adds	r3, r3, r2
 8007c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	460a      	mov	r2, r1
 8007c70:	eb42 0303 	adc.w	r3, r2, r3
 8007c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c90:	4649      	mov	r1, r9
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	4641      	mov	r1, r8
 8007c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	008a      	lsls	r2, r1, #2
 8007c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ca2:	f7f8 ff81 	bl	8000ba8 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <UART_SetConfig+0x4e4>)
 8007cae:	fba3 2301 	umull	r2, r3, r3, r1
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	2264      	movs	r2, #100	; 0x64
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	1acb      	subs	r3, r1, r3
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	3332      	adds	r3, #50	; 0x32
 8007cc0:	4a33      	ldr	r2, [pc, #204]	; (8007d90 <UART_SetConfig+0x4e4>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ccc:	441c      	add	r4, r3
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8007cd6:	677a      	str	r2, [r7, #116]	; 0x74
 8007cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	1891      	adds	r1, r2, r2
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	415b      	adcs	r3, r3
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cec:	4641      	mov	r1, r8
 8007cee:	1851      	adds	r1, r2, r1
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	414b      	adcs	r3, r1
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d04:	4659      	mov	r1, fp
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	4651      	mov	r1, sl
 8007d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d0e:	4651      	mov	r1, sl
 8007d10:	00ca      	lsls	r2, r1, #3
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	4642      	mov	r2, r8
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d1e:	464b      	mov	r3, r9
 8007d20:	460a      	mov	r2, r1
 8007d22:	eb42 0303 	adc.w	r3, r2, r3
 8007d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	663b      	str	r3, [r7, #96]	; 0x60
 8007d32:	667a      	str	r2, [r7, #100]	; 0x64
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d40:	4649      	mov	r1, r9
 8007d42:	008b      	lsls	r3, r1, #2
 8007d44:	4641      	mov	r1, r8
 8007d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	008a      	lsls	r2, r1, #2
 8007d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d52:	f7f8 ff29 	bl	8000ba8 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <UART_SetConfig+0x4e4>)
 8007d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2164      	movs	r1, #100	; 0x64
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	; 0x32
 8007d6e:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <UART_SetConfig+0x4e4>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4422      	add	r2, r4
 8007d82:	609a      	str	r2, [r3, #8]
}
 8007d84:	bf00      	nop
 8007d86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d90:	51eb851f 	.word	0x51eb851f

08007d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d94:	b084      	sub	sp, #16
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	f107 001c 	add.w	r0, r7, #28
 8007da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d122      	bne.n	8007df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d105      	bne.n	8007de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9c0 	bl	800816c <USB_CoreReset>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e01a      	b.n	8007e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9b4 	bl	800816c <USB_CoreReset>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
 8007e1a:	e005      	b.n	8007e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10b      	bne.n	8007e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f043 0206 	orr.w	r2, r3, #6
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f043 0220 	orr.w	r2, r3, #32
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e52:	b004      	add	sp, #16
 8007e54:	4770      	bx	lr

08007e56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f023 0201 	bic.w	r2, r3, #1
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d115      	bne.n	8007ee8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7fa f887 	bl	8001fdc <HAL_Delay>
      ms++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f93a 	bl	800814e <USB_GetMode>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d01e      	beq.n	8007f1e <USB_SetCurrentMode+0x84>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b31      	cmp	r3, #49	; 0x31
 8007ee4:	d9f0      	bls.n	8007ec8 <USB_SetCurrentMode+0x2e>
 8007ee6:	e01a      	b.n	8007f1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d115      	bne.n	8007f1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007efa:	2001      	movs	r0, #1
 8007efc:	f7fa f86e 	bl	8001fdc <HAL_Delay>
      ms++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f921 	bl	800814e <USB_GetMode>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <USB_SetCurrentMode+0x84>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b31      	cmp	r3, #49	; 0x31
 8007f16:	d9f0      	bls.n	8007efa <USB_SetCurrentMode+0x60>
 8007f18:	e001      	b.n	8007f1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e005      	b.n	8007f2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b32      	cmp	r3, #50	; 0x32
 8007f22:	d101      	bne.n	8007f28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <USB_FlushTxFifo+0x64>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d901      	bls.n	8007f54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e01b      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	daf2      	bge.n	8007f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	019b      	lsls	r3, r3, #6
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a08      	ldr	r2, [pc, #32]	; (8007f98 <USB_FlushTxFifo+0x64>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e006      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d0f0      	beq.n	8007f6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	00030d40 	.word	0x00030d40

08007f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a11      	ldr	r2, [pc, #68]	; (8007ff8 <USB_FlushRxFifo+0x5c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e018      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	daf2      	bge.n	8007fa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a08      	ldr	r2, [pc, #32]	; (8007ff8 <USB_FlushRxFifo+0x5c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d901      	bls.n	8007fde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d0f0      	beq.n	8007fcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	00030d40 	.word	0x00030d40

08007ffc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	460b      	mov	r3, r1
 800800c:	71fb      	strb	r3, [r7, #7]
 800800e:	4613      	mov	r3, r2
 8008010:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800801a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d123      	bne.n	800806a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008022:	88bb      	ldrh	r3, [r7, #4]
 8008024:	3303      	adds	r3, #3
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	e018      	b.n	8008062 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	031a      	lsls	r2, r3, #12
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4413      	add	r3, r2
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	461a      	mov	r2, r3
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3301      	adds	r3, #1
 8008048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	3301      	adds	r3, #1
 800804e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	3301      	adds	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	3301      	adds	r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	3301      	adds	r3, #1
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	429a      	cmp	r2, r3
 8008068:	d3e2      	bcc.n	8008030 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3724      	adds	r7, #36	; 0x24
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008078:	b480      	push	{r7}
 800807a:	b08b      	sub	sp, #44	; 0x2c
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	089b      	lsrs	r3, r3, #2
 8008092:	b29b      	uxth	r3, r3
 8008094:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	e014      	b.n	80080ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	3301      	adds	r3, #1
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	3301      	adds	r3, #1
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	3301      	adds	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	3301      	adds	r3, #1
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	3301      	adds	r3, #1
 80080cc:	623b      	str	r3, [r7, #32]
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d3e6      	bcc.n	80080a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080d6:	8bfb      	ldrh	r3, [r7, #30]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01e      	beq.n	800811a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e6:	461a      	mov	r2, r3
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	701a      	strb	r2, [r3, #0]
      i++;
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	3301      	adds	r3, #1
 8008106:	623b      	str	r3, [r7, #32]
      pDest++;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800810e:	8bfb      	ldrh	r3, [r7, #30]
 8008110:	3b01      	subs	r3, #1
 8008112:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008114:	8bfb      	ldrh	r3, [r7, #30]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1ea      	bne.n	80080f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800811c:	4618      	mov	r0, r3
 800811e:	372c      	adds	r7, #44	; 0x2c
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008140:	68fb      	ldr	r3, [r7, #12]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f003 0301 	and.w	r3, r3, #1
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <USB_CoreReset+0x64>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e01b      	b.n	80081c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	daf2      	bge.n	8008178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f043 0201 	orr.w	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <USB_CoreReset+0x64>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e006      	b.n	80081c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d0f0      	beq.n	80081a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	00030d40 	.word	0x00030d40

080081d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081d4:	b084      	sub	sp, #16
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f4:	461a      	mov	r2, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10a      	bne.n	8008246 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800823e:	f043 0304 	orr.w	r3, r3, #4
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e014      	b.n	8008270 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008254:	f023 0304 	bic.w	r3, r3, #4
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	e009      	b.n	8008270 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800826a:	f023 0304 	bic.w	r3, r3, #4
 800826e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008270:	2110      	movs	r1, #16
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe5e 	bl	8007f34 <USB_FlushTxFifo>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fe8a 	bl	8007f9c <USB_FlushRxFifo>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e015      	b.n	80082c4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a4:	461a      	mov	r2, r3
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b8:	461a      	mov	r2, r3
 80082ba:	2300      	movs	r3, #0
 80082bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3e5      	bcc.n	8008298 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295
 80082d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <USB_HostInit+0x16c>)
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a13      	ldr	r2, [pc, #76]	; (8008344 <USB_HostInit+0x170>)
 80082f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082fc:	e009      	b.n	8008312 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <USB_HostInit+0x174>)
 8008308:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a0f      	ldr	r2, [pc, #60]	; (800834c <USB_HostInit+0x178>)
 800830e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f043 0210 	orr.w	r2, r3, #16
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <USB_HostInit+0x17c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr
 8008340:	01000200 	.word	0x01000200
 8008344:	00e00300 	.word	0x00e00300
 8008348:	00600080 	.word	0x00600080
 800834c:	004000e0 	.word	0x004000e0
 8008350:	a3200008 	.word	0xa3200008

08008354 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800838c:	4313      	orrs	r3, r2
 800838e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d107      	bne.n	80083a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839c:	461a      	mov	r2, r3
 800839e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80083a2:	6053      	str	r3, [r2, #4]
 80083a4:	e009      	b.n	80083ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d106      	bne.n	80083ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083b2:	461a      	mov	r2, r3
 80083b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80083b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083f8:	2064      	movs	r0, #100	; 0x64
 80083fa:	f7f9 fdef 	bl	8001fdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800840c:	200a      	movs	r0, #10
 800840e:	f7f9 fde5 	bl	8001fdc <HAL_Delay>

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <USB_DriveVbus+0x44>
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d106      	bne.n	8008460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800845a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846a:	d109      	bne.n	8008480 <USB_DriveVbus+0x64>
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800847a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	0c5b      	lsrs	r3, r3, #17
 80084ac:	f003 0303 	and.w	r3, r3, #3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	b29b      	uxth	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	70fb      	strb	r3, [r7, #3]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70bb      	strb	r3, [r7, #2]
 80084f6:	4613      	mov	r3, r2
 80084f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850e:	461a      	mov	r2, r3
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800851a:	2b03      	cmp	r3, #3
 800851c:	d87e      	bhi.n	800861c <USB_HC_Init+0x13c>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USB_HC_Init+0x44>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008535 	.word	0x08008535
 8008528:	080085df 	.word	0x080085df
 800852c:	08008535 	.word	0x08008535
 8008530:	080085a1 	.word	0x080085a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	461a      	mov	r2, r3
 8008542:	f240 439d 	movw	r3, #1181	; 0x49d
 8008546:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	da10      	bge.n	8008572 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008570:	e057      	b.n	8008622 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d051      	beq.n	8008622 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008598:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800859c:	60d3      	str	r3, [r2, #12]
      break;
 800859e:	e040      	b.n	8008622 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	461a      	mov	r2, r3
 80085ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80085b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da34      	bge.n	8008626 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085dc:	e023      	b.n	8008626 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ea:	461a      	mov	r2, r3
 80085ec:	f240 2325 	movw	r3, #549	; 0x225
 80085f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da17      	bge.n	800862a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	440a      	add	r2, r1
 8008610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008614:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008618:	60d3      	str	r3, [r2, #12]
      }
      break;
 800861a:	e006      	b.n	800862a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	77fb      	strb	r3, [r7, #31]
      break;
 8008620:	e004      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 800862a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	440a      	add	r2, r1
 8008642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	2101      	movs	r1, #1
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	6939      	ldr	r1, [r7, #16]
 8008662:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008666:	4313      	orrs	r3, r2
 8008668:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008676:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800867a:	2b00      	cmp	r3, #0
 800867c:	da03      	bge.n	8008686 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800867e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	e001      	b.n	800868a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff feff 	bl	800848e <USB_GetHostSpeed>
 8008690:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008696:	2b02      	cmp	r3, #2
 8008698:	d106      	bne.n	80086a8 <USB_HC_Init+0x1c8>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d003      	beq.n	80086a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e001      	b.n	80086ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	059b      	lsls	r3, r3, #22
 80086b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086b4:	78bb      	ldrb	r3, [r7, #2]
 80086b6:	02db      	lsls	r3, r3, #11
 80086b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086c2:	049b      	lsls	r3, r3, #18
 80086c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	0159      	lsls	r1, r3, #5
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	440b      	add	r3, r1
 80086de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d003      	beq.n	80086fa <USB_HC_Init+0x21a>
 80086f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10f      	bne.n	800871a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	440a      	add	r2, r1
 8008710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008718:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800871a:	7ffb      	ldrb	r3, [r7, #31]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	; 0x30
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800873c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008740:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d02d      	beq.n	80087aa <USB_HC_StartXfer+0x86>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d129      	bne.n	80087aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d117      	bne.n	800878c <USB_HC_StartXfer+0x68>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	79db      	ldrb	r3, [r3, #7]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <USB_HC_StartXfer+0x48>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	79db      	ldrb	r3, [r3, #7]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d10f      	bne.n	800878c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	4413      	add	r3, r2
 8008774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	6a3a      	ldr	r2, [r7, #32]
 8008780:	440a      	add	r2, r1
 8008782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <USB_HC_StartXfer+0x86>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d107      	bne.n	80087aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa0f 	bl	8008bc4 <USB_DoPing>
      return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e0f8      	b.n	800899c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	8912      	ldrh	r2, [r2, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	3b01      	subs	r3, #1
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	8912      	ldrh	r2, [r2, #8]
 80087c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80087c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087ca:	8b7b      	ldrh	r3, [r7, #26]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d90b      	bls.n	80087e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80087d0:	8b7b      	ldrh	r3, [r7, #26]
 80087d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	8912      	ldrh	r2, [r2, #8]
 80087da:	fb03 f202 	mul.w	r2, r3, r2
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	611a      	str	r2, [r3, #16]
 80087e2:	e001      	b.n	80087e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80087e4:	2301      	movs	r3, #1
 80087e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	78db      	ldrb	r3, [r3, #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	8912      	ldrh	r2, [r2, #8]
 80087f6:	fb03 f202 	mul.w	r2, r3, r2
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	611a      	str	r2, [r3, #16]
 80087fe:	e003      	b.n	8008808 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008812:	04d9      	lsls	r1, r3, #19
 8008814:	4b63      	ldr	r3, [pc, #396]	; (80089a4 <USB_HC_StartXfer+0x280>)
 8008816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	7a9b      	ldrb	r3, [r3, #10]
 800881e:	075b      	lsls	r3, r3, #29
 8008820:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008824:	69f9      	ldr	r1, [r7, #28]
 8008826:	0148      	lsls	r0, r1, #5
 8008828:	6a39      	ldr	r1, [r7, #32]
 800882a:	4401      	add	r1, r0
 800882c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68d9      	ldr	r1, [r3, #12]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	460a      	mov	r2, r1
 800884c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	6a3a      	ldr	r2, [r7, #32]
 800887a:	440a      	add	r2, r1
 800887c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	7e7b      	ldrb	r3, [r7, #25]
 8008896:	075b      	lsls	r3, r3, #29
 8008898:	69f9      	ldr	r1, [r7, #28]
 800889a:	0148      	lsls	r0, r1, #5
 800889c:	6a39      	ldr	r1, [r7, #32]
 800889e:	4401      	add	r1, r0
 80088a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80088a4:	4313      	orrs	r3, r2
 80088a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e003      	b.n	80088da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	461a      	mov	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e04e      	b.n	800899c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d149      	bne.n	800899a <USB_HC_StartXfer+0x276>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	79db      	ldrb	r3, [r3, #7]
 8008912:	2b03      	cmp	r3, #3
 8008914:	d830      	bhi.n	8008978 <USB_HC_StartXfer+0x254>
 8008916:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USB_HC_StartXfer+0x1f8>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008951 	.word	0x08008951
 8008924:	0800892d 	.word	0x0800892d
 8008928:	08008951 	.word	0x08008951
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	3303      	adds	r3, #3
 8008932:	089b      	lsrs	r3, r3, #2
 8008934:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008936:	8afa      	ldrh	r2, [r7, #22]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	b29b      	uxth	r3, r3
 800893e:	429a      	cmp	r2, r3
 8008940:	d91c      	bls.n	800897c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f043 0220 	orr.w	r2, r3, #32
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	619a      	str	r2, [r3, #24]
        }
        break;
 800894e:	e015      	b.n	800897c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	3303      	adds	r3, #3
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800895a:	8afa      	ldrh	r2, [r7, #22]
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	b29b      	uxth	r3, r3
 8008966:	429a      	cmp	r2, r3
 8008968:	d90a      	bls.n	8008980 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	619a      	str	r2, [r3, #24]
        }
        break;
 8008976:	e003      	b.n	8008980 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <USB_HC_StartXfer+0x25e>
        break;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <USB_HC_StartXfer+0x25e>
        break;
 8008980:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	68d9      	ldr	r1, [r3, #12]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	785a      	ldrb	r2, [r3, #1]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	b29b      	uxth	r3, r3
 8008990:	2000      	movs	r0, #0
 8008992:	9000      	str	r0, [sp, #0]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff fb31 	bl	8007ffc <USB_WritePacket>
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3728      	adds	r7, #40	; 0x28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	1ff80000 	.word	0x1ff80000

080089a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	b29b      	uxth	r3, r3
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b089      	sub	sp, #36	; 0x24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0c9b      	lsrs	r3, r3, #18
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	0fdb      	lsrs	r3, r3, #31
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d104      	bne.n	8008a24 <USB_HC_Halt+0x5a>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e0c8      	b.n	8008bb6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <USB_HC_Halt+0x66>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d163      	bne.n	8008af8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 80ab 	bne.w	8008bb4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d133      	bne.n	8008ad2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab6:	d81d      	bhi.n	8008af4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ace:	d0ec      	beq.n	8008aaa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ad0:	e070      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008af2:	e05f      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
            break;
 8008af4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008af6:	e05d      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d133      	bne.n	8008b90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b74:	d81d      	bhi.n	8008bb2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b8c:	d0ec      	beq.n	8008b68 <USB_HC_Halt+0x19e>
 8008b8e:	e011      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e000      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
          break;
 8008bb2:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3724      	adds	r7, #36	; 0x24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	04da      	lsls	r2, r3, #19
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <USB_DoPing+0x74>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	461a      	mov	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	1ff80000 	.word	0x1ff80000

08008c3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff f911 	bl	8007e78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c56:	2110      	movs	r1, #16
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff f96b 	bl	8007f34 <USB_FlushTxFifo>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f997 	bl	8007f9c <USB_FlushRxFifo>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	e01f      	b.n	8008cbe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ca4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d9dc      	bls.n	8008c7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	e034      	b.n	8008d34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfe:	461a      	mov	r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d10:	d80c      	bhi.n	8008d2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d28:	d0ec      	beq.n	8008d04 <USB_StopHost+0xc8>
 8008d2a:	e000      	b.n	8008d2e <USB_StopHost+0xf2>
        break;
 8008d2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d9c7      	bls.n	8008cca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d40:	461a      	mov	r2, r3
 8008d42:	f04f 33ff 	mov.w	r3, #4294967295
 8008d46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff f880 	bl	8007e56 <USB_EnableGlobalInt>

  return ret;
 8008d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b089      	sub	sp, #36	; 0x24
 8008d64:	af04      	add	r7, sp, #16
 8008d66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d68:	2301      	movs	r3, #1
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	2102      	movs	r1, #2
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fc66 	bl	8009640 <USBH_FindInterface>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2bff      	cmp	r3, #255	; 0xff
 8008d7c:	d002      	beq.n	8008d84 <USBH_CDC_InterfaceInit+0x24>
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d901      	bls.n	8008d88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d84:	2302      	movs	r3, #2
 8008d86:	e13d      	b.n	8009004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc3b 	bl	8009608 <USBH_SelectInterface>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e131      	b.n	8009004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008da6:	2050      	movs	r0, #80	; 0x50
 8008da8:	f002 fad2 	bl	800b350 <malloc>
 8008dac:	4603      	mov	r3, r0
 8008dae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e11f      	b.n	8009004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008dc4:	2250      	movs	r2, #80	; 0x50
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68b8      	ldr	r0, [r7, #8]
 8008dca:	f003 f9eb 	bl	800c1a4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	211a      	movs	r1, #26
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da15      	bge.n	8008e12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	211a      	movs	r1, #26
 8008dec:	fb01 f303 	mul.w	r3, r1, r3
 8008df0:	4413      	add	r3, r2
 8008df2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	211a      	movs	r1, #26
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e0c:	881a      	ldrh	r2, [r3, #0]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 ff2e 	bl	800ac7a <USBH_AllocPipe>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	7819      	ldrb	r1, [r3, #0]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	7858      	ldrb	r0, [r3, #1]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	8952      	ldrh	r2, [r2, #10]
 8008e3e:	9202      	str	r2, [sp, #8]
 8008e40:	2203      	movs	r2, #3
 8008e42:	9201      	str	r2, [sp, #4]
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4623      	mov	r3, r4
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 fee6 	bl	800ac1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2200      	movs	r2, #0
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 f9f5 	bl	800b248 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2200      	movs	r2, #0
 8008e62:	210a      	movs	r1, #10
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fbeb 	bl	8009640 <USBH_FindInterface>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2bff      	cmp	r3, #255	; 0xff
 8008e72:	d002      	beq.n	8008e7a <USBH_CDC_InterfaceInit+0x11a>
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d901      	bls.n	8008e7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e0c2      	b.n	8009004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	211a      	movs	r1, #26
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	b25b      	sxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da16      	bge.n	8008ec4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	211a      	movs	r1, #26
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	211a      	movs	r1, #26
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ebc:	881a      	ldrh	r2, [r3, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	835a      	strh	r2, [r3, #26]
 8008ec2:	e015      	b.n	8008ef0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	211a      	movs	r1, #26
 8008eca:	fb01 f303 	mul.w	r3, r1, r3
 8008ece:	4413      	add	r3, r2
 8008ed0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	211a      	movs	r1, #26
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008eea:	881a      	ldrh	r2, [r3, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	211a      	movs	r1, #26
 8008ef6:	fb01 f303 	mul.w	r3, r1, r3
 8008efa:	4413      	add	r3, r2
 8008efc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da16      	bge.n	8008f36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	211a      	movs	r1, #26
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	211a      	movs	r1, #26
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f2e:	881a      	ldrh	r2, [r3, #0]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	835a      	strh	r2, [r3, #26]
 8008f34:	e015      	b.n	8008f62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	211a      	movs	r1, #26
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	211a      	movs	r1, #26
 8008f52:	fb01 f303 	mul.w	r3, r1, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f5c:	881a      	ldrh	r2, [r3, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	7b9b      	ldrb	r3, [r3, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fe86 	bl	800ac7a <USBH_AllocPipe>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	7bdb      	ldrb	r3, [r3, #15]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe7c 	bl	800ac7a <USBH_AllocPipe>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	7b59      	ldrb	r1, [r3, #13]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	7b98      	ldrb	r0, [r3, #14]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	8b12      	ldrh	r2, [r2, #24]
 8008fa2:	9202      	str	r2, [sp, #8]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	9201      	str	r2, [sp, #4]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	4623      	mov	r3, r4
 8008fac:	4602      	mov	r2, r0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fe34 	bl	800ac1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	7b19      	ldrb	r1, [r3, #12]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	7bd8      	ldrb	r0, [r3, #15]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	8b52      	ldrh	r2, [r2, #26]
 8008fcc:	9202      	str	r2, [sp, #8]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	9201      	str	r2, [sp, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4623      	mov	r3, r4
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fe1f 	bl	800ac1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	7b5b      	ldrb	r3, [r3, #13]
 8008fea:	2200      	movs	r2, #0
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f002 f92a 	bl	800b248 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	7b1b      	ldrb	r3, [r3, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f002 f923 	bl	800b248 <USBH_LL_SetToggle>

  return USBH_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	bd90      	pop	{r4, r7, pc}

0800900c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00e      	beq.n	8009044 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fe14 	bl	800ac5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fe3f 	bl	800acbc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	7b1b      	ldrb	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00e      	beq.n	800906a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	7b1b      	ldrb	r3, [r3, #12]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fe01 	bl	800ac5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	7b1b      	ldrb	r3, [r3, #12]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fe2c 	bl	800acbc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	7b5b      	ldrb	r3, [r3, #13]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00e      	beq.n	8009090 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	7b5b      	ldrb	r3, [r3, #13]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fdee 	bl	800ac5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	7b5b      	ldrb	r3, [r3, #13]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 fe19 	bl	800acbc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 f95b 	bl	800b360 <free>
    phost->pActiveClass->pData = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b0:	2200      	movs	r2, #0
 80090b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3340      	adds	r3, #64	; 0x40
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f8b1 	bl	800923e <GetLineCoding>
 80090dc:	4603      	mov	r3, r0
 80090de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ec:	2102      	movs	r1, #2
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80090f2:	7afb      	ldrb	r3, [r7, #11]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800911c:	2b04      	cmp	r3, #4
 800911e:	d877      	bhi.n	8009210 <USBH_CDC_Process+0x114>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <USBH_CDC_Process+0x2c>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800913d 	.word	0x0800913d
 800912c:	08009143 	.word	0x08009143
 8009130:	08009173 	.word	0x08009173
 8009134:	080091e7 	.word	0x080091e7
 8009138:	080091f5 	.word	0x080091f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
      break;
 8009140:	e06d      	b.n	800921e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f897 	bl	800927c <SetLineCoding>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009160:	e058      	b.n	8009214 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d055      	beq.n	8009214 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2204      	movs	r2, #4
 800916c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009170:	e050      	b.n	8009214 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	3340      	adds	r3, #64	; 0x40
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f860 	bl	800923e <GetLineCoding>
 800917e:	4603      	mov	r3, r0
 8009180:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d126      	bne.n	80091d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919a:	791b      	ldrb	r3, [r3, #4]
 800919c:	429a      	cmp	r2, r3
 800919e:	d13b      	bne.n	8009218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d133      	bne.n	8009218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80091bc:	429a      	cmp	r2, r3
 80091be:	d12b      	bne.n	8009218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d124      	bne.n	8009218 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f958 	bl	8009484 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091d4:	e020      	b.n	8009218 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d01d      	beq.n	8009218 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2204      	movs	r2, #4
 80091e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091e4:	e018      	b.n	8009218 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f867 	bl	80092ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f8da 	bl	80093a6 <CDC_ProcessReception>
      break;
 80091f2:	e014      	b.n	800921e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80091f4:	2100      	movs	r1, #0
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 ffef 	bl	800a1da <USBH_ClrFeature>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800920e:	e005      	b.n	800921c <USBH_CDC_Process+0x120>

    default:
      break;
 8009210:	bf00      	nop
 8009212:	e004      	b.n	800921e <USBH_CDC_Process+0x122>
      break;
 8009214:	bf00      	nop
 8009216:	e002      	b.n	800921e <USBH_CDC_Process+0x122>
      break;
 8009218:	bf00      	nop
 800921a:	e000      	b.n	800921e <USBH_CDC_Process+0x122>
      break;
 800921c:	bf00      	nop

  }

  return status;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	22a1      	movs	r2, #161	; 0xa1
 800924c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2221      	movs	r2, #33	; 0x21
 8009252:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2207      	movs	r2, #7
 8009264:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2207      	movs	r2, #7
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 fa83 	bl	800a778 <USBH_CtlReq>
 8009272:	4603      	mov	r3, r0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2221      	movs	r2, #33	; 0x21
 800928a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2207      	movs	r2, #7
 80092a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2207      	movs	r2, #7
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fa64 	bl	800a778 <USBH_CtlReq>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b086      	sub	sp, #24
 80092be:	af02      	add	r7, sp, #8
 80092c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d002      	beq.n	80092e0 <CDC_ProcessTransmission+0x26>
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d023      	beq.n	8009326 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80092de:	e05e      	b.n	800939e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	8b12      	ldrh	r2, [r2, #24]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d90b      	bls.n	8009304 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	69d9      	ldr	r1, [r3, #28]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8b1a      	ldrh	r2, [r3, #24]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	7b5b      	ldrb	r3, [r3, #13]
 80092f8:	2001      	movs	r0, #1
 80092fa:	9000      	str	r0, [sp, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fc4a 	bl	800ab96 <USBH_BulkSendData>
 8009302:	e00b      	b.n	800931c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	7b5b      	ldrb	r3, [r3, #13]
 8009312:	2001      	movs	r0, #1
 8009314:	9000      	str	r0, [sp, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fc3d 	bl	800ab96 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009324:	e03b      	b.n	800939e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	7b5b      	ldrb	r3, [r3, #13]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 ff61 	bl	800b1f4 <USBH_LL_GetURBState>
 8009332:	4603      	mov	r3, r0
 8009334:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d128      	bne.n	800938e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	8b12      	ldrh	r2, [r2, #24]
 8009344:	4293      	cmp	r3, r2
 8009346:	d90e      	bls.n	8009366 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	8b12      	ldrh	r2, [r2, #24]
 8009350:	1a9a      	subs	r2, r3, r2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	8b12      	ldrh	r2, [r2, #24]
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]
 8009364:	e002      	b.n	800936c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800937c:	e00e      	b.n	800939c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f868 	bl	800945c <USBH_CDC_TransmitCallback>
      break;
 800938c:	e006      	b.n	800939c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d103      	bne.n	800939c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800939c:	bf00      	nop
  }
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d002      	beq.n	80093cc <CDC_ProcessReception+0x26>
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d00e      	beq.n	80093e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80093ca:	e043      	b.n	8009454 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	6a19      	ldr	r1, [r3, #32]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	8b5a      	ldrh	r2, [r3, #26]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	7b1b      	ldrb	r3, [r3, #12]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fc01 	bl	800abe0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2204      	movs	r2, #4
 80093e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80093e6:	e035      	b.n	8009454 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	7b1b      	ldrb	r3, [r3, #12]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 ff00 	bl	800b1f4 <USBH_LL_GetURBState>
 80093f4:	4603      	mov	r3, r0
 80093f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80093f8:	7cfb      	ldrb	r3, [r7, #19]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d129      	bne.n	8009452 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	7b1b      	ldrb	r3, [r3, #12]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fe63 	bl	800b0d0 <USBH_LL_GetLastXferSize>
 800940a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d016      	beq.n	8009444 <CDC_ProcessReception+0x9e>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	8b5b      	ldrh	r3, [r3, #26]
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4293      	cmp	r3, r2
 8009420:	d910      	bls.n	8009444 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	441a      	add	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2203      	movs	r2, #3
 800943e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009442:	e006      	b.n	8009452 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f80f 	bl	8009470 <USBH_CDC_ReceiveCallback>
      break;
 8009452:	bf00      	nop
  }
}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	e029      	b.n	8009504 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f81f 	bl	800950c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f001 fd33 	bl	800af68 <USBH_LL_Init>

  return USBH_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e009      	b.n	8009532 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	33e0      	adds	r3, #224	; 0xe0
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	2200      	movs	r2, #0
 800952a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3301      	adds	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b0f      	cmp	r3, #15
 8009536:	d9f2      	bls.n	800951e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009538:	2300      	movs	r3, #0
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e009      	b.n	8009552 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009558:	d3f1      	bcc.n	800953e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2240      	movs	r2, #64	; 0x40
 800957e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d016      	beq.n	80095f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10e      	bne.n	80095f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095d8:	1c59      	adds	r1, r3, #1
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	33de      	adds	r3, #222	; 0xde
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
 80095ee:	e004      	b.n	80095fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	e001      	b.n	80095fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80095f6:	2302      	movs	r3, #2
 80095f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	429a      	cmp	r2, r3
 8009622:	d204      	bcs.n	800962e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800962c:	e001      	b.n	8009632 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800962e:	2302      	movs	r3, #2
 8009630:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	461a      	mov	r2, r3
 800964e:	4603      	mov	r3, r0
 8009650:	70fb      	strb	r3, [r7, #3]
 8009652:	460b      	mov	r3, r1
 8009654:	70bb      	strb	r3, [r7, #2]
 8009656:	4613      	mov	r3, r2
 8009658:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009668:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800966a:	e025      	b.n	80096b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	221a      	movs	r2, #26
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	3308      	adds	r3, #8
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	3302      	adds	r3, #2
 800967c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	795b      	ldrb	r3, [r3, #5]
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	429a      	cmp	r2, r3
 8009686:	d002      	beq.n	800968e <USBH_FindInterface+0x4e>
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	2bff      	cmp	r3, #255	; 0xff
 800968c:	d111      	bne.n	80096b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009692:	78ba      	ldrb	r2, [r7, #2]
 8009694:	429a      	cmp	r2, r3
 8009696:	d002      	beq.n	800969e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009698:	78bb      	ldrb	r3, [r7, #2]
 800969a:	2bff      	cmp	r3, #255	; 0xff
 800969c:	d109      	bne.n	80096b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096a2:	787a      	ldrb	r2, [r7, #1]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d002      	beq.n	80096ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096a8:	787b      	ldrb	r3, [r7, #1]
 80096aa:	2bff      	cmp	r3, #255	; 0xff
 80096ac:	d101      	bne.n	80096b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	e006      	b.n	80096c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	3301      	adds	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d9d6      	bls.n	800966c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096be:	23ff      	movs	r3, #255	; 0xff
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 fc83 	bl	800afe0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80096da:	2101      	movs	r1, #1
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 fd9c 	bl	800b21a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af04      	add	r7, sp, #16
 80096f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096f4:	2302      	movs	r3, #2
 80096f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b01      	cmp	r3, #1
 8009706:	d102      	bne.n	800970e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2203      	movs	r2, #3
 800970c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b0b      	cmp	r3, #11
 8009716:	f200 81be 	bhi.w	8009a96 <USBH_Process+0x3aa>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <USBH_Process+0x34>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009751 	.word	0x08009751
 8009724:	08009783 	.word	0x08009783
 8009728:	080097eb 	.word	0x080097eb
 800972c:	08009a31 	.word	0x08009a31
 8009730:	08009a97 	.word	0x08009a97
 8009734:	0800988f 	.word	0x0800988f
 8009738:	080099d7 	.word	0x080099d7
 800973c:	080098c5 	.word	0x080098c5
 8009740:	080098e5 	.word	0x080098e5
 8009744:	08009905 	.word	0x08009905
 8009748:	08009949 	.word	0x08009949
 800974c:	08009a19 	.word	0x08009a19
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 819e 	beq.w	8009a9a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009764:	20c8      	movs	r0, #200	; 0xc8
 8009766:	f001 fd9f 	bl	800b2a8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fc95 	bl	800b09a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009780:	e18b      	b.n	8009a9a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009788:	2b01      	cmp	r3, #1
 800978a:	d107      	bne.n	800979c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800979a:	e18d      	b.n	8009ab8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a6:	d914      	bls.n	80097d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097ae:	3301      	adds	r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d903      	bls.n	80097ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	220d      	movs	r2, #13
 80097c6:	701a      	strb	r2, [r3, #0]
      break;
 80097c8:	e176      	b.n	8009ab8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	701a      	strb	r2, [r3, #0]
      break;
 80097d0:	e172      	b.n	8009ab8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097d8:	f103 020a 	add.w	r2, r3, #10
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097e2:	200a      	movs	r0, #10
 80097e4:	f001 fd60 	bl	800b2a8 <USBH_Delay>
      break;
 80097e8:	e166      	b.n	8009ab8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097fa:	2104      	movs	r1, #4
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009800:	2064      	movs	r0, #100	; 0x64
 8009802:	f001 fd51 	bl	800b2a8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fc20 	bl	800b04c <USBH_LL_GetSpeed>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2205      	movs	r2, #5
 800981a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800981c:	2100      	movs	r1, #0
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fa2b 	bl	800ac7a <USBH_AllocPipe>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800982c:	2180      	movs	r1, #128	; 0x80
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fa23 	bl	800ac7a <USBH_AllocPipe>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	7919      	ldrb	r1, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009850:	b292      	uxth	r2, r2
 8009852:	9202      	str	r2, [sp, #8]
 8009854:	2200      	movs	r2, #0
 8009856:	9201      	str	r2, [sp, #4]
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4603      	mov	r3, r0
 800985c:	2280      	movs	r2, #128	; 0x80
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 f9dc 	bl	800ac1c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7959      	ldrb	r1, [r3, #5]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009878:	b292      	uxth	r2, r2
 800987a:	9202      	str	r2, [sp, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	9201      	str	r2, [sp, #4]
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4603      	mov	r3, r0
 8009884:	2200      	movs	r2, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 f9c8 	bl	800ac1c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800988c:	e114      	b.n	8009ab8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f918 	bl	8009ac4 <USBH_HandleEnum>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 80fe 	bne.w	8009a9e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d103      	bne.n	80098bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2208      	movs	r2, #8
 80098b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098ba:	e0f0      	b.n	8009a9e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2207      	movs	r2, #7
 80098c0:	701a      	strb	r2, [r3, #0]
      break;
 80098c2:	e0ec      	b.n	8009a9e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80e9 	beq.w	8009aa2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098d6:	2101      	movs	r1, #1
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2208      	movs	r2, #8
 80098e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80098e2:	e0de      	b.n	8009aa2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fc2c 	bl	800a14c <USBH_SetCfg>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 80d5 	bne.w	8009aa6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2209      	movs	r2, #9
 8009900:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009902:	e0d0      	b.n	8009aa6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009912:	2101      	movs	r1, #1
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc3c 	bl	800a192 <USBH_SetFeature>
 800991a:	4603      	mov	r3, r0
 800991c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	220a      	movs	r2, #10
 800992a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800992c:	e0bd      	b.n	8009aaa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b03      	cmp	r3, #3
 8009934:	f040 80b9 	bne.w	8009aaa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220a      	movs	r2, #10
 800993c:	701a      	strb	r2, [r3, #0]
      break;
 800993e:	e0b4      	b.n	8009aaa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	220a      	movs	r2, #10
 8009944:	701a      	strb	r2, [r3, #0]
      break;
 8009946:	e0b0      	b.n	8009aaa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 80ad 	beq.w	8009aae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
 8009960:	e016      	b.n	8009990 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009962:	7bfa      	ldrb	r2, [r7, #15]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32de      	adds	r2, #222	; 0xde
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	791a      	ldrb	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009974:	429a      	cmp	r2, r3
 8009976:	d108      	bne.n	800998a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009978:	7bfa      	ldrb	r2, [r7, #15]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	32de      	adds	r2, #222	; 0xde
 800997e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009988:	e005      	b.n	8009996 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	3301      	adds	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0e5      	beq.n	8009962 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d016      	beq.n	80099ce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	4798      	blx	r3
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2206      	movs	r2, #6
 80099b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099be:	2103      	movs	r1, #3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099c4:	e073      	b.n	8009aae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	220d      	movs	r2, #13
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e06f      	b.n	8009aae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	220d      	movs	r2, #13
 80099d2:	701a      	strb	r2, [r3, #0]
      break;
 80099d4:	e06b      	b.n	8009aae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d017      	beq.n	8009a10 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	220b      	movs	r2, #11
 80099fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099fe:	e058      	b.n	8009ab2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d154      	bne.n	8009ab2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	220d      	movs	r2, #13
 8009a0c:	701a      	strb	r2, [r3, #0]
      break;
 8009a0e:	e050      	b.n	8009ab2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	220d      	movs	r2, #13
 8009a14:	701a      	strb	r2, [r3, #0]
      break;
 8009a16:	e04c      	b.n	8009ab2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d049      	beq.n	8009ab6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
      }
      break;
 8009a2e:	e042      	b.n	8009ab6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fd67 	bl	800950c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d005      	beq.n	8009a72 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a6c:	2105      	movs	r1, #5
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d107      	bne.n	8009a8e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fe20 	bl	80096cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a8c:	e014      	b.n	8009ab8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 faa6 	bl	800afe0 <USBH_LL_Start>
      break;
 8009a94:	e010      	b.n	8009ab8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a96:	bf00      	nop
 8009a98:	e00e      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009a9a:	bf00      	nop
 8009a9c:	e00c      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009a9e:	bf00      	nop
 8009aa0:	e00a      	b.n	8009ab8 <USBH_Process+0x3cc>
    break;
 8009aa2:	bf00      	nop
 8009aa4:	e008      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009aa6:	bf00      	nop
 8009aa8:	e006      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009aaa:	bf00      	nop
 8009aac:	e004      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009aae:	bf00      	nop
 8009ab0:	e002      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009ab2:	bf00      	nop
 8009ab4:	e000      	b.n	8009ab8 <USBH_Process+0x3cc>
      break;
 8009ab6:	bf00      	nop
  }
  return USBH_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop

08009ac4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af04      	add	r7, sp, #16
 8009aca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b07      	cmp	r3, #7
 8009ada:	f200 81c1 	bhi.w	8009e60 <USBH_HandleEnum+0x39c>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <USBH_HandleEnum+0x20>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b05 	.word	0x08009b05
 8009ae8:	08009bc3 	.word	0x08009bc3
 8009aec:	08009c2d 	.word	0x08009c2d
 8009af0:	08009cbb 	.word	0x08009cbb
 8009af4:	08009d25 	.word	0x08009d25
 8009af8:	08009d95 	.word	0x08009d95
 8009afc:	08009ddb 	.word	0x08009ddb
 8009b00:	08009e21 	.word	0x08009e21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009b04:	2108      	movs	r1, #8
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa50 	bl	8009fac <USBH_Get_DevDesc>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d130      	bne.n	8009b78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	7919      	ldrb	r1, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b3a:	b292      	uxth	r2, r2
 8009b3c:	9202      	str	r2, [sp, #8]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	2280      	movs	r2, #128	; 0x80
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 f867 	bl	800ac1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7959      	ldrb	r1, [r3, #5]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b62:	b292      	uxth	r2, r2
 8009b64:	9202      	str	r2, [sp, #8]
 8009b66:	2200      	movs	r2, #0
 8009b68:	9201      	str	r2, [sp, #4]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2200      	movs	r2, #0
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f853 	bl	800ac1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b76:	e175      	b.n	8009e64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	f040 8172 	bne.w	8009e64 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b86:	3301      	adds	r3, #1
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d903      	bls.n	8009ba2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	220d      	movs	r2, #13
 8009b9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ba0:	e160      	b.n	8009e64 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	795b      	ldrb	r3, [r3, #5]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f001 f887 	bl	800acbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	791b      	ldrb	r3, [r3, #4]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 f881 	bl	800acbc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
      break;
 8009bc0:	e150      	b.n	8009e64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009bc2:	2112      	movs	r1, #18
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f9f1 	bl	8009fac <USBH_Get_DevDesc>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d103      	bne.n	8009bdc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bda:	e145      	b.n	8009e68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	f040 8142 	bne.w	8009e68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bea:	3301      	adds	r3, #1
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d903      	bls.n	8009c06 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	220d      	movs	r2, #13
 8009c02:	701a      	strb	r2, [r3, #0]
      break;
 8009c04:	e130      	b.n	8009e68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	795b      	ldrb	r3, [r3, #5]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f855 	bl	800acbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f84f 	bl	800acbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
      break;
 8009c2a:	e11d      	b.n	8009e68 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa68 	bl	800a104 <USBH_SetAddress>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d132      	bne.n	8009ca4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c3e:	2002      	movs	r0, #2
 8009c40:	f001 fb32 	bl	800b2a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2203      	movs	r2, #3
 8009c50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	7919      	ldrb	r1, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c66:	b292      	uxth	r2, r2
 8009c68:	9202      	str	r2, [sp, #8]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4603      	mov	r3, r0
 8009c72:	2280      	movs	r2, #128	; 0x80
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 ffd1 	bl	800ac1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7959      	ldrb	r1, [r3, #5]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	9201      	str	r2, [sp, #4]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 ffbd 	bl	800ac1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ca2:	e0e3      	b.n	8009e6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	f040 80e0 	bne.w	8009e6c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	220d      	movs	r2, #13
 8009cb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	705a      	strb	r2, [r3, #1]
      break;
 8009cb8:	e0d8      	b.n	8009e6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009cba:	2109      	movs	r1, #9
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f99d 	bl	8009ffc <USBH_Get_CfgDesc>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2204      	movs	r2, #4
 8009cd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cd2:	e0cd      	b.n	8009e70 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	f040 80ca 	bne.w	8009e70 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d903      	bls.n	8009cfe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	220d      	movs	r2, #13
 8009cfa:	701a      	strb	r2, [r3, #0]
      break;
 8009cfc:	e0b8      	b.n	8009e70 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	795b      	ldrb	r3, [r3, #5]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 ffd9 	bl	800acbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 ffd3 	bl	800acbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
      break;
 8009d22:	e0a5      	b.n	8009e70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f965 	bl	8009ffc <USBH_Get_CfgDesc>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2205      	movs	r2, #5
 8009d40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d42:	e097      	b.n	8009e74 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f040 8094 	bne.w	8009e74 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d52:	3301      	adds	r3, #1
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d903      	bls.n	8009d6e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	220d      	movs	r2, #13
 8009d6a:	701a      	strb	r2, [r3, #0]
      break;
 8009d6c:	e082      	b.n	8009e74 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	795b      	ldrb	r3, [r3, #5]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 ffa1 	bl	800acbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	791b      	ldrb	r3, [r3, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 ff9b 	bl	800acbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
      break;
 8009d92:	e06f      	b.n	8009e74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d019      	beq.n	8009dd2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009daa:	23ff      	movs	r3, #255	; 0xff
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f949 	bl	800a044 <USBH_Get_StringDesc>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2206      	movs	r2, #6
 8009dc0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dc2:	e059      	b.n	8009e78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d156      	bne.n	8009e78 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2206      	movs	r2, #6
 8009dce:	705a      	strb	r2, [r3, #1]
      break;
 8009dd0:	e052      	b.n	8009e78 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2206      	movs	r2, #6
 8009dd6:	705a      	strb	r2, [r3, #1]
      break;
 8009dd8:	e04e      	b.n	8009e78 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d019      	beq.n	8009e18 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009df0:	23ff      	movs	r3, #255	; 0xff
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f926 	bl	800a044 <USBH_Get_StringDesc>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2207      	movs	r2, #7
 8009e06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e08:	e038      	b.n	8009e7c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d135      	bne.n	8009e7c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2207      	movs	r2, #7
 8009e14:	705a      	strb	r2, [r3, #1]
      break;
 8009e16:	e031      	b.n	8009e7c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2207      	movs	r2, #7
 8009e1c:	705a      	strb	r2, [r3, #1]
      break;
 8009e1e:	e02d      	b.n	8009e7c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d017      	beq.n	8009e5a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e36:	23ff      	movs	r3, #255	; 0xff
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f903 	bl	800a044 <USBH_Get_StringDesc>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e4c:	e018      	b.n	8009e80 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d115      	bne.n	8009e80 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
      break;
 8009e58:	e012      	b.n	8009e80 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5e:	e00f      	b.n	8009e80 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e60:	bf00      	nop
 8009e62:	e00e      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e64:	bf00      	nop
 8009e66:	e00c      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e00a      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e008      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e70:	bf00      	nop
 8009e72:	e006      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e74:	bf00      	nop
 8009e76:	e004      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e002      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <USBH_HandleEnum+0x3be>
      break;
 8009e80:	bf00      	nop
  }
  return Status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f804 	bl	8009ece <USBH_HandleSof>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b0b      	cmp	r3, #11
 8009ede:	d10a      	bne.n	8009ef6 <USBH_HandleSof+0x28>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	4798      	blx	r3
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009f0e:	bf00      	nop
}
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f2a:	bf00      	nop
}
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 f846 	bl	800b016 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	791b      	ldrb	r3, [r3, #4]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fe93 	bl	800acbc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	795b      	ldrb	r3, [r3, #5]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fe8d 	bl	800acbc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f864 	bl	800a09a <USBH_GetDescriptor>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	b292      	uxth	r2, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	f000 f919 	bl	800a224 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	331c      	adds	r3, #28
 800a00c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a00e:	887b      	ldrh	r3, [r7, #2]
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a018:	2100      	movs	r1, #0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f83d 	bl	800a09a <USBH_GetDescriptor>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d107      	bne.n	800a03a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a02a:	887b      	ldrh	r3, [r7, #2]
 800a02c:	461a      	mov	r2, r3
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f989 	bl	800a348 <USBH_ParseCfgDesc>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	461a      	mov	r2, r3
 800a050:	460b      	mov	r3, r1
 800a052:	72fb      	strb	r3, [r7, #11]
 800a054:	4613      	mov	r3, r2
 800a056:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a058:	7afb      	ldrb	r3, [r7, #11]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a060:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a068:	893b      	ldrh	r3, [r7, #8]
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	460b      	mov	r3, r1
 800a06e:	2100      	movs	r1, #0
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f812 	bl	800a09a <USBH_GetDescriptor>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d107      	bne.n	800a090 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a086:	893a      	ldrh	r2, [r7, #8]
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fb26 	bl	800a6dc <USBH_ParseStringDesc>
  }

  return status;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	72fb      	strb	r3, [r7, #11]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	789b      	ldrb	r3, [r3, #2]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d11c      	bne.n	800a0ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2206      	movs	r2, #6
 800a0c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	893a      	ldrh	r2, [r7, #8]
 800a0ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0cc:	893b      	ldrh	r3, [r7, #8]
 800a0ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d6:	d104      	bne.n	800a0e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f240 4209 	movw	r2, #1033	; 0x409
 800a0de:	829a      	strh	r2, [r3, #20]
 800a0e0:	e002      	b.n	800a0e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8b3a      	ldrh	r2, [r7, #24]
 800a0ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0ee:	8b3b      	ldrh	r3, [r7, #24]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 fb3f 	bl	800a778 <USBH_CtlReq>
 800a0fa:	4603      	mov	r3, r0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	789b      	ldrb	r3, [r3, #2]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10f      	bne.n	800a138 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2205      	movs	r2, #5
 800a122:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	b29a      	uxth	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a138:	2200      	movs	r2, #0
 800a13a:	2100      	movs	r1, #0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fb1b 	bl	800a778 <USBH_CtlReq>
 800a142:	4603      	mov	r3, r0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	789b      	ldrb	r3, [r3, #2]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d10e      	bne.n	800a17e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2209      	movs	r2, #9
 800a16a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	887a      	ldrh	r2, [r7, #2]
 800a170:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a17e:	2200      	movs	r2, #0
 800a180:	2100      	movs	r1, #0
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 faf8 	bl	800a778 <USBH_CtlReq>
 800a188:	4603      	mov	r3, r0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	789b      	ldrb	r3, [r3, #2]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d10f      	bne.n	800a1c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2203      	movs	r2, #3
 800a1b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fad4 	bl	800a778 <USBH_CtlReq>
 800a1d0:	4603      	mov	r3, r0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	789b      	ldrb	r3, [r3, #2]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d10f      	bne.n	800a20e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a20e:	2200      	movs	r2, #0
 800a210:	2100      	movs	r1, #0
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fab0 	bl	800a778 <USBH_CtlReq>
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	781a      	ldrb	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	785a      	ldrb	r2, [r3, #1]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	3302      	adds	r3, #2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	3303      	adds	r3, #3
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	b29b      	uxth	r3, r3
 800a256:	4313      	orrs	r3, r2
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	791a      	ldrb	r2, [r3, #4]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	795a      	ldrb	r2, [r3, #5]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	799a      	ldrb	r2, [r3, #6]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	79da      	ldrb	r2, [r3, #7]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	79db      	ldrb	r3, [r3, #7]
 800a282:	2b20      	cmp	r3, #32
 800a284:	dc0f      	bgt.n	800a2a6 <USBH_ParseDevDesc+0x82>
 800a286:	2b08      	cmp	r3, #8
 800a288:	db14      	blt.n	800a2b4 <USBH_ParseDevDesc+0x90>
 800a28a:	3b08      	subs	r3, #8
 800a28c:	4a2d      	ldr	r2, [pc, #180]	; (800a344 <USBH_ParseDevDesc+0x120>)
 800a28e:	fa22 f303 	lsr.w	r3, r2, r3
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	bf14      	ite	ne
 800a29a:	2301      	movne	r3, #1
 800a29c:	2300      	moveq	r3, #0
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <USBH_ParseDevDesc+0x86>
 800a2a4:	e006      	b.n	800a2b4 <USBH_ParseDevDesc+0x90>
 800a2a6:	2b40      	cmp	r3, #64	; 0x40
 800a2a8:	d104      	bne.n	800a2b4 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	79da      	ldrb	r2, [r3, #7]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	71da      	strb	r2, [r3, #7]
      break;
 800a2b2:	e003      	b.n	800a2bc <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2240      	movs	r2, #64	; 0x40
 800a2b8:	71da      	strb	r2, [r3, #7]
      break;
 800a2ba:	bf00      	nop
  }

  if (length > 8U)
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	d939      	bls.n	800a336 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3309      	adds	r3, #9
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	330a      	adds	r3, #10
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	330b      	adds	r3, #11
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	b29a      	uxth	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	330d      	adds	r3, #13
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4313      	orrs	r3, r2
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	7b9a      	ldrb	r2, [r3, #14]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	7bda      	ldrb	r2, [r3, #15]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	7c1a      	ldrb	r2, [r3, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	7c5a      	ldrb	r2, [r3, #17]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	745a      	strb	r2, [r3, #17]
  }
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	01000101 	.word	0x01000101

0800a348 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08c      	sub	sp, #48	; 0x30
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a35c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	785a      	ldrb	r2, [r3, #1]
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3302      	adds	r3, #2
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b29a      	uxth	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3303      	adds	r3, #3
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	b29b      	uxth	r3, r3
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4313      	orrs	r3, r2
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a4:	bf28      	it	cs
 800a3a6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	791a      	ldrb	r2, [r3, #4]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	795a      	ldrb	r2, [r3, #5]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	799a      	ldrb	r2, [r3, #6]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	79da      	ldrb	r2, [r3, #7]
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	7a1a      	ldrb	r2, [r3, #8]
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d002      	beq.n	800a3e6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	2209      	movs	r2, #9
 800a3e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	2b09      	cmp	r3, #9
 800a3ea:	f240 809d 	bls.w	800a528 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a3ee:	2309      	movs	r3, #9
 800a3f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3f6:	e081      	b.n	800a4fc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3f8:	f107 0316 	add.w	r3, r7, #22
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a400:	f000 f99f 	bl	800a742 <USBH_GetNextDesc>
 800a404:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d176      	bne.n	800a4fc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b09      	cmp	r3, #9
 800a414:	d002      	beq.n	800a41c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	2209      	movs	r2, #9
 800a41a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a420:	221a      	movs	r2, #26
 800a422:	fb02 f303 	mul.w	r3, r2, r3
 800a426:	3308      	adds	r3, #8
 800a428:	6a3a      	ldr	r2, [r7, #32]
 800a42a:	4413      	add	r3, r2
 800a42c:	3302      	adds	r3, #2
 800a42e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a432:	69f8      	ldr	r0, [r7, #28]
 800a434:	f000 f87e 	bl	800a534 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a442:	e043      	b.n	800a4cc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a444:	f107 0316 	add.w	r3, r7, #22
 800a448:	4619      	mov	r1, r3
 800a44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44c:	f000 f979 	bl	800a742 <USBH_GetNextDesc>
 800a450:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	2b05      	cmp	r3, #5
 800a458:	d138      	bne.n	800a4cc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	795b      	ldrb	r3, [r3, #5]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d10f      	bne.n	800a482 <USBH_ParseCfgDesc+0x13a>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	799b      	ldrb	r3, [r3, #6]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d10b      	bne.n	800a482 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	79db      	ldrb	r3, [r3, #7]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10f      	bne.n	800a492 <USBH_ParseCfgDesc+0x14a>
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b09      	cmp	r3, #9
 800a478:	d00b      	beq.n	800a492 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	2209      	movs	r2, #9
 800a47e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a480:	e007      	b.n	800a492 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b07      	cmp	r3, #7
 800a488:	d004      	beq.n	800a494 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	2207      	movs	r2, #7
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	e000      	b.n	800a494 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a492:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a49c:	3201      	adds	r2, #1
 800a49e:	00d2      	lsls	r2, r2, #3
 800a4a0:	211a      	movs	r1, #26
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	6a3a      	ldr	r2, [r7, #32]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b4:	69b9      	ldr	r1, [r7, #24]
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f86b 	bl	800a592 <USBH_ParseEPDesc>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a4c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d204      	bcs.n	800a4e2 <USBH_ParseCfgDesc+0x19a>
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	885a      	ldrh	r2, [r3, #2]
 800a4dc:	8afb      	ldrh	r3, [r7, #22]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d8b0      	bhi.n	800a444 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d201      	bcs.n	800a4f2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e01c      	b.n	800a52c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a500:	2b01      	cmp	r3, #1
 800a502:	d805      	bhi.n	800a510 <USBH_ParseCfgDesc+0x1c8>
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	885a      	ldrh	r2, [r3, #2]
 800a508:	8afb      	ldrh	r3, [r7, #22]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f63f af74 	bhi.w	800a3f8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	791b      	ldrb	r3, [r3, #4]
 800a514:	2b02      	cmp	r3, #2
 800a516:	bf28      	it	cs
 800a518:	2302      	movcs	r3, #2
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a520:	429a      	cmp	r2, r3
 800a522:	d201      	bcs.n	800a528 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a524:	2303      	movs	r3, #3
 800a526:	e001      	b.n	800a52c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3730      	adds	r7, #48	; 0x30
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781a      	ldrb	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	785a      	ldrb	r2, [r3, #1]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	789a      	ldrb	r2, [r3, #2]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	78da      	ldrb	r2, [r3, #3]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	791a      	ldrb	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	795a      	ldrb	r2, [r3, #5]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	799a      	ldrb	r2, [r3, #6]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	79da      	ldrb	r2, [r3, #7]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	7a1a      	ldrb	r2, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	721a      	strb	r2, [r3, #8]
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	781a      	ldrb	r2, [r3, #0]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	785a      	ldrb	r2, [r3, #1]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	789a      	ldrb	r2, [r3, #2]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	78da      	ldrb	r2, [r3, #3]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3305      	adds	r3, #5
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	799a      	ldrb	r2, [r3, #6]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	889b      	ldrh	r3, [r3, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	75fb      	strb	r3, [r7, #23]
 800a5f2:	e033      	b.n	800a65c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	889b      	ldrh	r3, [r3, #4]
 800a5f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a5fc:	f023 0307 	bic.w	r3, r3, #7
 800a600:	b29a      	uxth	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	889b      	ldrh	r3, [r3, #4]
 800a60a:	b21a      	sxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3304      	adds	r3, #4
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	b299      	uxth	r1, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3305      	adds	r3, #5
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	b29b      	uxth	r3, r3
 800a620:	430b      	orrs	r3, r1
 800a622:	b29b      	uxth	r3, r3
 800a624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d110      	bne.n	800a64e <USBH_ParseEPDesc+0xbc>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b299      	uxth	r1, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3305      	adds	r3, #5
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	b29b      	uxth	r3, r3
 800a640:	430b      	orrs	r3, r1
 800a642:	b29b      	uxth	r3, r3
 800a644:	b21b      	sxth	r3, r3
 800a646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a64a:	b21b      	sxth	r3, r3
 800a64c:	e001      	b.n	800a652 <USBH_ParseEPDesc+0xc0>
 800a64e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a652:	4313      	orrs	r3, r2
 800a654:	b21b      	sxth	r3, r3
 800a656:	b29a      	uxth	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a662:	2b00      	cmp	r3, #0
 800a664:	d116      	bne.n	800a694 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	78db      	ldrb	r3, [r3, #3]
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d005      	beq.n	800a67e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	78db      	ldrb	r3, [r3, #3]
 800a676:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d127      	bne.n	800a6ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	799b      	ldrb	r3, [r3, #6]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <USBH_ParseEPDesc+0xfc>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	799b      	ldrb	r3, [r3, #6]
 800a68a:	2b10      	cmp	r3, #16
 800a68c:	d91f      	bls.n	800a6ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a68e:	2303      	movs	r3, #3
 800a690:	75fb      	strb	r3, [r7, #23]
 800a692:	e01c      	b.n	800a6ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	78db      	ldrb	r3, [r3, #3]
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d10a      	bne.n	800a6b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	799b      	ldrb	r3, [r3, #6]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <USBH_ParseEPDesc+0x11e>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	799b      	ldrb	r3, [r3, #6]
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d90e      	bls.n	800a6ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	75fb      	strb	r3, [r7, #23]
 800a6b4:	e00b      	b.n	800a6ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	78db      	ldrb	r3, [r3, #3]
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d105      	bne.n	800a6ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	799b      	ldrb	r3, [r3, #6]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d120      	bne.n	800a736 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	1e9a      	subs	r2, r3, #2
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	bf28      	it	cs
 800a700:	4613      	movcs	r3, r2
 800a702:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3302      	adds	r3, #2
 800a708:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a70a:	2300      	movs	r3, #0
 800a70c:	82fb      	strh	r3, [r7, #22]
 800a70e:	e00b      	b.n	800a728 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a710:	8afb      	ldrh	r3, [r7, #22]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	781a      	ldrb	r2, [r3, #0]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	3301      	adds	r3, #1
 800a720:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a722:	8afb      	ldrh	r3, [r7, #22]
 800a724:	3302      	adds	r3, #2
 800a726:	82fb      	strh	r3, [r7, #22]
 800a728:	8afa      	ldrh	r2, [r7, #22]
 800a72a:	8abb      	ldrh	r3, [r7, #20]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d3ef      	bcc.n	800a710 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
  }
}
 800a736:	bf00      	nop
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a742:	b480      	push	{r7}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	881a      	ldrh	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	4413      	add	r3, r2
 800a758:	b29a      	uxth	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4413      	add	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a76a:	68fb      	ldr	r3, [r7, #12]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a786:	2301      	movs	r3, #1
 800a788:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	789b      	ldrb	r3, [r3, #2]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d002      	beq.n	800a798 <USBH_CtlReq+0x20>
 800a792:	2b02      	cmp	r3, #2
 800a794:	d00f      	beq.n	800a7b6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a796:	e027      	b.n	800a7e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	88fa      	ldrh	r2, [r7, #6]
 800a7a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b4:	e018      	b.n	800a7e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f81c 	bl	800a7f4 <USBH_HandleControl>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <USBH_CtlReq+0x54>
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d106      	bne.n	800a7da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	761a      	strb	r2, [r3, #24]
      break;
 800a7d8:	e005      	b.n	800a7e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d102      	bne.n	800a7e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	709a      	strb	r2, [r3, #2]
      break;
 800a7e6:	bf00      	nop
  }
  return status;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af02      	add	r7, sp, #8
 800a7fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a800:	2300      	movs	r3, #0
 800a802:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7e1b      	ldrb	r3, [r3, #24]
 800a808:	3b01      	subs	r3, #1
 800a80a:	2b0a      	cmp	r3, #10
 800a80c:	f200 8156 	bhi.w	800aabc <USBH_HandleControl+0x2c8>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <USBH_HandleControl+0x24>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a845 	.word	0x0800a845
 800a81c:	0800a85f 	.word	0x0800a85f
 800a820:	0800a8c9 	.word	0x0800a8c9
 800a824:	0800a8ef 	.word	0x0800a8ef
 800a828:	0800a927 	.word	0x0800a927
 800a82c:	0800a951 	.word	0x0800a951
 800a830:	0800a9a3 	.word	0x0800a9a3
 800a834:	0800a9c5 	.word	0x0800a9c5
 800a838:	0800aa01 	.word	0x0800aa01
 800a83c:	0800aa27 	.word	0x0800aa27
 800a840:	0800aa65 	.word	0x0800aa65
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f103 0110 	add.w	r1, r3, #16
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	461a      	mov	r2, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f943 	bl	800aadc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2202      	movs	r2, #2
 800a85a:	761a      	strb	r2, [r3, #24]
      break;
 800a85c:	e139      	b.n	800aad2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	795b      	ldrb	r3, [r3, #5]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fcc5 	bl	800b1f4 <USBH_LL_GetURBState>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d11e      	bne.n	800a8b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	7c1b      	ldrb	r3, [r3, #16]
 800a878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a87c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8adb      	ldrh	r3, [r3, #22]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a886:	7b7b      	ldrb	r3, [r7, #13]
 800a888:	2b80      	cmp	r3, #128	; 0x80
 800a88a:	d103      	bne.n	800a894 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2203      	movs	r2, #3
 800a890:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a892:	e115      	b.n	800aac0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2205      	movs	r2, #5
 800a898:	761a      	strb	r2, [r3, #24]
      break;
 800a89a:	e111      	b.n	800aac0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a89c:	7b7b      	ldrb	r3, [r7, #13]
 800a89e:	2b80      	cmp	r3, #128	; 0x80
 800a8a0:	d103      	bne.n	800a8aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2209      	movs	r2, #9
 800a8a6:	761a      	strb	r2, [r3, #24]
      break;
 800a8a8:	e10a      	b.n	800aac0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	761a      	strb	r2, [r3, #24]
      break;
 800a8b0:	e106      	b.n	800aac0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d003      	beq.n	800a8c0 <USBH_HandleControl+0xcc>
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	f040 8100 	bne.w	800aac0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	220b      	movs	r2, #11
 800a8c4:	761a      	strb	r2, [r3, #24]
      break;
 800a8c6:	e0fb      	b.n	800aac0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6899      	ldr	r1, [r3, #8]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	899a      	ldrh	r2, [r3, #12]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	791b      	ldrb	r3, [r3, #4]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f93a 	bl	800ab5a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	761a      	strb	r2, [r3, #24]
      break;
 800a8ec:	e0f1      	b.n	800aad2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	791b      	ldrb	r3, [r3, #4]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fc7d 	bl	800b1f4 <USBH_LL_GetURBState>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d102      	bne.n	800a90a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2209      	movs	r2, #9
 800a908:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	2b05      	cmp	r3, #5
 800a90e:	d102      	bne.n	800a916 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a910:	2303      	movs	r3, #3
 800a912:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a914:	e0d6      	b.n	800aac4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	2b04      	cmp	r3, #4
 800a91a:	f040 80d3 	bne.w	800aac4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220b      	movs	r2, #11
 800a922:	761a      	strb	r2, [r3, #24]
      break;
 800a924:	e0ce      	b.n	800aac4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6899      	ldr	r1, [r3, #8]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	899a      	ldrh	r2, [r3, #12]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	795b      	ldrb	r3, [r3, #5]
 800a932:	2001      	movs	r0, #1
 800a934:	9000      	str	r0, [sp, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f8ea 	bl	800ab10 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2206      	movs	r2, #6
 800a94c:	761a      	strb	r2, [r3, #24]
      break;
 800a94e:	e0c0      	b.n	800aad2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fc4c 	bl	800b1f4 <USBH_LL_GetURBState>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d103      	bne.n	800a96e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2207      	movs	r2, #7
 800a96a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a96c:	e0ac      	b.n	800aac8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b05      	cmp	r3, #5
 800a972:	d105      	bne.n	800a980 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	220c      	movs	r2, #12
 800a978:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a97a:	2303      	movs	r3, #3
 800a97c:	73fb      	strb	r3, [r7, #15]
      break;
 800a97e:	e0a3      	b.n	800aac8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d103      	bne.n	800a98e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2205      	movs	r2, #5
 800a98a:	761a      	strb	r2, [r3, #24]
      break;
 800a98c:	e09c      	b.n	800aac8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a98e:	7bbb      	ldrb	r3, [r7, #14]
 800a990:	2b04      	cmp	r3, #4
 800a992:	f040 8099 	bne.w	800aac8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	220b      	movs	r2, #11
 800a99a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a99c:	2302      	movs	r3, #2
 800a99e:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a0:	e092      	b.n	800aac8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	791b      	ldrb	r3, [r3, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8d5 	bl	800ab5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2208      	movs	r2, #8
 800a9c0:	761a      	strb	r2, [r3, #24]

      break;
 800a9c2:	e086      	b.n	800aad2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	791b      	ldrb	r3, [r3, #4]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc12 	bl	800b1f4 <USBH_LL_GetURBState>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d105      	bne.n	800a9e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	220d      	movs	r2, #13
 800a9de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9e4:	e072      	b.n	800aacc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d103      	bne.n	800a9f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	220b      	movs	r2, #11
 800a9f0:	761a      	strb	r2, [r3, #24]
      break;
 800a9f2:	e06b      	b.n	800aacc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b05      	cmp	r3, #5
 800a9f8:	d168      	bne.n	800aacc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fe:	e065      	b.n	800aacc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	795b      	ldrb	r3, [r3, #5]
 800aa04:	2201      	movs	r2, #1
 800aa06:	9200      	str	r2, [sp, #0]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f87f 	bl	800ab10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	220a      	movs	r2, #10
 800aa22:	761a      	strb	r2, [r3, #24]
      break;
 800aa24:	e055      	b.n	800aad2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	795b      	ldrb	r3, [r3, #5]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fbe1 	bl	800b1f4 <USBH_LL_GetURBState>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d105      	bne.n	800aa48 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	220d      	movs	r2, #13
 800aa44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa46:	e043      	b.n	800aad0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d103      	bne.n	800aa56 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2209      	movs	r2, #9
 800aa52:	761a      	strb	r2, [r3, #24]
      break;
 800aa54:	e03c      	b.n	800aad0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d139      	bne.n	800aad0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	220b      	movs	r2, #11
 800aa60:	761a      	strb	r2, [r3, #24]
      break;
 800aa62:	e035      	b.n	800aad0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7e5b      	ldrb	r3, [r3, #25]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	765a      	strb	r2, [r3, #25]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7e5b      	ldrb	r3, [r3, #25]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d806      	bhi.n	800aa86 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aa84:	e025      	b.n	800aad2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa8c:	2106      	movs	r1, #6
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	795b      	ldrb	r3, [r3, #5]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f90c 	bl	800acbc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f906 	bl	800acbc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aab6:	2302      	movs	r3, #2
 800aab8:	73fb      	strb	r3, [r7, #15]
      break;
 800aaba:	e00a      	b.n	800aad2 <USBH_HandleControl+0x2de>

    default:
      break;
 800aabc:	bf00      	nop
 800aabe:	e008      	b.n	800aad2 <USBH_HandleControl+0x2de>
      break;
 800aac0:	bf00      	nop
 800aac2:	e006      	b.n	800aad2 <USBH_HandleControl+0x2de>
      break;
 800aac4:	bf00      	nop
 800aac6:	e004      	b.n	800aad2 <USBH_HandleControl+0x2de>
      break;
 800aac8:	bf00      	nop
 800aaca:	e002      	b.n	800aad2 <USBH_HandleControl+0x2de>
      break;
 800aacc:	bf00      	nop
 800aace:	e000      	b.n	800aad2 <USBH_HandleControl+0x2de>
      break;
 800aad0:	bf00      	nop
  }

  return status;
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aaea:	79f9      	ldrb	r1, [r7, #7]
 800aaec:	2300      	movs	r3, #0
 800aaee:	9303      	str	r3, [sp, #12]
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	9302      	str	r3, [sp, #8]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	2300      	movs	r3, #0
 800aafe:	2200      	movs	r2, #0
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 fb46 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af04      	add	r7, sp, #16
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	460b      	mov	r3, r1
 800ab20:	80fb      	strh	r3, [r7, #6]
 800ab22:	4613      	mov	r3, r2
 800ab24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ab30:	2300      	movs	r3, #0
 800ab32:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab34:	7979      	ldrb	r1, [r7, #5]
 800ab36:	7e3b      	ldrb	r3, [r7, #24]
 800ab38:	9303      	str	r3, [sp, #12]
 800ab3a:	88fb      	ldrh	r3, [r7, #6]
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	2301      	movs	r3, #1
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	2300      	movs	r3, #0
 800ab48:	2200      	movs	r2, #0
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 fb21 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b088      	sub	sp, #32
 800ab5e:	af04      	add	r7, sp, #16
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	4611      	mov	r1, r2
 800ab66:	461a      	mov	r2, r3
 800ab68:	460b      	mov	r3, r1
 800ab6a:	80fb      	strh	r3, [r7, #6]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab70:	7979      	ldrb	r1, [r7, #5]
 800ab72:	2300      	movs	r3, #0
 800ab74:	9303      	str	r3, [sp, #12]
 800ab76:	88fb      	ldrh	r3, [r7, #6]
 800ab78:	9302      	str	r3, [sp, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	2301      	movs	r3, #1
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	2201      	movs	r2, #1
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fb03 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab8c:	2300      	movs	r3, #0

}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b088      	sub	sp, #32
 800ab9a:	af04      	add	r7, sp, #16
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	4611      	mov	r1, r2
 800aba2:	461a      	mov	r2, r3
 800aba4:	460b      	mov	r3, r1
 800aba6:	80fb      	strh	r3, [r7, #6]
 800aba8:	4613      	mov	r3, r2
 800abaa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abba:	7979      	ldrb	r1, [r7, #5]
 800abbc:	7e3b      	ldrb	r3, [r7, #24]
 800abbe:	9303      	str	r3, [sp, #12]
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	9302      	str	r3, [sp, #8]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	2301      	movs	r3, #1
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	2302      	movs	r3, #2
 800abce:	2200      	movs	r2, #0
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 fade 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af04      	add	r7, sp, #16
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4611      	mov	r1, r2
 800abec:	461a      	mov	r2, r3
 800abee:	460b      	mov	r3, r1
 800abf0:	80fb      	strh	r3, [r7, #6]
 800abf2:	4613      	mov	r3, r2
 800abf4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abf6:	7979      	ldrb	r1, [r7, #5]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	88fb      	ldrh	r3, [r7, #6]
 800abfe:	9302      	str	r3, [sp, #8]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	2301      	movs	r3, #1
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	2302      	movs	r3, #2
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 fac0 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af04      	add	r7, sp, #16
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	70fb      	strb	r3, [r7, #3]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70bb      	strb	r3, [r7, #2]
 800ac32:	4613      	mov	r3, r2
 800ac34:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ac36:	7878      	ldrb	r0, [r7, #1]
 800ac38:	78ba      	ldrb	r2, [r7, #2]
 800ac3a:	78f9      	ldrb	r1, [r7, #3]
 800ac3c:	8b3b      	ldrh	r3, [r7, #24]
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	7d3b      	ldrb	r3, [r7, #20]
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	7c3b      	ldrb	r3, [r7, #16]
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	4603      	mov	r3, r0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa53 	bl	800b0f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa72 	bl	800b154 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	460b      	mov	r3, r1
 800ac84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f836 	bl	800acf8 <USBH_GetFreePipe>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac90:	89fb      	ldrh	r3, [r7, #14]
 800ac92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d00a      	beq.n	800acb0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ac9a:	78fa      	ldrb	r2, [r7, #3]
 800ac9c:	89fb      	ldrh	r3, [r7, #14]
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	33e0      	adds	r3, #224	; 0xe0
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800acb0:	89fb      	ldrh	r3, [r7, #14]
 800acb2:	b2db      	uxtb	r3, r3
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	2b0f      	cmp	r3, #15
 800accc:	d80d      	bhi.n	800acea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	33e0      	adds	r3, #224	; 0xe0
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	33e0      	adds	r3, #224	; 0xe0
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]
 800ad08:	e00f      	b.n	800ad2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	33e0      	adds	r3, #224	; 0xe0
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	e007      	b.n	800ad34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	3301      	adds	r3, #1
 800ad28:	73fb      	strb	r3, [r7, #15]
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b0f      	cmp	r3, #15
 800ad2e:	d9ec      	bls.n	800ad0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ad30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ad44:	2201      	movs	r2, #1
 800ad46:	490e      	ldr	r1, [pc, #56]	; (800ad80 <MX_USB_HOST_Init+0x40>)
 800ad48:	480e      	ldr	r0, [pc, #56]	; (800ad84 <MX_USB_HOST_Init+0x44>)
 800ad4a:	f7fe fba5 	bl	8009498 <USBH_Init>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad54:	f7f6 fe3e 	bl	80019d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ad58:	490b      	ldr	r1, [pc, #44]	; (800ad88 <MX_USB_HOST_Init+0x48>)
 800ad5a:	480a      	ldr	r0, [pc, #40]	; (800ad84 <MX_USB_HOST_Init+0x44>)
 800ad5c:	f7fe fc2a 	bl	80095b4 <USBH_RegisterClass>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad66:	f7f6 fe35 	bl	80019d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad6a:	4806      	ldr	r0, [pc, #24]	; (800ad84 <MX_USB_HOST_Init+0x44>)
 800ad6c:	f7fe fcae 	bl	80096cc <USBH_Start>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad76:	f7f6 fe2d 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad7a:	bf00      	nop
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800ada1 	.word	0x0800ada1
 800ad84:	200003c8 	.word	0x200003c8
 800ad88:	2000000c 	.word	0x2000000c

0800ad8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ad90:	4802      	ldr	r0, [pc, #8]	; (800ad9c <MX_USB_HOST_Process+0x10>)
 800ad92:	f7fe fcab 	bl	80096ec <USBH_Process>
}
 800ad96:	bf00      	nop
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	200003c8 	.word	0x200003c8

0800ada0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	3b01      	subs	r3, #1
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d819      	bhi.n	800ade8 <USBH_UserProcess+0x48>
 800adb4:	a201      	add	r2, pc, #4	; (adr r2, 800adbc <USBH_UserProcess+0x1c>)
 800adb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adba:	bf00      	nop
 800adbc:	0800ade9 	.word	0x0800ade9
 800adc0:	0800add9 	.word	0x0800add9
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800add1 	.word	0x0800add1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800add0:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <USBH_UserProcess+0x58>)
 800add2:	2203      	movs	r2, #3
 800add4:	701a      	strb	r2, [r3, #0]
  break;
 800add6:	e008      	b.n	800adea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <USBH_UserProcess+0x58>)
 800adda:	2202      	movs	r2, #2
 800addc:	701a      	strb	r2, [r3, #0]
  break;
 800adde:	e004      	b.n	800adea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <USBH_UserProcess+0x58>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	701a      	strb	r2, [r3, #0]
  break;
 800ade6:	e000      	b.n	800adea <USBH_UserProcess+0x4a>

  default:
  break;
 800ade8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	200007a0 	.word	0x200007a0

0800adfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	; 0x28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae04:	f107 0314 	add.w	r3, r7, #20
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	609a      	str	r2, [r3, #8]
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae1c:	d147      	bne.n	800aeae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	613b      	str	r3, [r7, #16]
 800ae22:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	4a24      	ldr	r2, [pc, #144]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae2e:	4b22      	ldr	r3, [pc, #136]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ae3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ae48:	f107 0314 	add.w	r3, r7, #20
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	481b      	ldr	r0, [pc, #108]	; (800aebc <HAL_HCD_MspInit+0xc0>)
 800ae50:	f7f7 fd14 	bl	800287c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ae54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae62:	2300      	movs	r3, #0
 800ae64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae66:	230a      	movs	r3, #10
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae6a:	f107 0314 	add.w	r3, r7, #20
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4812      	ldr	r0, [pc, #72]	; (800aebc <HAL_HCD_MspInit+0xc0>)
 800ae72:	f7f7 fd03 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7a:	4a0f      	ldr	r2, [pc, #60]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae80:	6353      	str	r3, [r2, #52]	; 0x34
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae8a:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae90:	6453      	str	r3, [r2, #68]	; 0x44
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <HAL_HCD_MspInit+0xbc>)
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2100      	movs	r1, #0
 800aea2:	2043      	movs	r0, #67	; 0x43
 800aea4:	f7f7 f999 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aea8:	2043      	movs	r0, #67	; 0x43
 800aeaa:	f7f7 f9b2 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aeae:	bf00      	nop
 800aeb0:	3728      	adds	r7, #40	; 0x28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40023800 	.word	0x40023800
 800aebc:	40020000 	.word	0x40020000

0800aec0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe ffeb 	bl	8009eaa <USBH_LL_IncTimer>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff f823 	bl	8009f36 <USBH_LL_Connect>
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff f82c 	bl	8009f64 <USBH_LL_Disconnect>
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
 800af20:	4613      	mov	r3, r2
 800af22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe ffdd 	bl	8009efe <USBH_LL_PortEnabled>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe ffdd 	bl	8009f1a <USBH_LL_PortDisabled>
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af76:	2b01      	cmp	r3, #1
 800af78:	d12a      	bne.n	800afd0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af7a:	4a18      	ldr	r2, [pc, #96]	; (800afdc <USBH_LL_Init+0x74>)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a15      	ldr	r2, [pc, #84]	; (800afdc <USBH_LL_Init+0x74>)
 800af86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af8a:	4b14      	ldr	r3, [pc, #80]	; (800afdc <USBH_LL_Init+0x74>)
 800af8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af92:	4b12      	ldr	r3, [pc, #72]	; (800afdc <USBH_LL_Init+0x74>)
 800af94:	2208      	movs	r2, #8
 800af96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af98:	4b10      	ldr	r3, [pc, #64]	; (800afdc <USBH_LL_Init+0x74>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af9e:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <USBH_LL_Init+0x74>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <USBH_LL_Init+0x74>)
 800afa6:	2202      	movs	r2, #2
 800afa8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <USBH_LL_Init+0x74>)
 800afac:	2200      	movs	r2, #0
 800afae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800afb0:	480a      	ldr	r0, [pc, #40]	; (800afdc <USBH_LL_Init+0x74>)
 800afb2:	f7f7 fe18 	bl	8002be6 <HAL_HCD_Init>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800afbc:	f7f6 fd0a 	bl	80019d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800afc0:	4806      	ldr	r0, [pc, #24]	; (800afdc <USBH_LL_Init+0x74>)
 800afc2:	f7f8 f9fc 	bl	80033be <HAL_HCD_GetCurrentFrame>
 800afc6:	4603      	mov	r3, r0
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7fe ff5e 	bl	8009e8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	200007a4 	.word	0x200007a4

0800afe0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f8 f96b 	bl	80032d2 <HAL_HCD_Start>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f95c 	bl	800b2c0 <USBH_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7f8 f973 	bl	8003318 <HAL_HCD_Stop>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f941 	bl	800b2c0 <USBH_Get_USB_Status>
 800b03e:	4603      	mov	r3, r0
 800b040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b042:	7bbb      	ldrb	r3, [r7, #14]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b05e:	4618      	mov	r0, r3
 800b060:	f7f8 f9bb 	bl	80033da <HAL_HCD_GetCurrentSpeed>
 800b064:	4603      	mov	r3, r0
 800b066:	2b02      	cmp	r3, #2
 800b068:	d00c      	beq.n	800b084 <USBH_LL_GetSpeed+0x38>
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d80d      	bhi.n	800b08a <USBH_LL_GetSpeed+0x3e>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <USBH_LL_GetSpeed+0x2c>
 800b072:	2b01      	cmp	r3, #1
 800b074:	d003      	beq.n	800b07e <USBH_LL_GetSpeed+0x32>
 800b076:	e008      	b.n	800b08a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
    break;
 800b07c:	e008      	b.n	800b090 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b07e:	2301      	movs	r3, #1
 800b080:	73fb      	strb	r3, [r7, #15]
    break;
 800b082:	e005      	b.n	800b090 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b084:	2302      	movs	r3, #2
 800b086:	73fb      	strb	r3, [r7, #15]
    break;
 800b088:	e002      	b.n	800b090 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
    break;
 800b08e:	bf00      	nop
  }
  return  speed;
 800b090:	7bfb      	ldrb	r3, [r7, #15]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f8 f94e 	bl	8003352 <HAL_HCD_ResetPort>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f8ff 	bl	800b2c0 <USBH_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f8 f955 	bl	8003396 <HAL_HCD_HC_GetXferCount>
 800b0ec:	4603      	mov	r3, r0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0f6:	b590      	push	{r4, r7, lr}
 800b0f8:	b089      	sub	sp, #36	; 0x24
 800b0fa:	af04      	add	r7, sp, #16
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	4608      	mov	r0, r1
 800b100:	4611      	mov	r1, r2
 800b102:	461a      	mov	r2, r3
 800b104:	4603      	mov	r3, r0
 800b106:	70fb      	strb	r3, [r7, #3]
 800b108:	460b      	mov	r3, r1
 800b10a:	70bb      	strb	r3, [r7, #2]
 800b10c:	4613      	mov	r3, r2
 800b10e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b11e:	787c      	ldrb	r4, [r7, #1]
 800b120:	78ba      	ldrb	r2, [r7, #2]
 800b122:	78f9      	ldrb	r1, [r7, #3]
 800b124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	4623      	mov	r3, r4
 800b136:	f7f7 fdb8 	bl	8002caa <HAL_HCD_HC_Init>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 f8bd 	bl	800b2c0 <USBH_Get_USB_Status>
 800b146:	4603      	mov	r3, r0
 800b148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f7f7 fe28 	bl	8002dc8 <HAL_HCD_HC_Halt>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f89e 	bl	800b2c0 <USBH_Get_USB_Status>
 800b184:	4603      	mov	r3, r0
 800b186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b188:	7bbb      	ldrb	r3, [r7, #14]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b192:	b590      	push	{r4, r7, lr}
 800b194:	b089      	sub	sp, #36	; 0x24
 800b196:	af04      	add	r7, sp, #16
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	4608      	mov	r0, r1
 800b19c:	4611      	mov	r1, r2
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	70fb      	strb	r3, [r7, #3]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70bb      	strb	r3, [r7, #2]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1ba:	787c      	ldrb	r4, [r7, #1]
 800b1bc:	78ba      	ldrb	r2, [r7, #2]
 800b1be:	78f9      	ldrb	r1, [r7, #3]
 800b1c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b1c4:	9303      	str	r3, [sp, #12]
 800b1c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1c8:	9302      	str	r3, [sp, #8]
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	f7f7 fe1b 	bl	8002e10 <HAL_HCD_HC_SubmitRequest>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f86d 	bl	800b2c0 <USBH_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd90      	pop	{r4, r7, pc}

0800b1f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f8 f8af 	bl	800336e <HAL_HCD_HC_GetURBState>
 800b210:	4603      	mov	r3, r0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	4618      	mov	r0, r3
 800b234:	f000 f870 	bl	800b318 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b238:	20c8      	movs	r0, #200	; 0xc8
 800b23a:	f7f6 fecf 	bl	8001fdc <HAL_Delay>
  return USBH_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
 800b254:	4613      	mov	r3, r2
 800b256:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b25e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	212c      	movs	r1, #44	; 0x2c
 800b266:	fb01 f303 	mul.w	r3, r1, r3
 800b26a:	4413      	add	r3, r2
 800b26c:	333b      	adds	r3, #59	; 0x3b
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d009      	beq.n	800b288 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	212c      	movs	r1, #44	; 0x2c
 800b27a:	fb01 f303 	mul.w	r3, r1, r3
 800b27e:	4413      	add	r3, r2
 800b280:	3354      	adds	r3, #84	; 0x54
 800b282:	78ba      	ldrb	r2, [r7, #2]
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e008      	b.n	800b29a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	212c      	movs	r1, #44	; 0x2c
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	4413      	add	r3, r2
 800b294:	3355      	adds	r3, #85	; 0x55
 800b296:	78ba      	ldrb	r2, [r7, #2]
 800b298:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7f6 fe93 	bl	8001fdc <HAL_Delay>
}
 800b2b6:	bf00      	nop
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d817      	bhi.n	800b304 <USBH_Get_USB_Status+0x44>
 800b2d4:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <USBH_Get_USB_Status+0x1c>)
 800b2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2da:	bf00      	nop
 800b2dc:	0800b2ed 	.word	0x0800b2ed
 800b2e0:	0800b2f3 	.word	0x0800b2f3
 800b2e4:	0800b2f9 	.word	0x0800b2f9
 800b2e8:	0800b2ff 	.word	0x0800b2ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f0:	e00b      	b.n	800b30a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f6:	e008      	b.n	800b30a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fc:	e005      	b.n	800b30a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b2fe:	2302      	movs	r3, #2
 800b300:	73fb      	strb	r3, [r7, #15]
    break;
 800b302:	e002      	b.n	800b30a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b304:	2302      	movs	r3, #2
 800b306:	73fb      	strb	r3, [r7, #15]
    break;
 800b308:	bf00      	nop
  }
  return usb_status;
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b322:	79fb      	ldrb	r3, [r7, #7]
 800b324:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b32c:	2300      	movs	r3, #0
 800b32e:	73fb      	strb	r3, [r7, #15]
 800b330:	e001      	b.n	800b336 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b332:	2301      	movs	r3, #1
 800b334:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	461a      	mov	r2, r3
 800b33a:	2101      	movs	r1, #1
 800b33c:	4803      	ldr	r0, [pc, #12]	; (800b34c <MX_DriverVbusFS+0x34>)
 800b33e:	f7f7 fc39 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	40020800 	.word	0x40020800

0800b350 <malloc>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <malloc+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f000 b82b 	b.w	800b3b0 <_malloc_r>
 800b35a:	bf00      	nop
 800b35c:	20000084 	.word	0x20000084

0800b360 <free>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <free+0xc>)
 800b362:	4601      	mov	r1, r0
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f001 be29 	b.w	800cfbc <_free_r>
 800b36a:	bf00      	nop
 800b36c:	20000084 	.word	0x20000084

0800b370 <sbrk_aligned>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4e0e      	ldr	r6, [pc, #56]	; (800b3ac <sbrk_aligned+0x3c>)
 800b374:	460c      	mov	r4, r1
 800b376:	6831      	ldr	r1, [r6, #0]
 800b378:	4605      	mov	r5, r0
 800b37a:	b911      	cbnz	r1, 800b382 <sbrk_aligned+0x12>
 800b37c:	f000 ff52 	bl	800c224 <_sbrk_r>
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 ff4d 	bl	800c224 <_sbrk_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d00a      	beq.n	800b3a4 <sbrk_aligned+0x34>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d007      	beq.n	800b3a8 <sbrk_aligned+0x38>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 ff42 	bl	800c224 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d101      	bne.n	800b3a8 <sbrk_aligned+0x38>
 800b3a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	20000aac 	.word	0x20000aac

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d905      	bls.n	800b3d8 <_malloc_r+0x28>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4ac <_malloc_r+0xfc>
 800b3dc:	f000 f868 	bl	800b4b0 <__malloc_lock>
 800b3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3e4:	461c      	mov	r4, r3
 800b3e6:	bb5c      	cbnz	r4, 800b440 <_malloc_r+0x90>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ffc0 	bl	800b370 <sbrk_aligned>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	d155      	bne.n	800b4a2 <_malloc_r+0xf2>
 800b3f6:	f8d8 4000 	ldr.w	r4, [r8]
 800b3fa:	4626      	mov	r6, r4
 800b3fc:	2e00      	cmp	r6, #0
 800b3fe:	d145      	bne.n	800b48c <_malloc_r+0xdc>
 800b400:	2c00      	cmp	r4, #0
 800b402:	d048      	beq.n	800b496 <_malloc_r+0xe6>
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	4631      	mov	r1, r6
 800b408:	4638      	mov	r0, r7
 800b40a:	eb04 0903 	add.w	r9, r4, r3
 800b40e:	f000 ff09 	bl	800c224 <_sbrk_r>
 800b412:	4581      	cmp	r9, r0
 800b414:	d13f      	bne.n	800b496 <_malloc_r+0xe6>
 800b416:	6821      	ldr	r1, [r4, #0]
 800b418:	1a6d      	subs	r5, r5, r1
 800b41a:	4629      	mov	r1, r5
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff ffa7 	bl	800b370 <sbrk_aligned>
 800b422:	3001      	adds	r0, #1
 800b424:	d037      	beq.n	800b496 <_malloc_r+0xe6>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	442b      	add	r3, r5
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	f8d8 3000 	ldr.w	r3, [r8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d038      	beq.n	800b4a6 <_malloc_r+0xf6>
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	42a2      	cmp	r2, r4
 800b438:	d12b      	bne.n	800b492 <_malloc_r+0xe2>
 800b43a:	2200      	movs	r2, #0
 800b43c:	605a      	str	r2, [r3, #4]
 800b43e:	e00f      	b.n	800b460 <_malloc_r+0xb0>
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	1b52      	subs	r2, r2, r5
 800b444:	d41f      	bmi.n	800b486 <_malloc_r+0xd6>
 800b446:	2a0b      	cmp	r2, #11
 800b448:	d917      	bls.n	800b47a <_malloc_r+0xca>
 800b44a:	1961      	adds	r1, r4, r5
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	6025      	str	r5, [r4, #0]
 800b450:	bf18      	it	ne
 800b452:	6059      	strne	r1, [r3, #4]
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	bf08      	it	eq
 800b458:	f8c8 1000 	streq.w	r1, [r8]
 800b45c:	5162      	str	r2, [r4, r5]
 800b45e:	604b      	str	r3, [r1, #4]
 800b460:	4638      	mov	r0, r7
 800b462:	f104 060b 	add.w	r6, r4, #11
 800b466:	f000 f829 	bl	800b4bc <__malloc_unlock>
 800b46a:	f026 0607 	bic.w	r6, r6, #7
 800b46e:	1d23      	adds	r3, r4, #4
 800b470:	1af2      	subs	r2, r6, r3
 800b472:	d0ae      	beq.n	800b3d2 <_malloc_r+0x22>
 800b474:	1b9b      	subs	r3, r3, r6
 800b476:	50a3      	str	r3, [r4, r2]
 800b478:	e7ab      	b.n	800b3d2 <_malloc_r+0x22>
 800b47a:	42a3      	cmp	r3, r4
 800b47c:	6862      	ldr	r2, [r4, #4]
 800b47e:	d1dd      	bne.n	800b43c <_malloc_r+0x8c>
 800b480:	f8c8 2000 	str.w	r2, [r8]
 800b484:	e7ec      	b.n	800b460 <_malloc_r+0xb0>
 800b486:	4623      	mov	r3, r4
 800b488:	6864      	ldr	r4, [r4, #4]
 800b48a:	e7ac      	b.n	800b3e6 <_malloc_r+0x36>
 800b48c:	4634      	mov	r4, r6
 800b48e:	6876      	ldr	r6, [r6, #4]
 800b490:	e7b4      	b.n	800b3fc <_malloc_r+0x4c>
 800b492:	4613      	mov	r3, r2
 800b494:	e7cc      	b.n	800b430 <_malloc_r+0x80>
 800b496:	230c      	movs	r3, #12
 800b498:	603b      	str	r3, [r7, #0]
 800b49a:	4638      	mov	r0, r7
 800b49c:	f000 f80e 	bl	800b4bc <__malloc_unlock>
 800b4a0:	e797      	b.n	800b3d2 <_malloc_r+0x22>
 800b4a2:	6025      	str	r5, [r4, #0]
 800b4a4:	e7dc      	b.n	800b460 <_malloc_r+0xb0>
 800b4a6:	605b      	str	r3, [r3, #4]
 800b4a8:	deff      	udf	#255	; 0xff
 800b4aa:	bf00      	nop
 800b4ac:	20000aa8 	.word	0x20000aa8

0800b4b0 <__malloc_lock>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__malloc_lock+0x8>)
 800b4b2:	f000 bf04 	b.w	800c2be <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20000bf0 	.word	0x20000bf0

0800b4bc <__malloc_unlock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__malloc_unlock+0x8>)
 800b4be:	f000 beff 	b.w	800c2c0 <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20000bf0 	.word	0x20000bf0

0800b4c8 <__cvt>:
 800b4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	ec55 4b10 	vmov	r4, r5, d0
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	bfbb      	ittet	lt
 800b4da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4de:	461d      	movlt	r5, r3
 800b4e0:	2300      	movge	r3, #0
 800b4e2:	232d      	movlt	r3, #45	; 0x2d
 800b4e4:	700b      	strb	r3, [r1, #0]
 800b4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4ec:	4691      	mov	r9, r2
 800b4ee:	f023 0820 	bic.w	r8, r3, #32
 800b4f2:	bfbc      	itt	lt
 800b4f4:	4622      	movlt	r2, r4
 800b4f6:	4614      	movlt	r4, r2
 800b4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4fc:	d005      	beq.n	800b50a <__cvt+0x42>
 800b4fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b502:	d100      	bne.n	800b506 <__cvt+0x3e>
 800b504:	3601      	adds	r6, #1
 800b506:	2102      	movs	r1, #2
 800b508:	e000      	b.n	800b50c <__cvt+0x44>
 800b50a:	2103      	movs	r1, #3
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	ab02      	add	r3, sp, #8
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	ec45 4b10 	vmov	d0, r4, r5
 800b518:	4653      	mov	r3, sl
 800b51a:	4632      	mov	r2, r6
 800b51c:	f000 ff5c 	bl	800c3d8 <_dtoa_r>
 800b520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b524:	4607      	mov	r7, r0
 800b526:	d102      	bne.n	800b52e <__cvt+0x66>
 800b528:	f019 0f01 	tst.w	r9, #1
 800b52c:	d022      	beq.n	800b574 <__cvt+0xac>
 800b52e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b532:	eb07 0906 	add.w	r9, r7, r6
 800b536:	d110      	bne.n	800b55a <__cvt+0x92>
 800b538:	783b      	ldrb	r3, [r7, #0]
 800b53a:	2b30      	cmp	r3, #48	; 0x30
 800b53c:	d10a      	bne.n	800b554 <__cvt+0x8c>
 800b53e:	2200      	movs	r2, #0
 800b540:	2300      	movs	r3, #0
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f5 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b54a:	b918      	cbnz	r0, 800b554 <__cvt+0x8c>
 800b54c:	f1c6 0601 	rsb	r6, r6, #1
 800b550:	f8ca 6000 	str.w	r6, [sl]
 800b554:	f8da 3000 	ldr.w	r3, [sl]
 800b558:	4499      	add	r9, r3
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f5 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b566:	b108      	cbz	r0, 800b56c <__cvt+0xa4>
 800b568:	f8cd 900c 	str.w	r9, [sp, #12]
 800b56c:	2230      	movs	r2, #48	; 0x30
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	454b      	cmp	r3, r9
 800b572:	d307      	bcc.n	800b584 <__cvt+0xbc>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b578:	1bdb      	subs	r3, r3, r7
 800b57a:	4638      	mov	r0, r7
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	b004      	add	sp, #16
 800b580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b584:	1c59      	adds	r1, r3, #1
 800b586:	9103      	str	r1, [sp, #12]
 800b588:	701a      	strb	r2, [r3, #0]
 800b58a:	e7f0      	b.n	800b56e <__cvt+0xa6>

0800b58c <__exponent>:
 800b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b58e:	4603      	mov	r3, r0
 800b590:	2900      	cmp	r1, #0
 800b592:	bfb8      	it	lt
 800b594:	4249      	neglt	r1, r1
 800b596:	f803 2b02 	strb.w	r2, [r3], #2
 800b59a:	bfb4      	ite	lt
 800b59c:	222d      	movlt	r2, #45	; 0x2d
 800b59e:	222b      	movge	r2, #43	; 0x2b
 800b5a0:	2909      	cmp	r1, #9
 800b5a2:	7042      	strb	r2, [r0, #1]
 800b5a4:	dd2a      	ble.n	800b5fc <__exponent+0x70>
 800b5a6:	f10d 0207 	add.w	r2, sp, #7
 800b5aa:	4617      	mov	r7, r2
 800b5ac:	260a      	movs	r6, #10
 800b5ae:	4694      	mov	ip, r2
 800b5b0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b5b4:	fb06 1415 	mls	r4, r6, r5, r1
 800b5b8:	3430      	adds	r4, #48	; 0x30
 800b5ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b5be:	460c      	mov	r4, r1
 800b5c0:	2c63      	cmp	r4, #99	; 0x63
 800b5c2:	f102 32ff 	add.w	r2, r2, #4294967295
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	dcf1      	bgt.n	800b5ae <__exponent+0x22>
 800b5ca:	3130      	adds	r1, #48	; 0x30
 800b5cc:	f1ac 0402 	sub.w	r4, ip, #2
 800b5d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b5d4:	1c41      	adds	r1, r0, #1
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	42ba      	cmp	r2, r7
 800b5da:	d30a      	bcc.n	800b5f2 <__exponent+0x66>
 800b5dc:	f10d 0209 	add.w	r2, sp, #9
 800b5e0:	eba2 020c 	sub.w	r2, r2, ip
 800b5e4:	42bc      	cmp	r4, r7
 800b5e6:	bf88      	it	hi
 800b5e8:	2200      	movhi	r2, #0
 800b5ea:	4413      	add	r3, r2
 800b5ec:	1a18      	subs	r0, r3, r0
 800b5ee:	b003      	add	sp, #12
 800b5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b5f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b5fa:	e7ed      	b.n	800b5d8 <__exponent+0x4c>
 800b5fc:	2330      	movs	r3, #48	; 0x30
 800b5fe:	3130      	adds	r1, #48	; 0x30
 800b600:	7083      	strb	r3, [r0, #2]
 800b602:	70c1      	strb	r1, [r0, #3]
 800b604:	1d03      	adds	r3, r0, #4
 800b606:	e7f1      	b.n	800b5ec <__exponent+0x60>

0800b608 <_printf_float>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	ed2d 8b02 	vpush	{d8}
 800b610:	b08d      	sub	sp, #52	; 0x34
 800b612:	460c      	mov	r4, r1
 800b614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b618:	4616      	mov	r6, r2
 800b61a:	461f      	mov	r7, r3
 800b61c:	4605      	mov	r5, r0
 800b61e:	f000 fdc9 	bl	800c1b4 <_localeconv_r>
 800b622:	f8d0 a000 	ldr.w	sl, [r0]
 800b626:	4650      	mov	r0, sl
 800b628:	f7f4 fe22 	bl	8000270 <strlen>
 800b62c:	2300      	movs	r3, #0
 800b62e:	930a      	str	r3, [sp, #40]	; 0x28
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	f8d8 3000 	ldr.w	r3, [r8]
 800b638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b63c:	3307      	adds	r3, #7
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	f103 0208 	add.w	r2, r3, #8
 800b646:	f8c8 2000 	str.w	r2, [r8]
 800b64a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b64e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	f8cd 8018 	str.w	r8, [sp, #24]
 800b658:	ee08 0a10 	vmov	s16, r0
 800b65c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b664:	4b9e      	ldr	r3, [pc, #632]	; (800b8e0 <_printf_float+0x2d8>)
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	f7f5 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800b66e:	bb88      	cbnz	r0, 800b6d4 <_printf_float+0xcc>
 800b670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b674:	4b9a      	ldr	r3, [pc, #616]	; (800b8e0 <_printf_float+0x2d8>)
 800b676:	f04f 32ff 	mov.w	r2, #4294967295
 800b67a:	f7f5 fa39 	bl	8000af0 <__aeabi_dcmple>
 800b67e:	bb48      	cbnz	r0, 800b6d4 <_printf_float+0xcc>
 800b680:	2200      	movs	r2, #0
 800b682:	2300      	movs	r3, #0
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f7f5 fa28 	bl	8000adc <__aeabi_dcmplt>
 800b68c:	b110      	cbz	r0, 800b694 <_printf_float+0x8c>
 800b68e:	232d      	movs	r3, #45	; 0x2d
 800b690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b694:	4a93      	ldr	r2, [pc, #588]	; (800b8e4 <_printf_float+0x2dc>)
 800b696:	4b94      	ldr	r3, [pc, #592]	; (800b8e8 <_printf_float+0x2e0>)
 800b698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b69c:	bf94      	ite	ls
 800b69e:	4690      	movls	r8, r2
 800b6a0:	4698      	movhi	r8, r3
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	9b05      	ldr	r3, [sp, #20]
 800b6a8:	f023 0304 	bic.w	r3, r3, #4
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	f04f 0900 	mov.w	r9, #0
 800b6b2:	9700      	str	r7, [sp, #0]
 800b6b4:	4633      	mov	r3, r6
 800b6b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 f9da 	bl	800ba74 <_printf_common>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f040 8090 	bne.w	800b7e6 <_printf_float+0x1de>
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	b00d      	add	sp, #52	; 0x34
 800b6cc:	ecbd 8b02 	vpop	{d8}
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f5 fa26 	bl	8000b2c <__aeabi_dcmpun>
 800b6e0:	b140      	cbz	r0, 800b6f4 <_printf_float+0xec>
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bfbc      	itt	lt
 800b6e8:	232d      	movlt	r3, #45	; 0x2d
 800b6ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6ee:	4a7f      	ldr	r2, [pc, #508]	; (800b8ec <_printf_float+0x2e4>)
 800b6f0:	4b7f      	ldr	r3, [pc, #508]	; (800b8f0 <_printf_float+0x2e8>)
 800b6f2:	e7d1      	b.n	800b698 <_printf_float+0x90>
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6fa:	9206      	str	r2, [sp, #24]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	d13f      	bne.n	800b780 <_printf_float+0x178>
 800b700:	2306      	movs	r3, #6
 800b702:	6063      	str	r3, [r4, #4]
 800b704:	9b05      	ldr	r3, [sp, #20]
 800b706:	6861      	ldr	r1, [r4, #4]
 800b708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b70c:	2300      	movs	r3, #0
 800b70e:	9303      	str	r3, [sp, #12]
 800b710:	ab0a      	add	r3, sp, #40	; 0x28
 800b712:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b716:	ab09      	add	r3, sp, #36	; 0x24
 800b718:	ec49 8b10 	vmov	d0, r8, r9
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	6022      	str	r2, [r4, #0]
 800b720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b724:	4628      	mov	r0, r5
 800b726:	f7ff fecf 	bl	800b4c8 <__cvt>
 800b72a:	9b06      	ldr	r3, [sp, #24]
 800b72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b72e:	2b47      	cmp	r3, #71	; 0x47
 800b730:	4680      	mov	r8, r0
 800b732:	d108      	bne.n	800b746 <_printf_float+0x13e>
 800b734:	1cc8      	adds	r0, r1, #3
 800b736:	db02      	blt.n	800b73e <_printf_float+0x136>
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	4299      	cmp	r1, r3
 800b73c:	dd41      	ble.n	800b7c2 <_printf_float+0x1ba>
 800b73e:	f1ab 0302 	sub.w	r3, fp, #2
 800b742:	fa5f fb83 	uxtb.w	fp, r3
 800b746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b74a:	d820      	bhi.n	800b78e <_printf_float+0x186>
 800b74c:	3901      	subs	r1, #1
 800b74e:	465a      	mov	r2, fp
 800b750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b754:	9109      	str	r1, [sp, #36]	; 0x24
 800b756:	f7ff ff19 	bl	800b58c <__exponent>
 800b75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b75c:	1813      	adds	r3, r2, r0
 800b75e:	2a01      	cmp	r2, #1
 800b760:	4681      	mov	r9, r0
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	dc02      	bgt.n	800b76c <_printf_float+0x164>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	07d2      	lsls	r2, r2, #31
 800b76a:	d501      	bpl.n	800b770 <_printf_float+0x168>
 800b76c:	3301      	adds	r3, #1
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b774:	2b00      	cmp	r3, #0
 800b776:	d09c      	beq.n	800b6b2 <_printf_float+0xaa>
 800b778:	232d      	movs	r3, #45	; 0x2d
 800b77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b77e:	e798      	b.n	800b6b2 <_printf_float+0xaa>
 800b780:	9a06      	ldr	r2, [sp, #24]
 800b782:	2a47      	cmp	r2, #71	; 0x47
 800b784:	d1be      	bne.n	800b704 <_printf_float+0xfc>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1bc      	bne.n	800b704 <_printf_float+0xfc>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7b9      	b.n	800b702 <_printf_float+0xfa>
 800b78e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b792:	d118      	bne.n	800b7c6 <_printf_float+0x1be>
 800b794:	2900      	cmp	r1, #0
 800b796:	6863      	ldr	r3, [r4, #4]
 800b798:	dd0b      	ble.n	800b7b2 <_printf_float+0x1aa>
 800b79a:	6121      	str	r1, [r4, #16]
 800b79c:	b913      	cbnz	r3, 800b7a4 <_printf_float+0x19c>
 800b79e:	6822      	ldr	r2, [r4, #0]
 800b7a0:	07d0      	lsls	r0, r2, #31
 800b7a2:	d502      	bpl.n	800b7aa <_printf_float+0x1a2>
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	440b      	add	r3, r1
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7ac:	f04f 0900 	mov.w	r9, #0
 800b7b0:	e7de      	b.n	800b770 <_printf_float+0x168>
 800b7b2:	b913      	cbnz	r3, 800b7ba <_printf_float+0x1b2>
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	07d2      	lsls	r2, r2, #31
 800b7b8:	d501      	bpl.n	800b7be <_printf_float+0x1b6>
 800b7ba:	3302      	adds	r3, #2
 800b7bc:	e7f4      	b.n	800b7a8 <_printf_float+0x1a0>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e7f2      	b.n	800b7a8 <_printf_float+0x1a0>
 800b7c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	db05      	blt.n	800b7d8 <_printf_float+0x1d0>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	6121      	str	r1, [r4, #16]
 800b7d0:	07d8      	lsls	r0, r3, #31
 800b7d2:	d5ea      	bpl.n	800b7aa <_printf_float+0x1a2>
 800b7d4:	1c4b      	adds	r3, r1, #1
 800b7d6:	e7e7      	b.n	800b7a8 <_printf_float+0x1a0>
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	bfd4      	ite	le
 800b7dc:	f1c1 0202 	rsble	r2, r1, #2
 800b7e0:	2201      	movgt	r2, #1
 800b7e2:	4413      	add	r3, r2
 800b7e4:	e7e0      	b.n	800b7a8 <_printf_float+0x1a0>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	055a      	lsls	r2, r3, #21
 800b7ea:	d407      	bmi.n	800b7fc <_printf_float+0x1f4>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d12c      	bne.n	800b854 <_printf_float+0x24c>
 800b7fa:	e764      	b.n	800b6c6 <_printf_float+0xbe>
 800b7fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b800:	f240 80e0 	bls.w	800b9c4 <_printf_float+0x3bc>
 800b804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	f7f5 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b810:	2800      	cmp	r0, #0
 800b812:	d034      	beq.n	800b87e <_printf_float+0x276>
 800b814:	4a37      	ldr	r2, [pc, #220]	; (800b8f4 <_printf_float+0x2ec>)
 800b816:	2301      	movs	r3, #1
 800b818:	4631      	mov	r1, r6
 800b81a:	4628      	mov	r0, r5
 800b81c:	47b8      	blx	r7
 800b81e:	3001      	adds	r0, #1
 800b820:	f43f af51 	beq.w	800b6c6 <_printf_float+0xbe>
 800b824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b828:	429a      	cmp	r2, r3
 800b82a:	db02      	blt.n	800b832 <_printf_float+0x22a>
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	07d8      	lsls	r0, r3, #31
 800b830:	d510      	bpl.n	800b854 <_printf_float+0x24c>
 800b832:	ee18 3a10 	vmov	r3, s16
 800b836:	4652      	mov	r2, sl
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af41 	beq.w	800b6c6 <_printf_float+0xbe>
 800b844:	f04f 0800 	mov.w	r8, #0
 800b848:	f104 091a 	add.w	r9, r4, #26
 800b84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84e:	3b01      	subs	r3, #1
 800b850:	4543      	cmp	r3, r8
 800b852:	dc09      	bgt.n	800b868 <_printf_float+0x260>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	079b      	lsls	r3, r3, #30
 800b858:	f100 8107 	bmi.w	800ba6a <_printf_float+0x462>
 800b85c:	68e0      	ldr	r0, [r4, #12]
 800b85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b860:	4298      	cmp	r0, r3
 800b862:	bfb8      	it	lt
 800b864:	4618      	movlt	r0, r3
 800b866:	e730      	b.n	800b6ca <_printf_float+0xc2>
 800b868:	2301      	movs	r3, #1
 800b86a:	464a      	mov	r2, r9
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f af27 	beq.w	800b6c6 <_printf_float+0xbe>
 800b878:	f108 0801 	add.w	r8, r8, #1
 800b87c:	e7e6      	b.n	800b84c <_printf_float+0x244>
 800b87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	dc39      	bgt.n	800b8f8 <_printf_float+0x2f0>
 800b884:	4a1b      	ldr	r2, [pc, #108]	; (800b8f4 <_printf_float+0x2ec>)
 800b886:	2301      	movs	r3, #1
 800b888:	4631      	mov	r1, r6
 800b88a:	4628      	mov	r0, r5
 800b88c:	47b8      	blx	r7
 800b88e:	3001      	adds	r0, #1
 800b890:	f43f af19 	beq.w	800b6c6 <_printf_float+0xbe>
 800b894:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b898:	4313      	orrs	r3, r2
 800b89a:	d102      	bne.n	800b8a2 <_printf_float+0x29a>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	07d9      	lsls	r1, r3, #31
 800b8a0:	d5d8      	bpl.n	800b854 <_printf_float+0x24c>
 800b8a2:	ee18 3a10 	vmov	r3, s16
 800b8a6:	4652      	mov	r2, sl
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	47b8      	blx	r7
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f43f af09 	beq.w	800b6c6 <_printf_float+0xbe>
 800b8b4:	f04f 0900 	mov.w	r9, #0
 800b8b8:	f104 0a1a 	add.w	sl, r4, #26
 800b8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8be:	425b      	negs	r3, r3
 800b8c0:	454b      	cmp	r3, r9
 800b8c2:	dc01      	bgt.n	800b8c8 <_printf_float+0x2c0>
 800b8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c6:	e792      	b.n	800b7ee <_printf_float+0x1e6>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f43f aef7 	beq.w	800b6c6 <_printf_float+0xbe>
 800b8d8:	f109 0901 	add.w	r9, r9, #1
 800b8dc:	e7ee      	b.n	800b8bc <_printf_float+0x2b4>
 800b8de:	bf00      	nop
 800b8e0:	7fefffff 	.word	0x7fefffff
 800b8e4:	0800df8c 	.word	0x0800df8c
 800b8e8:	0800df90 	.word	0x0800df90
 800b8ec:	0800df94 	.word	0x0800df94
 800b8f0:	0800df98 	.word	0x0800df98
 800b8f4:	0800df9c 	.word	0x0800df9c
 800b8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	bfa8      	it	ge
 800b900:	461a      	movge	r2, r3
 800b902:	2a00      	cmp	r2, #0
 800b904:	4691      	mov	r9, r2
 800b906:	dc37      	bgt.n	800b978 <_printf_float+0x370>
 800b908:	f04f 0b00 	mov.w	fp, #0
 800b90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b910:	f104 021a 	add.w	r2, r4, #26
 800b914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b916:	9305      	str	r3, [sp, #20]
 800b918:	eba3 0309 	sub.w	r3, r3, r9
 800b91c:	455b      	cmp	r3, fp
 800b91e:	dc33      	bgt.n	800b988 <_printf_float+0x380>
 800b920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b924:	429a      	cmp	r2, r3
 800b926:	db3b      	blt.n	800b9a0 <_printf_float+0x398>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	07da      	lsls	r2, r3, #31
 800b92c:	d438      	bmi.n	800b9a0 <_printf_float+0x398>
 800b92e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b932:	eba2 0903 	sub.w	r9, r2, r3
 800b936:	9b05      	ldr	r3, [sp, #20]
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	4591      	cmp	r9, r2
 800b93c:	bfa8      	it	ge
 800b93e:	4691      	movge	r9, r2
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	dc35      	bgt.n	800b9b2 <_printf_float+0x3aa>
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b94e:	f104 0a1a 	add.w	sl, r4, #26
 800b952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	eba3 0309 	sub.w	r3, r3, r9
 800b95c:	4543      	cmp	r3, r8
 800b95e:	f77f af79 	ble.w	800b854 <_printf_float+0x24c>
 800b962:	2301      	movs	r3, #1
 800b964:	4652      	mov	r2, sl
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f aeaa 	beq.w	800b6c6 <_printf_float+0xbe>
 800b972:	f108 0801 	add.w	r8, r8, #1
 800b976:	e7ec      	b.n	800b952 <_printf_float+0x34a>
 800b978:	4613      	mov	r3, r2
 800b97a:	4631      	mov	r1, r6
 800b97c:	4642      	mov	r2, r8
 800b97e:	4628      	mov	r0, r5
 800b980:	47b8      	blx	r7
 800b982:	3001      	adds	r0, #1
 800b984:	d1c0      	bne.n	800b908 <_printf_float+0x300>
 800b986:	e69e      	b.n	800b6c6 <_printf_float+0xbe>
 800b988:	2301      	movs	r3, #1
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	9205      	str	r2, [sp, #20]
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f ae97 	beq.w	800b6c6 <_printf_float+0xbe>
 800b998:	9a05      	ldr	r2, [sp, #20]
 800b99a:	f10b 0b01 	add.w	fp, fp, #1
 800b99e:	e7b9      	b.n	800b914 <_printf_float+0x30c>
 800b9a0:	ee18 3a10 	vmov	r3, s16
 800b9a4:	4652      	mov	r2, sl
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b8      	blx	r7
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d1be      	bne.n	800b92e <_printf_float+0x326>
 800b9b0:	e689      	b.n	800b6c6 <_printf_float+0xbe>
 800b9b2:	9a05      	ldr	r2, [sp, #20]
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	4442      	add	r2, r8
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b8      	blx	r7
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d1c1      	bne.n	800b946 <_printf_float+0x33e>
 800b9c2:	e680      	b.n	800b6c6 <_printf_float+0xbe>
 800b9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9c6:	2a01      	cmp	r2, #1
 800b9c8:	dc01      	bgt.n	800b9ce <_printf_float+0x3c6>
 800b9ca:	07db      	lsls	r3, r3, #31
 800b9cc:	d53a      	bpl.n	800ba44 <_printf_float+0x43c>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f ae74 	beq.w	800b6c6 <_printf_float+0xbe>
 800b9de:	ee18 3a10 	vmov	r3, s16
 800b9e2:	4652      	mov	r2, sl
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f ae6b 	beq.w	800b6c6 <_printf_float+0xbe>
 800b9f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b9fc:	f7f5 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba00:	b9d8      	cbnz	r0, 800ba3a <_printf_float+0x432>
 800ba02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ba06:	f108 0201 	add.w	r2, r8, #1
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	d10e      	bne.n	800ba32 <_printf_float+0x42a>
 800ba14:	e657      	b.n	800b6c6 <_printf_float+0xbe>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4652      	mov	r2, sl
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f ae50 	beq.w	800b6c6 <_printf_float+0xbe>
 800ba26:	f108 0801 	add.w	r8, r8, #1
 800ba2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4543      	cmp	r3, r8
 800ba30:	dcf1      	bgt.n	800ba16 <_printf_float+0x40e>
 800ba32:	464b      	mov	r3, r9
 800ba34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba38:	e6da      	b.n	800b7f0 <_printf_float+0x1e8>
 800ba3a:	f04f 0800 	mov.w	r8, #0
 800ba3e:	f104 0a1a 	add.w	sl, r4, #26
 800ba42:	e7f2      	b.n	800ba2a <_printf_float+0x422>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4642      	mov	r2, r8
 800ba48:	e7df      	b.n	800ba0a <_printf_float+0x402>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	464a      	mov	r2, r9
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b8      	blx	r7
 800ba54:	3001      	adds	r0, #1
 800ba56:	f43f ae36 	beq.w	800b6c6 <_printf_float+0xbe>
 800ba5a:	f108 0801 	add.w	r8, r8, #1
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba62:	1a5b      	subs	r3, r3, r1
 800ba64:	4543      	cmp	r3, r8
 800ba66:	dcf0      	bgt.n	800ba4a <_printf_float+0x442>
 800ba68:	e6f8      	b.n	800b85c <_printf_float+0x254>
 800ba6a:	f04f 0800 	mov.w	r8, #0
 800ba6e:	f104 0919 	add.w	r9, r4, #25
 800ba72:	e7f4      	b.n	800ba5e <_printf_float+0x456>

0800ba74 <_printf_common>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	4616      	mov	r6, r2
 800ba7a:	4699      	mov	r9, r3
 800ba7c:	688a      	ldr	r2, [r1, #8]
 800ba7e:	690b      	ldr	r3, [r1, #16]
 800ba80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba84:	4293      	cmp	r3, r2
 800ba86:	bfb8      	it	lt
 800ba88:	4613      	movlt	r3, r2
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba90:	4607      	mov	r7, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	b10a      	cbz	r2, 800ba9a <_printf_common+0x26>
 800ba96:	3301      	adds	r3, #1
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	0699      	lsls	r1, r3, #26
 800ba9e:	bf42      	ittt	mi
 800baa0:	6833      	ldrmi	r3, [r6, #0]
 800baa2:	3302      	addmi	r3, #2
 800baa4:	6033      	strmi	r3, [r6, #0]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	f015 0506 	ands.w	r5, r5, #6
 800baac:	d106      	bne.n	800babc <_printf_common+0x48>
 800baae:	f104 0a19 	add.w	sl, r4, #25
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	6832      	ldr	r2, [r6, #0]
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	42ab      	cmp	r3, r5
 800baba:	dc26      	bgt.n	800bb0a <_printf_common+0x96>
 800babc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac0:	1e13      	subs	r3, r2, #0
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	bf18      	it	ne
 800bac6:	2301      	movne	r3, #1
 800bac8:	0692      	lsls	r2, r2, #26
 800baca:	d42b      	bmi.n	800bb24 <_printf_common+0xb0>
 800bacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad0:	4649      	mov	r1, r9
 800bad2:	4638      	mov	r0, r7
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d01e      	beq.n	800bb18 <_printf_common+0xa4>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	6922      	ldr	r2, [r4, #16]
 800bade:	f003 0306 	and.w	r3, r3, #6
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	bf02      	ittt	eq
 800bae6:	68e5      	ldreq	r5, [r4, #12]
 800bae8:	6833      	ldreq	r3, [r6, #0]
 800baea:	1aed      	subeq	r5, r5, r3
 800baec:	68a3      	ldr	r3, [r4, #8]
 800baee:	bf0c      	ite	eq
 800baf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf4:	2500      	movne	r5, #0
 800baf6:	4293      	cmp	r3, r2
 800baf8:	bfc4      	itt	gt
 800bafa:	1a9b      	subgt	r3, r3, r2
 800bafc:	18ed      	addgt	r5, r5, r3
 800bafe:	2600      	movs	r6, #0
 800bb00:	341a      	adds	r4, #26
 800bb02:	42b5      	cmp	r5, r6
 800bb04:	d11a      	bne.n	800bb3c <_printf_common+0xc8>
 800bb06:	2000      	movs	r0, #0
 800bb08:	e008      	b.n	800bb1c <_printf_common+0xa8>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4638      	mov	r0, r7
 800bb12:	47c0      	blx	r8
 800bb14:	3001      	adds	r0, #1
 800bb16:	d103      	bne.n	800bb20 <_printf_common+0xac>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb20:	3501      	adds	r5, #1
 800bb22:	e7c6      	b.n	800bab2 <_printf_common+0x3e>
 800bb24:	18e1      	adds	r1, r4, r3
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	2030      	movs	r0, #48	; 0x30
 800bb2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb2e:	4422      	add	r2, r4
 800bb30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb38:	3302      	adds	r3, #2
 800bb3a:	e7c7      	b.n	800bacc <_printf_common+0x58>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4649      	mov	r1, r9
 800bb42:	4638      	mov	r0, r7
 800bb44:	47c0      	blx	r8
 800bb46:	3001      	adds	r0, #1
 800bb48:	d0e6      	beq.n	800bb18 <_printf_common+0xa4>
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	e7d9      	b.n	800bb02 <_printf_common+0x8e>
	...

0800bb50 <_printf_i>:
 800bb50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb54:	7e0f      	ldrb	r7, [r1, #24]
 800bb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb58:	2f78      	cmp	r7, #120	; 0x78
 800bb5a:	4691      	mov	r9, r2
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	469a      	mov	sl, r3
 800bb62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb66:	d807      	bhi.n	800bb78 <_printf_i+0x28>
 800bb68:	2f62      	cmp	r7, #98	; 0x62
 800bb6a:	d80a      	bhi.n	800bb82 <_printf_i+0x32>
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	f000 80d4 	beq.w	800bd1a <_printf_i+0x1ca>
 800bb72:	2f58      	cmp	r7, #88	; 0x58
 800bb74:	f000 80c0 	beq.w	800bcf8 <_printf_i+0x1a8>
 800bb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb80:	e03a      	b.n	800bbf8 <_printf_i+0xa8>
 800bb82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb86:	2b15      	cmp	r3, #21
 800bb88:	d8f6      	bhi.n	800bb78 <_printf_i+0x28>
 800bb8a:	a101      	add	r1, pc, #4	; (adr r1, 800bb90 <_printf_i+0x40>)
 800bb8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb90:	0800bbe9 	.word	0x0800bbe9
 800bb94:	0800bbfd 	.word	0x0800bbfd
 800bb98:	0800bb79 	.word	0x0800bb79
 800bb9c:	0800bb79 	.word	0x0800bb79
 800bba0:	0800bb79 	.word	0x0800bb79
 800bba4:	0800bb79 	.word	0x0800bb79
 800bba8:	0800bbfd 	.word	0x0800bbfd
 800bbac:	0800bb79 	.word	0x0800bb79
 800bbb0:	0800bb79 	.word	0x0800bb79
 800bbb4:	0800bb79 	.word	0x0800bb79
 800bbb8:	0800bb79 	.word	0x0800bb79
 800bbbc:	0800bd01 	.word	0x0800bd01
 800bbc0:	0800bc29 	.word	0x0800bc29
 800bbc4:	0800bcbb 	.word	0x0800bcbb
 800bbc8:	0800bb79 	.word	0x0800bb79
 800bbcc:	0800bb79 	.word	0x0800bb79
 800bbd0:	0800bd23 	.word	0x0800bd23
 800bbd4:	0800bb79 	.word	0x0800bb79
 800bbd8:	0800bc29 	.word	0x0800bc29
 800bbdc:	0800bb79 	.word	0x0800bb79
 800bbe0:	0800bb79 	.word	0x0800bb79
 800bbe4:	0800bcc3 	.word	0x0800bcc3
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	1d1a      	adds	r2, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	602a      	str	r2, [r5, #0]
 800bbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e09f      	b.n	800bd3c <_printf_i+0x1ec>
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	682b      	ldr	r3, [r5, #0]
 800bc00:	0607      	lsls	r7, r0, #24
 800bc02:	f103 0104 	add.w	r1, r3, #4
 800bc06:	6029      	str	r1, [r5, #0]
 800bc08:	d501      	bpl.n	800bc0e <_printf_i+0xbe>
 800bc0a:	681e      	ldr	r6, [r3, #0]
 800bc0c:	e003      	b.n	800bc16 <_printf_i+0xc6>
 800bc0e:	0646      	lsls	r6, r0, #25
 800bc10:	d5fb      	bpl.n	800bc0a <_printf_i+0xba>
 800bc12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	da03      	bge.n	800bc22 <_printf_i+0xd2>
 800bc1a:	232d      	movs	r3, #45	; 0x2d
 800bc1c:	4276      	negs	r6, r6
 800bc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc22:	485a      	ldr	r0, [pc, #360]	; (800bd8c <_printf_i+0x23c>)
 800bc24:	230a      	movs	r3, #10
 800bc26:	e012      	b.n	800bc4e <_printf_i+0xfe>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	6820      	ldr	r0, [r4, #0]
 800bc2c:	1d19      	adds	r1, r3, #4
 800bc2e:	6029      	str	r1, [r5, #0]
 800bc30:	0605      	lsls	r5, r0, #24
 800bc32:	d501      	bpl.n	800bc38 <_printf_i+0xe8>
 800bc34:	681e      	ldr	r6, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <_printf_i+0xee>
 800bc38:	0641      	lsls	r1, r0, #25
 800bc3a:	d5fb      	bpl.n	800bc34 <_printf_i+0xe4>
 800bc3c:	881e      	ldrh	r6, [r3, #0]
 800bc3e:	4853      	ldr	r0, [pc, #332]	; (800bd8c <_printf_i+0x23c>)
 800bc40:	2f6f      	cmp	r7, #111	; 0x6f
 800bc42:	bf0c      	ite	eq
 800bc44:	2308      	moveq	r3, #8
 800bc46:	230a      	movne	r3, #10
 800bc48:	2100      	movs	r1, #0
 800bc4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc4e:	6865      	ldr	r5, [r4, #4]
 800bc50:	60a5      	str	r5, [r4, #8]
 800bc52:	2d00      	cmp	r5, #0
 800bc54:	bfa2      	ittt	ge
 800bc56:	6821      	ldrge	r1, [r4, #0]
 800bc58:	f021 0104 	bicge.w	r1, r1, #4
 800bc5c:	6021      	strge	r1, [r4, #0]
 800bc5e:	b90e      	cbnz	r6, 800bc64 <_printf_i+0x114>
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	d04b      	beq.n	800bcfc <_printf_i+0x1ac>
 800bc64:	4615      	mov	r5, r2
 800bc66:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc6a:	fb03 6711 	mls	r7, r3, r1, r6
 800bc6e:	5dc7      	ldrb	r7, [r0, r7]
 800bc70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc74:	4637      	mov	r7, r6
 800bc76:	42bb      	cmp	r3, r7
 800bc78:	460e      	mov	r6, r1
 800bc7a:	d9f4      	bls.n	800bc66 <_printf_i+0x116>
 800bc7c:	2b08      	cmp	r3, #8
 800bc7e:	d10b      	bne.n	800bc98 <_printf_i+0x148>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07de      	lsls	r6, r3, #31
 800bc84:	d508      	bpl.n	800bc98 <_printf_i+0x148>
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	6861      	ldr	r1, [r4, #4]
 800bc8a:	4299      	cmp	r1, r3
 800bc8c:	bfde      	ittt	le
 800bc8e:	2330      	movle	r3, #48	; 0x30
 800bc90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc98:	1b52      	subs	r2, r2, r5
 800bc9a:	6122      	str	r2, [r4, #16]
 800bc9c:	f8cd a000 	str.w	sl, [sp]
 800bca0:	464b      	mov	r3, r9
 800bca2:	aa03      	add	r2, sp, #12
 800bca4:	4621      	mov	r1, r4
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7ff fee4 	bl	800ba74 <_printf_common>
 800bcac:	3001      	adds	r0, #1
 800bcae:	d14a      	bne.n	800bd46 <_printf_i+0x1f6>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	b004      	add	sp, #16
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	f043 0320 	orr.w	r3, r3, #32
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	4833      	ldr	r0, [pc, #204]	; (800bd90 <_printf_i+0x240>)
 800bcc4:	2778      	movs	r7, #120	; 0x78
 800bcc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	6829      	ldr	r1, [r5, #0]
 800bcce:	061f      	lsls	r7, r3, #24
 800bcd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcd4:	d402      	bmi.n	800bcdc <_printf_i+0x18c>
 800bcd6:	065f      	lsls	r7, r3, #25
 800bcd8:	bf48      	it	mi
 800bcda:	b2b6      	uxthmi	r6, r6
 800bcdc:	07df      	lsls	r7, r3, #31
 800bcde:	bf48      	it	mi
 800bce0:	f043 0320 	orrmi.w	r3, r3, #32
 800bce4:	6029      	str	r1, [r5, #0]
 800bce6:	bf48      	it	mi
 800bce8:	6023      	strmi	r3, [r4, #0]
 800bcea:	b91e      	cbnz	r6, 800bcf4 <_printf_i+0x1a4>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	f023 0320 	bic.w	r3, r3, #32
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	2310      	movs	r3, #16
 800bcf6:	e7a7      	b.n	800bc48 <_printf_i+0xf8>
 800bcf8:	4824      	ldr	r0, [pc, #144]	; (800bd8c <_printf_i+0x23c>)
 800bcfa:	e7e4      	b.n	800bcc6 <_printf_i+0x176>
 800bcfc:	4615      	mov	r5, r2
 800bcfe:	e7bd      	b.n	800bc7c <_printf_i+0x12c>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	6826      	ldr	r6, [r4, #0]
 800bd04:	6961      	ldr	r1, [r4, #20]
 800bd06:	1d18      	adds	r0, r3, #4
 800bd08:	6028      	str	r0, [r5, #0]
 800bd0a:	0635      	lsls	r5, r6, #24
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	d501      	bpl.n	800bd14 <_printf_i+0x1c4>
 800bd10:	6019      	str	r1, [r3, #0]
 800bd12:	e002      	b.n	800bd1a <_printf_i+0x1ca>
 800bd14:	0670      	lsls	r0, r6, #25
 800bd16:	d5fb      	bpl.n	800bd10 <_printf_i+0x1c0>
 800bd18:	8019      	strh	r1, [r3, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	6123      	str	r3, [r4, #16]
 800bd1e:	4615      	mov	r5, r2
 800bd20:	e7bc      	b.n	800bc9c <_printf_i+0x14c>
 800bd22:	682b      	ldr	r3, [r5, #0]
 800bd24:	1d1a      	adds	r2, r3, #4
 800bd26:	602a      	str	r2, [r5, #0]
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7f4 fa4e 	bl	80001d0 <memchr>
 800bd34:	b108      	cbz	r0, 800bd3a <_printf_i+0x1ea>
 800bd36:	1b40      	subs	r0, r0, r5
 800bd38:	6060      	str	r0, [r4, #4]
 800bd3a:	6863      	ldr	r3, [r4, #4]
 800bd3c:	6123      	str	r3, [r4, #16]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd44:	e7aa      	b.n	800bc9c <_printf_i+0x14c>
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	47d0      	blx	sl
 800bd50:	3001      	adds	r0, #1
 800bd52:	d0ad      	beq.n	800bcb0 <_printf_i+0x160>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	079b      	lsls	r3, r3, #30
 800bd58:	d413      	bmi.n	800bd82 <_printf_i+0x232>
 800bd5a:	68e0      	ldr	r0, [r4, #12]
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	4298      	cmp	r0, r3
 800bd60:	bfb8      	it	lt
 800bd62:	4618      	movlt	r0, r3
 800bd64:	e7a6      	b.n	800bcb4 <_printf_i+0x164>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4632      	mov	r2, r6
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	47d0      	blx	sl
 800bd70:	3001      	adds	r0, #1
 800bd72:	d09d      	beq.n	800bcb0 <_printf_i+0x160>
 800bd74:	3501      	adds	r5, #1
 800bd76:	68e3      	ldr	r3, [r4, #12]
 800bd78:	9903      	ldr	r1, [sp, #12]
 800bd7a:	1a5b      	subs	r3, r3, r1
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	dcf2      	bgt.n	800bd66 <_printf_i+0x216>
 800bd80:	e7eb      	b.n	800bd5a <_printf_i+0x20a>
 800bd82:	2500      	movs	r5, #0
 800bd84:	f104 0619 	add.w	r6, r4, #25
 800bd88:	e7f5      	b.n	800bd76 <_printf_i+0x226>
 800bd8a:	bf00      	nop
 800bd8c:	0800df9e 	.word	0x0800df9e
 800bd90:	0800dfaf 	.word	0x0800dfaf

0800bd94 <std>:
 800bd94:	2300      	movs	r3, #0
 800bd96:	b510      	push	{r4, lr}
 800bd98:	4604      	mov	r4, r0
 800bd9a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bda2:	6083      	str	r3, [r0, #8]
 800bda4:	8181      	strh	r1, [r0, #12]
 800bda6:	6643      	str	r3, [r0, #100]	; 0x64
 800bda8:	81c2      	strh	r2, [r0, #14]
 800bdaa:	6183      	str	r3, [r0, #24]
 800bdac:	4619      	mov	r1, r3
 800bdae:	2208      	movs	r2, #8
 800bdb0:	305c      	adds	r0, #92	; 0x5c
 800bdb2:	f000 f9f7 	bl	800c1a4 <memset>
 800bdb6:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <std+0x58>)
 800bdb8:	6263      	str	r3, [r4, #36]	; 0x24
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <std+0x5c>)
 800bdbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <std+0x60>)
 800bdc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	; (800bdf8 <std+0x64>)
 800bdc4:	6323      	str	r3, [r4, #48]	; 0x30
 800bdc6:	4b0d      	ldr	r3, [pc, #52]	; (800bdfc <std+0x68>)
 800bdc8:	6224      	str	r4, [r4, #32]
 800bdca:	429c      	cmp	r4, r3
 800bdcc:	d006      	beq.n	800bddc <std+0x48>
 800bdce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bdd2:	4294      	cmp	r4, r2
 800bdd4:	d002      	beq.n	800bddc <std+0x48>
 800bdd6:	33d0      	adds	r3, #208	; 0xd0
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d105      	bne.n	800bde8 <std+0x54>
 800bddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde4:	f000 ba6a 	b.w	800c2bc <__retarget_lock_init_recursive>
 800bde8:	bd10      	pop	{r4, pc}
 800bdea:	bf00      	nop
 800bdec:	0800bff5 	.word	0x0800bff5
 800bdf0:	0800c017 	.word	0x0800c017
 800bdf4:	0800c04f 	.word	0x0800c04f
 800bdf8:	0800c073 	.word	0x0800c073
 800bdfc:	20000ab0 	.word	0x20000ab0

0800be00 <stdio_exit_handler>:
 800be00:	4a02      	ldr	r2, [pc, #8]	; (800be0c <stdio_exit_handler+0xc>)
 800be02:	4903      	ldr	r1, [pc, #12]	; (800be10 <stdio_exit_handler+0x10>)
 800be04:	4803      	ldr	r0, [pc, #12]	; (800be14 <stdio_exit_handler+0x14>)
 800be06:	f000 b869 	b.w	800bedc <_fwalk_sglue>
 800be0a:	bf00      	nop
 800be0c:	2000002c 	.word	0x2000002c
 800be10:	0800dae1 	.word	0x0800dae1
 800be14:	20000038 	.word	0x20000038

0800be18 <cleanup_stdio>:
 800be18:	6841      	ldr	r1, [r0, #4]
 800be1a:	4b0c      	ldr	r3, [pc, #48]	; (800be4c <cleanup_stdio+0x34>)
 800be1c:	4299      	cmp	r1, r3
 800be1e:	b510      	push	{r4, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	d001      	beq.n	800be28 <cleanup_stdio+0x10>
 800be24:	f001 fe5c 	bl	800dae0 <_fflush_r>
 800be28:	68a1      	ldr	r1, [r4, #8]
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <cleanup_stdio+0x38>)
 800be2c:	4299      	cmp	r1, r3
 800be2e:	d002      	beq.n	800be36 <cleanup_stdio+0x1e>
 800be30:	4620      	mov	r0, r4
 800be32:	f001 fe55 	bl	800dae0 <_fflush_r>
 800be36:	68e1      	ldr	r1, [r4, #12]
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <cleanup_stdio+0x3c>)
 800be3a:	4299      	cmp	r1, r3
 800be3c:	d004      	beq.n	800be48 <cleanup_stdio+0x30>
 800be3e:	4620      	mov	r0, r4
 800be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be44:	f001 be4c 	b.w	800dae0 <_fflush_r>
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	20000ab0 	.word	0x20000ab0
 800be50:	20000b18 	.word	0x20000b18
 800be54:	20000b80 	.word	0x20000b80

0800be58 <global_stdio_init.part.0>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <global_stdio_init.part.0+0x30>)
 800be5c:	4c0b      	ldr	r4, [pc, #44]	; (800be8c <global_stdio_init.part.0+0x34>)
 800be5e:	4a0c      	ldr	r2, [pc, #48]	; (800be90 <global_stdio_init.part.0+0x38>)
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	4620      	mov	r0, r4
 800be64:	2200      	movs	r2, #0
 800be66:	2104      	movs	r1, #4
 800be68:	f7ff ff94 	bl	800bd94 <std>
 800be6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800be70:	2201      	movs	r2, #1
 800be72:	2109      	movs	r1, #9
 800be74:	f7ff ff8e 	bl	800bd94 <std>
 800be78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800be7c:	2202      	movs	r2, #2
 800be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be82:	2112      	movs	r1, #18
 800be84:	f7ff bf86 	b.w	800bd94 <std>
 800be88:	20000be8 	.word	0x20000be8
 800be8c:	20000ab0 	.word	0x20000ab0
 800be90:	0800be01 	.word	0x0800be01

0800be94 <__sfp_lock_acquire>:
 800be94:	4801      	ldr	r0, [pc, #4]	; (800be9c <__sfp_lock_acquire+0x8>)
 800be96:	f000 ba12 	b.w	800c2be <__retarget_lock_acquire_recursive>
 800be9a:	bf00      	nop
 800be9c:	20000bf1 	.word	0x20000bf1

0800bea0 <__sfp_lock_release>:
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <__sfp_lock_release+0x8>)
 800bea2:	f000 ba0d 	b.w	800c2c0 <__retarget_lock_release_recursive>
 800bea6:	bf00      	nop
 800bea8:	20000bf1 	.word	0x20000bf1

0800beac <__sinit>:
 800beac:	b510      	push	{r4, lr}
 800beae:	4604      	mov	r4, r0
 800beb0:	f7ff fff0 	bl	800be94 <__sfp_lock_acquire>
 800beb4:	6a23      	ldr	r3, [r4, #32]
 800beb6:	b11b      	cbz	r3, 800bec0 <__sinit+0x14>
 800beb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bebc:	f7ff bff0 	b.w	800bea0 <__sfp_lock_release>
 800bec0:	4b04      	ldr	r3, [pc, #16]	; (800bed4 <__sinit+0x28>)
 800bec2:	6223      	str	r3, [r4, #32]
 800bec4:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <__sinit+0x2c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1f5      	bne.n	800beb8 <__sinit+0xc>
 800becc:	f7ff ffc4 	bl	800be58 <global_stdio_init.part.0>
 800bed0:	e7f2      	b.n	800beb8 <__sinit+0xc>
 800bed2:	bf00      	nop
 800bed4:	0800be19 	.word	0x0800be19
 800bed8:	20000be8 	.word	0x20000be8

0800bedc <_fwalk_sglue>:
 800bedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	4607      	mov	r7, r0
 800bee2:	4688      	mov	r8, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	2600      	movs	r6, #0
 800bee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beec:	f1b9 0901 	subs.w	r9, r9, #1
 800bef0:	d505      	bpl.n	800befe <_fwalk_sglue+0x22>
 800bef2:	6824      	ldr	r4, [r4, #0]
 800bef4:	2c00      	cmp	r4, #0
 800bef6:	d1f7      	bne.n	800bee8 <_fwalk_sglue+0xc>
 800bef8:	4630      	mov	r0, r6
 800befa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800befe:	89ab      	ldrh	r3, [r5, #12]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d907      	bls.n	800bf14 <_fwalk_sglue+0x38>
 800bf04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	d003      	beq.n	800bf14 <_fwalk_sglue+0x38>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4638      	mov	r0, r7
 800bf10:	47c0      	blx	r8
 800bf12:	4306      	orrs	r6, r0
 800bf14:	3568      	adds	r5, #104	; 0x68
 800bf16:	e7e9      	b.n	800beec <_fwalk_sglue+0x10>

0800bf18 <iprintf>:
 800bf18:	b40f      	push	{r0, r1, r2, r3}
 800bf1a:	b507      	push	{r0, r1, r2, lr}
 800bf1c:	4906      	ldr	r1, [pc, #24]	; (800bf38 <iprintf+0x20>)
 800bf1e:	ab04      	add	r3, sp, #16
 800bf20:	6808      	ldr	r0, [r1, #0]
 800bf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf26:	6881      	ldr	r1, [r0, #8]
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	f001 fc39 	bl	800d7a0 <_vfiprintf_r>
 800bf2e:	b003      	add	sp, #12
 800bf30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf34:	b004      	add	sp, #16
 800bf36:	4770      	bx	lr
 800bf38:	20000084 	.word	0x20000084

0800bf3c <_puts_r>:
 800bf3c:	6a03      	ldr	r3, [r0, #32]
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	6884      	ldr	r4, [r0, #8]
 800bf42:	4605      	mov	r5, r0
 800bf44:	460e      	mov	r6, r1
 800bf46:	b90b      	cbnz	r3, 800bf4c <_puts_r+0x10>
 800bf48:	f7ff ffb0 	bl	800beac <__sinit>
 800bf4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf4e:	07db      	lsls	r3, r3, #31
 800bf50:	d405      	bmi.n	800bf5e <_puts_r+0x22>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	0598      	lsls	r0, r3, #22
 800bf56:	d402      	bmi.n	800bf5e <_puts_r+0x22>
 800bf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5a:	f000 f9b0 	bl	800c2be <__retarget_lock_acquire_recursive>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	0719      	lsls	r1, r3, #28
 800bf62:	d513      	bpl.n	800bf8c <_puts_r+0x50>
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	b18b      	cbz	r3, 800bf8c <_puts_r+0x50>
 800bf68:	3e01      	subs	r6, #1
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf70:	3b01      	subs	r3, #1
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	b9e9      	cbnz	r1, 800bfb2 <_puts_r+0x76>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	da2e      	bge.n	800bfd8 <_puts_r+0x9c>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	210a      	movs	r1, #10
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f000 f87b 	bl	800c07a <__swbuf_r>
 800bf84:	3001      	adds	r0, #1
 800bf86:	d007      	beq.n	800bf98 <_puts_r+0x5c>
 800bf88:	250a      	movs	r5, #10
 800bf8a:	e007      	b.n	800bf9c <_puts_r+0x60>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f8b0 	bl	800c0f4 <__swsetup_r>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d0e7      	beq.n	800bf68 <_puts_r+0x2c>
 800bf98:	f04f 35ff 	mov.w	r5, #4294967295
 800bf9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf9e:	07da      	lsls	r2, r3, #31
 800bfa0:	d405      	bmi.n	800bfae <_puts_r+0x72>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d402      	bmi.n	800bfae <_puts_r+0x72>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f000 f989 	bl	800c2c0 <__retarget_lock_release_recursive>
 800bfae:	4628      	mov	r0, r5
 800bfb0:	bd70      	pop	{r4, r5, r6, pc}
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da04      	bge.n	800bfc0 <_puts_r+0x84>
 800bfb6:	69a2      	ldr	r2, [r4, #24]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	dc06      	bgt.n	800bfca <_puts_r+0x8e>
 800bfbc:	290a      	cmp	r1, #10
 800bfbe:	d004      	beq.n	800bfca <_puts_r+0x8e>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	6022      	str	r2, [r4, #0]
 800bfc6:	7019      	strb	r1, [r3, #0]
 800bfc8:	e7cf      	b.n	800bf6a <_puts_r+0x2e>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 f854 	bl	800c07a <__swbuf_r>
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	d1c9      	bne.n	800bf6a <_puts_r+0x2e>
 800bfd6:	e7df      	b.n	800bf98 <_puts_r+0x5c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	250a      	movs	r5, #10
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	701d      	strb	r5, [r3, #0]
 800bfe2:	e7db      	b.n	800bf9c <_puts_r+0x60>

0800bfe4 <puts>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <puts+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f7ff bfa7 	b.w	800bf3c <_puts_r>
 800bfee:	bf00      	nop
 800bff0:	20000084 	.word	0x20000084

0800bff4 <__sread>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	f000 f900 	bl	800c200 <_read_r>
 800c000:	2800      	cmp	r0, #0
 800c002:	bfab      	itete	ge
 800c004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c006:	89a3      	ldrhlt	r3, [r4, #12]
 800c008:	181b      	addge	r3, r3, r0
 800c00a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c00e:	bfac      	ite	ge
 800c010:	6563      	strge	r3, [r4, #84]	; 0x54
 800c012:	81a3      	strhlt	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__swrite>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	898b      	ldrh	r3, [r1, #12]
 800c01e:	05db      	lsls	r3, r3, #23
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4616      	mov	r6, r2
 800c026:	d505      	bpl.n	800c034 <__swrite+0x1e>
 800c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f000 f8d4 	bl	800c1dc <_lseek_r>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	f000 b8fb 	b.w	800c244 <_write_r>

0800c04e <__sseek>:
 800c04e:	b510      	push	{r4, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c056:	f000 f8c1 	bl	800c1dc <_lseek_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	bf15      	itete	ne
 800c060:	6560      	strne	r0, [r4, #84]	; 0x54
 800c062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strheq	r3, [r4, #12]
 800c06c:	bf18      	it	ne
 800c06e:	81a3      	strhne	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__sclose>:
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 b8a1 	b.w	800c1bc <_close_r>

0800c07a <__swbuf_r>:
 800c07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07c:	460e      	mov	r6, r1
 800c07e:	4614      	mov	r4, r2
 800c080:	4605      	mov	r5, r0
 800c082:	b118      	cbz	r0, 800c08c <__swbuf_r+0x12>
 800c084:	6a03      	ldr	r3, [r0, #32]
 800c086:	b90b      	cbnz	r3, 800c08c <__swbuf_r+0x12>
 800c088:	f7ff ff10 	bl	800beac <__sinit>
 800c08c:	69a3      	ldr	r3, [r4, #24]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	071a      	lsls	r2, r3, #28
 800c094:	d525      	bpl.n	800c0e2 <__swbuf_r+0x68>
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	b31b      	cbz	r3, 800c0e2 <__swbuf_r+0x68>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	1a98      	subs	r0, r3, r2
 800c0a0:	6963      	ldr	r3, [r4, #20]
 800c0a2:	b2f6      	uxtb	r6, r6
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	4637      	mov	r7, r6
 800c0a8:	dc04      	bgt.n	800c0b4 <__swbuf_r+0x3a>
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f001 fd17 	bl	800dae0 <_fflush_r>
 800c0b2:	b9e0      	cbnz	r0, 800c0ee <__swbuf_r+0x74>
 800c0b4:	68a3      	ldr	r3, [r4, #8]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	6022      	str	r2, [r4, #0]
 800c0c0:	701e      	strb	r6, [r3, #0]
 800c0c2:	6962      	ldr	r2, [r4, #20]
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d004      	beq.n	800c0d4 <__swbuf_r+0x5a>
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	07db      	lsls	r3, r3, #31
 800c0ce:	d506      	bpl.n	800c0de <__swbuf_r+0x64>
 800c0d0:	2e0a      	cmp	r6, #10
 800c0d2:	d104      	bne.n	800c0de <__swbuf_r+0x64>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f001 fd02 	bl	800dae0 <_fflush_r>
 800c0dc:	b938      	cbnz	r0, 800c0ee <__swbuf_r+0x74>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f805 	bl	800c0f4 <__swsetup_r>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0d5      	beq.n	800c09a <__swbuf_r+0x20>
 800c0ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c0f2:	e7f4      	b.n	800c0de <__swbuf_r+0x64>

0800c0f4 <__swsetup_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4b2a      	ldr	r3, [pc, #168]	; (800c1a0 <__swsetup_r+0xac>)
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	b118      	cbz	r0, 800c108 <__swsetup_r+0x14>
 800c100:	6a03      	ldr	r3, [r0, #32]
 800c102:	b90b      	cbnz	r3, 800c108 <__swsetup_r+0x14>
 800c104:	f7ff fed2 	bl	800beac <__sinit>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c10e:	0718      	lsls	r0, r3, #28
 800c110:	d422      	bmi.n	800c158 <__swsetup_r+0x64>
 800c112:	06d9      	lsls	r1, r3, #27
 800c114:	d407      	bmi.n	800c126 <__swsetup_r+0x32>
 800c116:	2309      	movs	r3, #9
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e034      	b.n	800c190 <__swsetup_r+0x9c>
 800c126:	0758      	lsls	r0, r3, #29
 800c128:	d512      	bpl.n	800c150 <__swsetup_r+0x5c>
 800c12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c12c:	b141      	cbz	r1, 800c140 <__swsetup_r+0x4c>
 800c12e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c132:	4299      	cmp	r1, r3
 800c134:	d002      	beq.n	800c13c <__swsetup_r+0x48>
 800c136:	4628      	mov	r0, r5
 800c138:	f000 ff40 	bl	800cfbc <_free_r>
 800c13c:	2300      	movs	r3, #0
 800c13e:	6363      	str	r3, [r4, #52]	; 0x34
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	2300      	movs	r3, #0
 800c14a:	6063      	str	r3, [r4, #4]
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f043 0308 	orr.w	r3, r3, #8
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	6923      	ldr	r3, [r4, #16]
 800c15a:	b94b      	cbnz	r3, 800c170 <__swsetup_r+0x7c>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c166:	d003      	beq.n	800c170 <__swsetup_r+0x7c>
 800c168:	4621      	mov	r1, r4
 800c16a:	4628      	mov	r0, r5
 800c16c:	f001 fd06 	bl	800db7c <__smakebuf_r>
 800c170:	89a0      	ldrh	r0, [r4, #12]
 800c172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c176:	f010 0301 	ands.w	r3, r0, #1
 800c17a:	d00a      	beq.n	800c192 <__swsetup_r+0x9e>
 800c17c:	2300      	movs	r3, #0
 800c17e:	60a3      	str	r3, [r4, #8]
 800c180:	6963      	ldr	r3, [r4, #20]
 800c182:	425b      	negs	r3, r3
 800c184:	61a3      	str	r3, [r4, #24]
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	b943      	cbnz	r3, 800c19c <__swsetup_r+0xa8>
 800c18a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c18e:	d1c4      	bne.n	800c11a <__swsetup_r+0x26>
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	0781      	lsls	r1, r0, #30
 800c194:	bf58      	it	pl
 800c196:	6963      	ldrpl	r3, [r4, #20]
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	e7f4      	b.n	800c186 <__swsetup_r+0x92>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7f7      	b.n	800c190 <__swsetup_r+0x9c>
 800c1a0:	20000084 	.word	0x20000084

0800c1a4 <memset>:
 800c1a4:	4402      	add	r2, r0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d100      	bne.n	800c1ae <memset+0xa>
 800c1ac:	4770      	bx	lr
 800c1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b2:	e7f9      	b.n	800c1a8 <memset+0x4>

0800c1b4 <_localeconv_r>:
 800c1b4:	4800      	ldr	r0, [pc, #0]	; (800c1b8 <_localeconv_r+0x4>)
 800c1b6:	4770      	bx	lr
 800c1b8:	20000178 	.word	0x20000178

0800c1bc <_close_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4d06      	ldr	r5, [pc, #24]	; (800c1d8 <_close_r+0x1c>)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	f7f5 fdef 	bl	8001daa <_close>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_close_r+0x1a>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_close_r+0x1a>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20000bec 	.word	0x20000bec

0800c1dc <_lseek_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	; (800c1fc <_lseek_r+0x20>)
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	602a      	str	r2, [r5, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f7f5 fe04 	bl	8001df8 <_lseek>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_lseek_r+0x1e>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_lseek_r+0x1e>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20000bec 	.word	0x20000bec

0800c200 <_read_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	; (800c220 <_read_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f5 fd92 	bl	8001d38 <_read>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_read_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_read_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20000bec 	.word	0x20000bec

0800c224 <_sbrk_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d06      	ldr	r5, [pc, #24]	; (800c240 <_sbrk_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f5 fdf0 	bl	8001e14 <_sbrk>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_sbrk_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_sbrk_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20000bec 	.word	0x20000bec

0800c244 <_write_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d07      	ldr	r5, [pc, #28]	; (800c264 <_write_r+0x20>)
 800c248:	4604      	mov	r4, r0
 800c24a:	4608      	mov	r0, r1
 800c24c:	4611      	mov	r1, r2
 800c24e:	2200      	movs	r2, #0
 800c250:	602a      	str	r2, [r5, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	f7f5 fd8d 	bl	8001d72 <_write>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_write_r+0x1e>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_write_r+0x1e>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	20000bec 	.word	0x20000bec

0800c268 <__errno>:
 800c268:	4b01      	ldr	r3, [pc, #4]	; (800c270 <__errno+0x8>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000084 	.word	0x20000084

0800c274 <__libc_init_array>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4d0d      	ldr	r5, [pc, #52]	; (800c2ac <__libc_init_array+0x38>)
 800c278:	4c0d      	ldr	r4, [pc, #52]	; (800c2b0 <__libc_init_array+0x3c>)
 800c27a:	1b64      	subs	r4, r4, r5
 800c27c:	10a4      	asrs	r4, r4, #2
 800c27e:	2600      	movs	r6, #0
 800c280:	42a6      	cmp	r6, r4
 800c282:	d109      	bne.n	800c298 <__libc_init_array+0x24>
 800c284:	4d0b      	ldr	r5, [pc, #44]	; (800c2b4 <__libc_init_array+0x40>)
 800c286:	4c0c      	ldr	r4, [pc, #48]	; (800c2b8 <__libc_init_array+0x44>)
 800c288:	f001 fd96 	bl	800ddb8 <_init>
 800c28c:	1b64      	subs	r4, r4, r5
 800c28e:	10a4      	asrs	r4, r4, #2
 800c290:	2600      	movs	r6, #0
 800c292:	42a6      	cmp	r6, r4
 800c294:	d105      	bne.n	800c2a2 <__libc_init_array+0x2e>
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29c:	4798      	blx	r3
 800c29e:	3601      	adds	r6, #1
 800c2a0:	e7ee      	b.n	800c280 <__libc_init_array+0xc>
 800c2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a6:	4798      	blx	r3
 800c2a8:	3601      	adds	r6, #1
 800c2aa:	e7f2      	b.n	800c292 <__libc_init_array+0x1e>
 800c2ac:	0800e304 	.word	0x0800e304
 800c2b0:	0800e304 	.word	0x0800e304
 800c2b4:	0800e304 	.word	0x0800e304
 800c2b8:	0800e308 	.word	0x0800e308

0800c2bc <__retarget_lock_init_recursive>:
 800c2bc:	4770      	bx	lr

0800c2be <__retarget_lock_acquire_recursive>:
 800c2be:	4770      	bx	lr

0800c2c0 <__retarget_lock_release_recursive>:
 800c2c0:	4770      	bx	lr

0800c2c2 <quorem>:
 800c2c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c6:	6903      	ldr	r3, [r0, #16]
 800c2c8:	690c      	ldr	r4, [r1, #16]
 800c2ca:	42a3      	cmp	r3, r4
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	db7e      	blt.n	800c3ce <quorem+0x10c>
 800c2d0:	3c01      	subs	r4, #1
 800c2d2:	f101 0814 	add.w	r8, r1, #20
 800c2d6:	f100 0514 	add.w	r5, r0, #20
 800c2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2f8:	d331      	bcc.n	800c35e <quorem+0x9c>
 800c2fa:	f04f 0e00 	mov.w	lr, #0
 800c2fe:	4640      	mov	r0, r8
 800c300:	46ac      	mov	ip, r5
 800c302:	46f2      	mov	sl, lr
 800c304:	f850 2b04 	ldr.w	r2, [r0], #4
 800c308:	b293      	uxth	r3, r2
 800c30a:	fb06 e303 	mla	r3, r6, r3, lr
 800c30e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c312:	0c1a      	lsrs	r2, r3, #16
 800c314:	b29b      	uxth	r3, r3
 800c316:	ebaa 0303 	sub.w	r3, sl, r3
 800c31a:	f8dc a000 	ldr.w	sl, [ip]
 800c31e:	fa13 f38a 	uxtah	r3, r3, sl
 800c322:	fb06 220e 	mla	r2, r6, lr, r2
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c32e:	b292      	uxth	r2, r2
 800c330:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c338:	f8bd 3000 	ldrh.w	r3, [sp]
 800c33c:	4581      	cmp	r9, r0
 800c33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c342:	f84c 3b04 	str.w	r3, [ip], #4
 800c346:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c34a:	d2db      	bcs.n	800c304 <quorem+0x42>
 800c34c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c350:	b92b      	cbnz	r3, 800c35e <quorem+0x9c>
 800c352:	9b01      	ldr	r3, [sp, #4]
 800c354:	3b04      	subs	r3, #4
 800c356:	429d      	cmp	r5, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	d32c      	bcc.n	800c3b6 <quorem+0xf4>
 800c35c:	613c      	str	r4, [r7, #16]
 800c35e:	4638      	mov	r0, r7
 800c360:	f001 f8f4 	bl	800d54c <__mcmp>
 800c364:	2800      	cmp	r0, #0
 800c366:	db22      	blt.n	800c3ae <quorem+0xec>
 800c368:	3601      	adds	r6, #1
 800c36a:	4629      	mov	r1, r5
 800c36c:	2000      	movs	r0, #0
 800c36e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c372:	f8d1 c000 	ldr.w	ip, [r1]
 800c376:	b293      	uxth	r3, r2
 800c378:	1ac3      	subs	r3, r0, r3
 800c37a:	0c12      	lsrs	r2, r2, #16
 800c37c:	fa13 f38c 	uxtah	r3, r3, ip
 800c380:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c388:	b29b      	uxth	r3, r3
 800c38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c38e:	45c1      	cmp	r9, r8
 800c390:	f841 3b04 	str.w	r3, [r1], #4
 800c394:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c398:	d2e9      	bcs.n	800c36e <quorem+0xac>
 800c39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3a2:	b922      	cbnz	r2, 800c3ae <quorem+0xec>
 800c3a4:	3b04      	subs	r3, #4
 800c3a6:	429d      	cmp	r5, r3
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	d30a      	bcc.n	800c3c2 <quorem+0x100>
 800c3ac:	613c      	str	r4, [r7, #16]
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	b003      	add	sp, #12
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	2a00      	cmp	r2, #0
 800c3bc:	d1ce      	bne.n	800c35c <quorem+0x9a>
 800c3be:	3c01      	subs	r4, #1
 800c3c0:	e7c9      	b.n	800c356 <quorem+0x94>
 800c3c2:	6812      	ldr	r2, [r2, #0]
 800c3c4:	3b04      	subs	r3, #4
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	d1f0      	bne.n	800c3ac <quorem+0xea>
 800c3ca:	3c01      	subs	r4, #1
 800c3cc:	e7eb      	b.n	800c3a6 <quorem+0xe4>
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	e7ee      	b.n	800c3b0 <quorem+0xee>
 800c3d2:	0000      	movs	r0, r0
 800c3d4:	0000      	movs	r0, r0
	...

0800c3d8 <_dtoa_r>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	ed2d 8b04 	vpush	{d8-d9}
 800c3e0:	69c5      	ldr	r5, [r0, #28]
 800c3e2:	b093      	sub	sp, #76	; 0x4c
 800c3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3e8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3f0:	9107      	str	r1, [sp, #28]
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f8:	b975      	cbnz	r5, 800c418 <_dtoa_r+0x40>
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f7fe ffa8 	bl	800b350 <malloc>
 800c400:	4602      	mov	r2, r0
 800c402:	61e0      	str	r0, [r4, #28]
 800c404:	b920      	cbnz	r0, 800c410 <_dtoa_r+0x38>
 800c406:	4bae      	ldr	r3, [pc, #696]	; (800c6c0 <_dtoa_r+0x2e8>)
 800c408:	21ef      	movs	r1, #239	; 0xef
 800c40a:	48ae      	ldr	r0, [pc, #696]	; (800c6c4 <_dtoa_r+0x2ec>)
 800c40c:	f001 fc22 	bl	800dc54 <__assert_func>
 800c410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c414:	6005      	str	r5, [r0, #0]
 800c416:	60c5      	str	r5, [r0, #12]
 800c418:	69e3      	ldr	r3, [r4, #28]
 800c41a:	6819      	ldr	r1, [r3, #0]
 800c41c:	b151      	cbz	r1, 800c434 <_dtoa_r+0x5c>
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	604a      	str	r2, [r1, #4]
 800c422:	2301      	movs	r3, #1
 800c424:	4093      	lsls	r3, r2
 800c426:	608b      	str	r3, [r1, #8]
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fe53 	bl	800d0d4 <_Bfree>
 800c42e:	69e3      	ldr	r3, [r4, #28]
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	1e3b      	subs	r3, r7, #0
 800c436:	bfbb      	ittet	lt
 800c438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c43c:	9303      	strlt	r3, [sp, #12]
 800c43e:	2300      	movge	r3, #0
 800c440:	2201      	movlt	r2, #1
 800c442:	bfac      	ite	ge
 800c444:	f8c8 3000 	strge.w	r3, [r8]
 800c448:	f8c8 2000 	strlt.w	r2, [r8]
 800c44c:	4b9e      	ldr	r3, [pc, #632]	; (800c6c8 <_dtoa_r+0x2f0>)
 800c44e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c452:	ea33 0308 	bics.w	r3, r3, r8
 800c456:	d11b      	bne.n	800c490 <_dtoa_r+0xb8>
 800c458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c45a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c464:	4333      	orrs	r3, r6
 800c466:	f000 8593 	beq.w	800cf90 <_dtoa_r+0xbb8>
 800c46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c46c:	b963      	cbnz	r3, 800c488 <_dtoa_r+0xb0>
 800c46e:	4b97      	ldr	r3, [pc, #604]	; (800c6cc <_dtoa_r+0x2f4>)
 800c470:	e027      	b.n	800c4c2 <_dtoa_r+0xea>
 800c472:	4b97      	ldr	r3, [pc, #604]	; (800c6d0 <_dtoa_r+0x2f8>)
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c47a:	6013      	str	r3, [r2, #0]
 800c47c:	9800      	ldr	r0, [sp, #0]
 800c47e:	b013      	add	sp, #76	; 0x4c
 800c480:	ecbd 8b04 	vpop	{d8-d9}
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c488:	4b90      	ldr	r3, [pc, #576]	; (800c6cc <_dtoa_r+0x2f4>)
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	3303      	adds	r3, #3
 800c48e:	e7f3      	b.n	800c478 <_dtoa_r+0xa0>
 800c490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c494:	2200      	movs	r2, #0
 800c496:	ec51 0b17 	vmov	r0, r1, d7
 800c49a:	eeb0 8a47 	vmov.f32	s16, s14
 800c49e:	eef0 8a67 	vmov.f32	s17, s15
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f7f4 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4a8:	4681      	mov	r9, r0
 800c4aa:	b160      	cbz	r0, 800c4c6 <_dtoa_r+0xee>
 800c4ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 8568 	beq.w	800cf8a <_dtoa_r+0xbb2>
 800c4ba:	4b86      	ldr	r3, [pc, #536]	; (800c6d4 <_dtoa_r+0x2fc>)
 800c4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	e7da      	b.n	800c47c <_dtoa_r+0xa4>
 800c4c6:	aa10      	add	r2, sp, #64	; 0x40
 800c4c8:	a911      	add	r1, sp, #68	; 0x44
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d0:	eef0 0a68 	vmov.f32	s1, s17
 800c4d4:	f001 f8e0 	bl	800d698 <__d2b>
 800c4d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4dc:	4682      	mov	sl, r0
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	d07f      	beq.n	800c5e2 <_dtoa_r+0x20a>
 800c4e2:	ee18 3a90 	vmov	r3, s17
 800c4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4ee:	ec51 0b18 	vmov	r0, r1, d8
 800c4f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4fe:	4619      	mov	r1, r3
 800c500:	2200      	movs	r2, #0
 800c502:	4b75      	ldr	r3, [pc, #468]	; (800c6d8 <_dtoa_r+0x300>)
 800c504:	f7f3 fec0 	bl	8000288 <__aeabi_dsub>
 800c508:	a367      	add	r3, pc, #412	; (adr r3, 800c6a8 <_dtoa_r+0x2d0>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f4 f873 	bl	80005f8 <__aeabi_dmul>
 800c512:	a367      	add	r3, pc, #412	; (adr r3, 800c6b0 <_dtoa_r+0x2d8>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f3 feb8 	bl	800028c <__adddf3>
 800c51c:	4606      	mov	r6, r0
 800c51e:	4628      	mov	r0, r5
 800c520:	460f      	mov	r7, r1
 800c522:	f7f3 ffff 	bl	8000524 <__aeabi_i2d>
 800c526:	a364      	add	r3, pc, #400	; (adr r3, 800c6b8 <_dtoa_r+0x2e0>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7f4 f864 	bl	80005f8 <__aeabi_dmul>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4630      	mov	r0, r6
 800c536:	4639      	mov	r1, r7
 800c538:	f7f3 fea8 	bl	800028c <__adddf3>
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	f7f4 fb0a 	bl	8000b58 <__aeabi_d2iz>
 800c544:	2200      	movs	r2, #0
 800c546:	4683      	mov	fp, r0
 800c548:	2300      	movs	r3, #0
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f4 fac5 	bl	8000adc <__aeabi_dcmplt>
 800c552:	b148      	cbz	r0, 800c568 <_dtoa_r+0x190>
 800c554:	4658      	mov	r0, fp
 800c556:	f7f3 ffe5 	bl	8000524 <__aeabi_i2d>
 800c55a:	4632      	mov	r2, r6
 800c55c:	463b      	mov	r3, r7
 800c55e:	f7f4 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c562:	b908      	cbnz	r0, 800c568 <_dtoa_r+0x190>
 800c564:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c568:	f1bb 0f16 	cmp.w	fp, #22
 800c56c:	d857      	bhi.n	800c61e <_dtoa_r+0x246>
 800c56e:	4b5b      	ldr	r3, [pc, #364]	; (800c6dc <_dtoa_r+0x304>)
 800c570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	ec51 0b18 	vmov	r0, r1, d8
 800c57c:	f7f4 faae 	bl	8000adc <__aeabi_dcmplt>
 800c580:	2800      	cmp	r0, #0
 800c582:	d04e      	beq.n	800c622 <_dtoa_r+0x24a>
 800c584:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c588:	2300      	movs	r3, #0
 800c58a:	930c      	str	r3, [sp, #48]	; 0x30
 800c58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c58e:	1b5b      	subs	r3, r3, r5
 800c590:	1e5a      	subs	r2, r3, #1
 800c592:	bf45      	ittet	mi
 800c594:	f1c3 0301 	rsbmi	r3, r3, #1
 800c598:	9305      	strmi	r3, [sp, #20]
 800c59a:	2300      	movpl	r3, #0
 800c59c:	2300      	movmi	r3, #0
 800c59e:	9206      	str	r2, [sp, #24]
 800c5a0:	bf54      	ite	pl
 800c5a2:	9305      	strpl	r3, [sp, #20]
 800c5a4:	9306      	strmi	r3, [sp, #24]
 800c5a6:	f1bb 0f00 	cmp.w	fp, #0
 800c5aa:	db3c      	blt.n	800c626 <_dtoa_r+0x24e>
 800c5ac:	9b06      	ldr	r3, [sp, #24]
 800c5ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5b2:	445b      	add	r3, fp
 800c5b4:	9306      	str	r3, [sp, #24]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9308      	str	r3, [sp, #32]
 800c5ba:	9b07      	ldr	r3, [sp, #28]
 800c5bc:	2b09      	cmp	r3, #9
 800c5be:	d868      	bhi.n	800c692 <_dtoa_r+0x2ba>
 800c5c0:	2b05      	cmp	r3, #5
 800c5c2:	bfc4      	itt	gt
 800c5c4:	3b04      	subgt	r3, #4
 800c5c6:	9307      	strgt	r3, [sp, #28]
 800c5c8:	9b07      	ldr	r3, [sp, #28]
 800c5ca:	f1a3 0302 	sub.w	r3, r3, #2
 800c5ce:	bfcc      	ite	gt
 800c5d0:	2500      	movgt	r5, #0
 800c5d2:	2501      	movle	r5, #1
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	f200 8085 	bhi.w	800c6e4 <_dtoa_r+0x30c>
 800c5da:	e8df f003 	tbb	[pc, r3]
 800c5de:	3b2e      	.short	0x3b2e
 800c5e0:	5839      	.short	0x5839
 800c5e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5e6:	441d      	add	r5, r3
 800c5e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	bfc1      	itttt	gt
 800c5f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c600:	bfd6      	itet	le
 800c602:	f1c3 0320 	rsble	r3, r3, #32
 800c606:	ea48 0003 	orrgt.w	r0, r8, r3
 800c60a:	fa06 f003 	lslle.w	r0, r6, r3
 800c60e:	f7f3 ff79 	bl	8000504 <__aeabi_ui2d>
 800c612:	2201      	movs	r2, #1
 800c614:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c618:	3d01      	subs	r5, #1
 800c61a:	920e      	str	r2, [sp, #56]	; 0x38
 800c61c:	e76f      	b.n	800c4fe <_dtoa_r+0x126>
 800c61e:	2301      	movs	r3, #1
 800c620:	e7b3      	b.n	800c58a <_dtoa_r+0x1b2>
 800c622:	900c      	str	r0, [sp, #48]	; 0x30
 800c624:	e7b2      	b.n	800c58c <_dtoa_r+0x1b4>
 800c626:	9b05      	ldr	r3, [sp, #20]
 800c628:	eba3 030b 	sub.w	r3, r3, fp
 800c62c:	9305      	str	r3, [sp, #20]
 800c62e:	f1cb 0300 	rsb	r3, fp, #0
 800c632:	9308      	str	r3, [sp, #32]
 800c634:	2300      	movs	r3, #0
 800c636:	930b      	str	r3, [sp, #44]	; 0x2c
 800c638:	e7bf      	b.n	800c5ba <_dtoa_r+0x1e2>
 800c63a:	2300      	movs	r3, #0
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c640:	2b00      	cmp	r3, #0
 800c642:	dc52      	bgt.n	800c6ea <_dtoa_r+0x312>
 800c644:	2301      	movs	r3, #1
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	461a      	mov	r2, r3
 800c64c:	920a      	str	r2, [sp, #40]	; 0x28
 800c64e:	e00b      	b.n	800c668 <_dtoa_r+0x290>
 800c650:	2301      	movs	r3, #1
 800c652:	e7f3      	b.n	800c63c <_dtoa_r+0x264>
 800c654:	2300      	movs	r3, #0
 800c656:	9309      	str	r3, [sp, #36]	; 0x24
 800c658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65a:	445b      	add	r3, fp
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	3301      	adds	r3, #1
 800c660:	2b01      	cmp	r3, #1
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	bfb8      	it	lt
 800c666:	2301      	movlt	r3, #1
 800c668:	69e0      	ldr	r0, [r4, #28]
 800c66a:	2100      	movs	r1, #0
 800c66c:	2204      	movs	r2, #4
 800c66e:	f102 0614 	add.w	r6, r2, #20
 800c672:	429e      	cmp	r6, r3
 800c674:	d93d      	bls.n	800c6f2 <_dtoa_r+0x31a>
 800c676:	6041      	str	r1, [r0, #4]
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 fceb 	bl	800d054 <_Balloc>
 800c67e:	9000      	str	r0, [sp, #0]
 800c680:	2800      	cmp	r0, #0
 800c682:	d139      	bne.n	800c6f8 <_dtoa_r+0x320>
 800c684:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <_dtoa_r+0x308>)
 800c686:	4602      	mov	r2, r0
 800c688:	f240 11af 	movw	r1, #431	; 0x1af
 800c68c:	e6bd      	b.n	800c40a <_dtoa_r+0x32>
 800c68e:	2301      	movs	r3, #1
 800c690:	e7e1      	b.n	800c656 <_dtoa_r+0x27e>
 800c692:	2501      	movs	r5, #1
 800c694:	2300      	movs	r3, #0
 800c696:	9307      	str	r3, [sp, #28]
 800c698:	9509      	str	r5, [sp, #36]	; 0x24
 800c69a:	f04f 33ff 	mov.w	r3, #4294967295
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2312      	movs	r3, #18
 800c6a6:	e7d1      	b.n	800c64c <_dtoa_r+0x274>
 800c6a8:	636f4361 	.word	0x636f4361
 800c6ac:	3fd287a7 	.word	0x3fd287a7
 800c6b0:	8b60c8b3 	.word	0x8b60c8b3
 800c6b4:	3fc68a28 	.word	0x3fc68a28
 800c6b8:	509f79fb 	.word	0x509f79fb
 800c6bc:	3fd34413 	.word	0x3fd34413
 800c6c0:	0800dfcd 	.word	0x0800dfcd
 800c6c4:	0800dfe4 	.word	0x0800dfe4
 800c6c8:	7ff00000 	.word	0x7ff00000
 800c6cc:	0800dfc9 	.word	0x0800dfc9
 800c6d0:	0800dfc0 	.word	0x0800dfc0
 800c6d4:	0800df9d 	.word	0x0800df9d
 800c6d8:	3ff80000 	.word	0x3ff80000
 800c6dc:	0800e0d0 	.word	0x0800e0d0
 800c6e0:	0800e03c 	.word	0x0800e03c
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e8:	e7d7      	b.n	800c69a <_dtoa_r+0x2c2>
 800c6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	9304      	str	r3, [sp, #16]
 800c6f0:	e7ba      	b.n	800c668 <_dtoa_r+0x290>
 800c6f2:	3101      	adds	r1, #1
 800c6f4:	0052      	lsls	r2, r2, #1
 800c6f6:	e7ba      	b.n	800c66e <_dtoa_r+0x296>
 800c6f8:	69e3      	ldr	r3, [r4, #28]
 800c6fa:	9a00      	ldr	r2, [sp, #0]
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	9b04      	ldr	r3, [sp, #16]
 800c700:	2b0e      	cmp	r3, #14
 800c702:	f200 80a8 	bhi.w	800c856 <_dtoa_r+0x47e>
 800c706:	2d00      	cmp	r5, #0
 800c708:	f000 80a5 	beq.w	800c856 <_dtoa_r+0x47e>
 800c70c:	f1bb 0f00 	cmp.w	fp, #0
 800c710:	dd38      	ble.n	800c784 <_dtoa_r+0x3ac>
 800c712:	4bc0      	ldr	r3, [pc, #768]	; (800ca14 <_dtoa_r+0x63c>)
 800c714:	f00b 020f 	and.w	r2, fp, #15
 800c718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c720:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c724:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c728:	d019      	beq.n	800c75e <_dtoa_r+0x386>
 800c72a:	4bbb      	ldr	r3, [pc, #748]	; (800ca18 <_dtoa_r+0x640>)
 800c72c:	ec51 0b18 	vmov	r0, r1, d8
 800c730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c734:	f7f4 f88a 	bl	800084c <__aeabi_ddiv>
 800c738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c73c:	f008 080f 	and.w	r8, r8, #15
 800c740:	2503      	movs	r5, #3
 800c742:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca18 <_dtoa_r+0x640>
 800c746:	f1b8 0f00 	cmp.w	r8, #0
 800c74a:	d10a      	bne.n	800c762 <_dtoa_r+0x38a>
 800c74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c750:	4632      	mov	r2, r6
 800c752:	463b      	mov	r3, r7
 800c754:	f7f4 f87a 	bl	800084c <__aeabi_ddiv>
 800c758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c75c:	e02b      	b.n	800c7b6 <_dtoa_r+0x3de>
 800c75e:	2502      	movs	r5, #2
 800c760:	e7ef      	b.n	800c742 <_dtoa_r+0x36a>
 800c762:	f018 0f01 	tst.w	r8, #1
 800c766:	d008      	beq.n	800c77a <_dtoa_r+0x3a2>
 800c768:	4630      	mov	r0, r6
 800c76a:	4639      	mov	r1, r7
 800c76c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	3501      	adds	r5, #1
 800c776:	4606      	mov	r6, r0
 800c778:	460f      	mov	r7, r1
 800c77a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c77e:	f109 0908 	add.w	r9, r9, #8
 800c782:	e7e0      	b.n	800c746 <_dtoa_r+0x36e>
 800c784:	f000 809f 	beq.w	800c8c6 <_dtoa_r+0x4ee>
 800c788:	f1cb 0600 	rsb	r6, fp, #0
 800c78c:	4ba1      	ldr	r3, [pc, #644]	; (800ca14 <_dtoa_r+0x63c>)
 800c78e:	4fa2      	ldr	r7, [pc, #648]	; (800ca18 <_dtoa_r+0x640>)
 800c790:	f006 020f 	and.w	r2, r6, #15
 800c794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	ec51 0b18 	vmov	r0, r1, d8
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a8:	1136      	asrs	r6, r6, #4
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	2502      	movs	r5, #2
 800c7ae:	2e00      	cmp	r6, #0
 800c7b0:	d17e      	bne.n	800c8b0 <_dtoa_r+0x4d8>
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1d0      	bne.n	800c758 <_dtoa_r+0x380>
 800c7b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 8084 	beq.w	800c8ca <_dtoa_r+0x4f2>
 800c7c2:	4b96      	ldr	r3, [pc, #600]	; (800ca1c <_dtoa_r+0x644>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f4 f987 	bl	8000adc <__aeabi_dcmplt>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d07b      	beq.n	800c8ca <_dtoa_r+0x4f2>
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d078      	beq.n	800c8ca <_dtoa_r+0x4f2>
 800c7d8:	9b01      	ldr	r3, [sp, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dd39      	ble.n	800c852 <_dtoa_r+0x47a>
 800c7de:	4b90      	ldr	r3, [pc, #576]	; (800ca20 <_dtoa_r+0x648>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f3 ff07 	bl	80005f8 <__aeabi_dmul>
 800c7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ee:	9e01      	ldr	r6, [sp, #4]
 800c7f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7f3 fe92 	bl	8000524 <__aeabi_i2d>
 800c800:	4642      	mov	r2, r8
 800c802:	464b      	mov	r3, r9
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	4b86      	ldr	r3, [pc, #536]	; (800ca24 <_dtoa_r+0x64c>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fd3e 	bl	800028c <__adddf3>
 800c810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c818:	9303      	str	r3, [sp, #12]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	d158      	bne.n	800c8d0 <_dtoa_r+0x4f8>
 800c81e:	4b82      	ldr	r3, [pc, #520]	; (800ca28 <_dtoa_r+0x650>)
 800c820:	2200      	movs	r2, #0
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 fd2f 	bl	8000288 <__aeabi_dsub>
 800c82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c82e:	4680      	mov	r8, r0
 800c830:	4689      	mov	r9, r1
 800c832:	f7f4 f971 	bl	8000b18 <__aeabi_dcmpgt>
 800c836:	2800      	cmp	r0, #0
 800c838:	f040 8296 	bne.w	800cd68 <_dtoa_r+0x990>
 800c83c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c840:	4640      	mov	r0, r8
 800c842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c846:	4649      	mov	r1, r9
 800c848:	f7f4 f948 	bl	8000adc <__aeabi_dcmplt>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f040 8289 	bne.w	800cd64 <_dtoa_r+0x98c>
 800c852:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f2c0 814e 	blt.w	800cafa <_dtoa_r+0x722>
 800c85e:	f1bb 0f0e 	cmp.w	fp, #14
 800c862:	f300 814a 	bgt.w	800cafa <_dtoa_r+0x722>
 800c866:	4b6b      	ldr	r3, [pc, #428]	; (800ca14 <_dtoa_r+0x63c>)
 800c868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	f280 80dc 	bge.w	800ca30 <_dtoa_r+0x658>
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f300 80d8 	bgt.w	800ca30 <_dtoa_r+0x658>
 800c880:	f040 826f 	bne.w	800cd62 <_dtoa_r+0x98a>
 800c884:	4b68      	ldr	r3, [pc, #416]	; (800ca28 <_dtoa_r+0x650>)
 800c886:	2200      	movs	r2, #0
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f3 feb4 	bl	80005f8 <__aeabi_dmul>
 800c890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c894:	f7f4 f936 	bl	8000b04 <__aeabi_dcmpge>
 800c898:	9e04      	ldr	r6, [sp, #16]
 800c89a:	4637      	mov	r7, r6
 800c89c:	2800      	cmp	r0, #0
 800c89e:	f040 8245 	bne.w	800cd2c <_dtoa_r+0x954>
 800c8a2:	9d00      	ldr	r5, [sp, #0]
 800c8a4:	2331      	movs	r3, #49	; 0x31
 800c8a6:	f805 3b01 	strb.w	r3, [r5], #1
 800c8aa:	f10b 0b01 	add.w	fp, fp, #1
 800c8ae:	e241      	b.n	800cd34 <_dtoa_r+0x95c>
 800c8b0:	07f2      	lsls	r2, r6, #31
 800c8b2:	d505      	bpl.n	800c8c0 <_dtoa_r+0x4e8>
 800c8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b8:	f7f3 fe9e 	bl	80005f8 <__aeabi_dmul>
 800c8bc:	3501      	adds	r5, #1
 800c8be:	2301      	movs	r3, #1
 800c8c0:	1076      	asrs	r6, r6, #1
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	e773      	b.n	800c7ae <_dtoa_r+0x3d6>
 800c8c6:	2502      	movs	r5, #2
 800c8c8:	e775      	b.n	800c7b6 <_dtoa_r+0x3de>
 800c8ca:	9e04      	ldr	r6, [sp, #16]
 800c8cc:	465f      	mov	r7, fp
 800c8ce:	e792      	b.n	800c7f6 <_dtoa_r+0x41e>
 800c8d0:	9900      	ldr	r1, [sp, #0]
 800c8d2:	4b50      	ldr	r3, [pc, #320]	; (800ca14 <_dtoa_r+0x63c>)
 800c8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8d8:	4431      	add	r1, r6
 800c8da:	9102      	str	r1, [sp, #8]
 800c8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8de:	eeb0 9a47 	vmov.f32	s18, s14
 800c8e2:	eef0 9a67 	vmov.f32	s19, s15
 800c8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	d044      	beq.n	800c97c <_dtoa_r+0x5a4>
 800c8f2:	494e      	ldr	r1, [pc, #312]	; (800ca2c <_dtoa_r+0x654>)
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	f7f3 ffa9 	bl	800084c <__aeabi_ddiv>
 800c8fa:	ec53 2b19 	vmov	r2, r3, d9
 800c8fe:	f7f3 fcc3 	bl	8000288 <__aeabi_dsub>
 800c902:	9d00      	ldr	r5, [sp, #0]
 800c904:	ec41 0b19 	vmov	d9, r0, r1
 800c908:	4649      	mov	r1, r9
 800c90a:	4640      	mov	r0, r8
 800c90c:	f7f4 f924 	bl	8000b58 <__aeabi_d2iz>
 800c910:	4606      	mov	r6, r0
 800c912:	f7f3 fe07 	bl	8000524 <__aeabi_i2d>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	f7f3 fcb3 	bl	8000288 <__aeabi_dsub>
 800c922:	3630      	adds	r6, #48	; 0x30
 800c924:	f805 6b01 	strb.w	r6, [r5], #1
 800c928:	ec53 2b19 	vmov	r2, r3, d9
 800c92c:	4680      	mov	r8, r0
 800c92e:	4689      	mov	r9, r1
 800c930:	f7f4 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800c934:	2800      	cmp	r0, #0
 800c936:	d164      	bne.n	800ca02 <_dtoa_r+0x62a>
 800c938:	4642      	mov	r2, r8
 800c93a:	464b      	mov	r3, r9
 800c93c:	4937      	ldr	r1, [pc, #220]	; (800ca1c <_dtoa_r+0x644>)
 800c93e:	2000      	movs	r0, #0
 800c940:	f7f3 fca2 	bl	8000288 <__aeabi_dsub>
 800c944:	ec53 2b19 	vmov	r2, r3, d9
 800c948:	f7f4 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f040 80b6 	bne.w	800cabe <_dtoa_r+0x6e6>
 800c952:	9b02      	ldr	r3, [sp, #8]
 800c954:	429d      	cmp	r5, r3
 800c956:	f43f af7c 	beq.w	800c852 <_dtoa_r+0x47a>
 800c95a:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <_dtoa_r+0x648>)
 800c95c:	ec51 0b19 	vmov	r0, r1, d9
 800c960:	2200      	movs	r2, #0
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	4b2e      	ldr	r3, [pc, #184]	; (800ca20 <_dtoa_r+0x648>)
 800c968:	ec41 0b19 	vmov	d9, r0, r1
 800c96c:	2200      	movs	r2, #0
 800c96e:	4640      	mov	r0, r8
 800c970:	4649      	mov	r1, r9
 800c972:	f7f3 fe41 	bl	80005f8 <__aeabi_dmul>
 800c976:	4680      	mov	r8, r0
 800c978:	4689      	mov	r9, r1
 800c97a:	e7c5      	b.n	800c908 <_dtoa_r+0x530>
 800c97c:	ec51 0b17 	vmov	r0, r1, d7
 800c980:	f7f3 fe3a 	bl	80005f8 <__aeabi_dmul>
 800c984:	9b02      	ldr	r3, [sp, #8]
 800c986:	9d00      	ldr	r5, [sp, #0]
 800c988:	930f      	str	r3, [sp, #60]	; 0x3c
 800c98a:	ec41 0b19 	vmov	d9, r0, r1
 800c98e:	4649      	mov	r1, r9
 800c990:	4640      	mov	r0, r8
 800c992:	f7f4 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800c996:	4606      	mov	r6, r0
 800c998:	f7f3 fdc4 	bl	8000524 <__aeabi_i2d>
 800c99c:	3630      	adds	r6, #48	; 0x30
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	f7f3 fc6f 	bl	8000288 <__aeabi_dsub>
 800c9aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c9ae:	9b02      	ldr	r3, [sp, #8]
 800c9b0:	429d      	cmp	r5, r3
 800c9b2:	4680      	mov	r8, r0
 800c9b4:	4689      	mov	r9, r1
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	d124      	bne.n	800ca06 <_dtoa_r+0x62e>
 800c9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ca2c <_dtoa_r+0x654>)
 800c9be:	ec51 0b19 	vmov	r0, r1, d9
 800c9c2:	f7f3 fc63 	bl	800028c <__adddf3>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f4 f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d173      	bne.n	800cabe <_dtoa_r+0x6e6>
 800c9d6:	ec53 2b19 	vmov	r2, r3, d9
 800c9da:	4914      	ldr	r1, [pc, #80]	; (800ca2c <_dtoa_r+0x654>)
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f7f3 fc53 	bl	8000288 <__aeabi_dsub>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f4 f877 	bl	8000adc <__aeabi_dcmplt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f43f af2f 	beq.w	800c852 <_dtoa_r+0x47a>
 800c9f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9f6:	1e6b      	subs	r3, r5, #1
 800c9f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9fe:	2b30      	cmp	r3, #48	; 0x30
 800ca00:	d0f8      	beq.n	800c9f4 <_dtoa_r+0x61c>
 800ca02:	46bb      	mov	fp, r7
 800ca04:	e04a      	b.n	800ca9c <_dtoa_r+0x6c4>
 800ca06:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <_dtoa_r+0x648>)
 800ca08:	f7f3 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ca0c:	4680      	mov	r8, r0
 800ca0e:	4689      	mov	r9, r1
 800ca10:	e7bd      	b.n	800c98e <_dtoa_r+0x5b6>
 800ca12:	bf00      	nop
 800ca14:	0800e0d0 	.word	0x0800e0d0
 800ca18:	0800e0a8 	.word	0x0800e0a8
 800ca1c:	3ff00000 	.word	0x3ff00000
 800ca20:	40240000 	.word	0x40240000
 800ca24:	401c0000 	.word	0x401c0000
 800ca28:	40140000 	.word	0x40140000
 800ca2c:	3fe00000 	.word	0x3fe00000
 800ca30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca34:	9d00      	ldr	r5, [sp, #0]
 800ca36:	4642      	mov	r2, r8
 800ca38:	464b      	mov	r3, r9
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f3 ff05 	bl	800084c <__aeabi_ddiv>
 800ca42:	f7f4 f889 	bl	8000b58 <__aeabi_d2iz>
 800ca46:	9001      	str	r0, [sp, #4]
 800ca48:	f7f3 fd6c 	bl	8000524 <__aeabi_i2d>
 800ca4c:	4642      	mov	r2, r8
 800ca4e:	464b      	mov	r3, r9
 800ca50:	f7f3 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4630      	mov	r0, r6
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	f7f3 fc14 	bl	8000288 <__aeabi_dsub>
 800ca60:	9e01      	ldr	r6, [sp, #4]
 800ca62:	9f04      	ldr	r7, [sp, #16]
 800ca64:	3630      	adds	r6, #48	; 0x30
 800ca66:	f805 6b01 	strb.w	r6, [r5], #1
 800ca6a:	9e00      	ldr	r6, [sp, #0]
 800ca6c:	1bae      	subs	r6, r5, r6
 800ca6e:	42b7      	cmp	r7, r6
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	d134      	bne.n	800cae0 <_dtoa_r+0x708>
 800ca76:	f7f3 fc09 	bl	800028c <__adddf3>
 800ca7a:	4642      	mov	r2, r8
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	f7f4 f849 	bl	8000b18 <__aeabi_dcmpgt>
 800ca86:	b9c8      	cbnz	r0, 800cabc <_dtoa_r+0x6e4>
 800ca88:	4642      	mov	r2, r8
 800ca8a:	464b      	mov	r3, r9
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	4639      	mov	r1, r7
 800ca90:	f7f4 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca94:	b110      	cbz	r0, 800ca9c <_dtoa_r+0x6c4>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	07db      	lsls	r3, r3, #31
 800ca9a:	d40f      	bmi.n	800cabc <_dtoa_r+0x6e4>
 800ca9c:	4651      	mov	r1, sl
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 fb18 	bl	800d0d4 <_Bfree>
 800caa4:	2300      	movs	r3, #0
 800caa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa8:	702b      	strb	r3, [r5, #0]
 800caaa:	f10b 0301 	add.w	r3, fp, #1
 800caae:	6013      	str	r3, [r2, #0]
 800cab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f43f ace2 	beq.w	800c47c <_dtoa_r+0xa4>
 800cab8:	601d      	str	r5, [r3, #0]
 800caba:	e4df      	b.n	800c47c <_dtoa_r+0xa4>
 800cabc:	465f      	mov	r7, fp
 800cabe:	462b      	mov	r3, r5
 800cac0:	461d      	mov	r5, r3
 800cac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cac6:	2a39      	cmp	r2, #57	; 0x39
 800cac8:	d106      	bne.n	800cad8 <_dtoa_r+0x700>
 800caca:	9a00      	ldr	r2, [sp, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d1f7      	bne.n	800cac0 <_dtoa_r+0x6e8>
 800cad0:	9900      	ldr	r1, [sp, #0]
 800cad2:	2230      	movs	r2, #48	; 0x30
 800cad4:	3701      	adds	r7, #1
 800cad6:	700a      	strb	r2, [r1, #0]
 800cad8:	781a      	ldrb	r2, [r3, #0]
 800cada:	3201      	adds	r2, #1
 800cadc:	701a      	strb	r2, [r3, #0]
 800cade:	e790      	b.n	800ca02 <_dtoa_r+0x62a>
 800cae0:	4ba3      	ldr	r3, [pc, #652]	; (800cd70 <_dtoa_r+0x998>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	f7f3 fd88 	bl	80005f8 <__aeabi_dmul>
 800cae8:	2200      	movs	r2, #0
 800caea:	2300      	movs	r3, #0
 800caec:	4606      	mov	r6, r0
 800caee:	460f      	mov	r7, r1
 800caf0:	f7f3 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d09e      	beq.n	800ca36 <_dtoa_r+0x65e>
 800caf8:	e7d0      	b.n	800ca9c <_dtoa_r+0x6c4>
 800cafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	f000 80ca 	beq.w	800cc96 <_dtoa_r+0x8be>
 800cb02:	9a07      	ldr	r2, [sp, #28]
 800cb04:	2a01      	cmp	r2, #1
 800cb06:	f300 80ad 	bgt.w	800cc64 <_dtoa_r+0x88c>
 800cb0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb0c:	2a00      	cmp	r2, #0
 800cb0e:	f000 80a5 	beq.w	800cc5c <_dtoa_r+0x884>
 800cb12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb16:	9e08      	ldr	r6, [sp, #32]
 800cb18:	9d05      	ldr	r5, [sp, #20]
 800cb1a:	9a05      	ldr	r2, [sp, #20]
 800cb1c:	441a      	add	r2, r3
 800cb1e:	9205      	str	r2, [sp, #20]
 800cb20:	9a06      	ldr	r2, [sp, #24]
 800cb22:	2101      	movs	r1, #1
 800cb24:	441a      	add	r2, r3
 800cb26:	4620      	mov	r0, r4
 800cb28:	9206      	str	r2, [sp, #24]
 800cb2a:	f000 fb89 	bl	800d240 <__i2b>
 800cb2e:	4607      	mov	r7, r0
 800cb30:	b165      	cbz	r5, 800cb4c <_dtoa_r+0x774>
 800cb32:	9b06      	ldr	r3, [sp, #24]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dd09      	ble.n	800cb4c <_dtoa_r+0x774>
 800cb38:	42ab      	cmp	r3, r5
 800cb3a:	9a05      	ldr	r2, [sp, #20]
 800cb3c:	bfa8      	it	ge
 800cb3e:	462b      	movge	r3, r5
 800cb40:	1ad2      	subs	r2, r2, r3
 800cb42:	9205      	str	r2, [sp, #20]
 800cb44:	9a06      	ldr	r2, [sp, #24]
 800cb46:	1aed      	subs	r5, r5, r3
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	9306      	str	r3, [sp, #24]
 800cb4c:	9b08      	ldr	r3, [sp, #32]
 800cb4e:	b1f3      	cbz	r3, 800cb8e <_dtoa_r+0x7b6>
 800cb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 80a3 	beq.w	800cc9e <_dtoa_r+0x8c6>
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	dd10      	ble.n	800cb7e <_dtoa_r+0x7a6>
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	4632      	mov	r2, r6
 800cb60:	4620      	mov	r0, r4
 800cb62:	f000 fc2d 	bl	800d3c0 <__pow5mult>
 800cb66:	4652      	mov	r2, sl
 800cb68:	4601      	mov	r1, r0
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fb7d 	bl	800d26c <__multiply>
 800cb72:	4651      	mov	r1, sl
 800cb74:	4680      	mov	r8, r0
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 faac 	bl	800d0d4 <_Bfree>
 800cb7c:	46c2      	mov	sl, r8
 800cb7e:	9b08      	ldr	r3, [sp, #32]
 800cb80:	1b9a      	subs	r2, r3, r6
 800cb82:	d004      	beq.n	800cb8e <_dtoa_r+0x7b6>
 800cb84:	4651      	mov	r1, sl
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 fc1a 	bl	800d3c0 <__pow5mult>
 800cb8c:	4682      	mov	sl, r0
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fb55 	bl	800d240 <__i2b>
 800cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	f340 8081 	ble.w	800cca2 <_dtoa_r+0x8ca>
 800cba0:	461a      	mov	r2, r3
 800cba2:	4601      	mov	r1, r0
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 fc0b 	bl	800d3c0 <__pow5mult>
 800cbaa:	9b07      	ldr	r3, [sp, #28]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	4606      	mov	r6, r0
 800cbb0:	dd7a      	ble.n	800cca8 <_dtoa_r+0x8d0>
 800cbb2:	f04f 0800 	mov.w	r8, #0
 800cbb6:	6933      	ldr	r3, [r6, #16]
 800cbb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbbc:	6918      	ldr	r0, [r3, #16]
 800cbbe:	f000 faf1 	bl	800d1a4 <__hi0bits>
 800cbc2:	f1c0 0020 	rsb	r0, r0, #32
 800cbc6:	9b06      	ldr	r3, [sp, #24]
 800cbc8:	4418      	add	r0, r3
 800cbca:	f010 001f 	ands.w	r0, r0, #31
 800cbce:	f000 8094 	beq.w	800ccfa <_dtoa_r+0x922>
 800cbd2:	f1c0 0320 	rsb	r3, r0, #32
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	f340 8085 	ble.w	800cce6 <_dtoa_r+0x90e>
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	f1c0 001c 	rsb	r0, r0, #28
 800cbe2:	4403      	add	r3, r0
 800cbe4:	9305      	str	r3, [sp, #20]
 800cbe6:	9b06      	ldr	r3, [sp, #24]
 800cbe8:	4403      	add	r3, r0
 800cbea:	4405      	add	r5, r0
 800cbec:	9306      	str	r3, [sp, #24]
 800cbee:	9b05      	ldr	r3, [sp, #20]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dd05      	ble.n	800cc00 <_dtoa_r+0x828>
 800cbf4:	4651      	mov	r1, sl
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fc3b 	bl	800d474 <__lshift>
 800cbfe:	4682      	mov	sl, r0
 800cc00:	9b06      	ldr	r3, [sp, #24]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dd05      	ble.n	800cc12 <_dtoa_r+0x83a>
 800cc06:	4631      	mov	r1, r6
 800cc08:	461a      	mov	r2, r3
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 fc32 	bl	800d474 <__lshift>
 800cc10:	4606      	mov	r6, r0
 800cc12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d072      	beq.n	800ccfe <_dtoa_r+0x926>
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	f000 fc96 	bl	800d54c <__mcmp>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	da6c      	bge.n	800ccfe <_dtoa_r+0x926>
 800cc24:	2300      	movs	r3, #0
 800cc26:	4651      	mov	r1, sl
 800cc28:	220a      	movs	r2, #10
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fa74 	bl	800d118 <__multadd>
 800cc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc36:	4682      	mov	sl, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f000 81b0 	beq.w	800cf9e <_dtoa_r+0xbc6>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4639      	mov	r1, r7
 800cc42:	220a      	movs	r2, #10
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 fa67 	bl	800d118 <__multadd>
 800cc4a:	9b01      	ldr	r3, [sp, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	4607      	mov	r7, r0
 800cc50:	f300 8096 	bgt.w	800cd80 <_dtoa_r+0x9a8>
 800cc54:	9b07      	ldr	r3, [sp, #28]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	dc59      	bgt.n	800cd0e <_dtoa_r+0x936>
 800cc5a:	e091      	b.n	800cd80 <_dtoa_r+0x9a8>
 800cc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc62:	e758      	b.n	800cb16 <_dtoa_r+0x73e>
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	1e5e      	subs	r6, r3, #1
 800cc68:	9b08      	ldr	r3, [sp, #32]
 800cc6a:	42b3      	cmp	r3, r6
 800cc6c:	bfbf      	itttt	lt
 800cc6e:	9b08      	ldrlt	r3, [sp, #32]
 800cc70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc72:	9608      	strlt	r6, [sp, #32]
 800cc74:	1af3      	sublt	r3, r6, r3
 800cc76:	bfb4      	ite	lt
 800cc78:	18d2      	addlt	r2, r2, r3
 800cc7a:	1b9e      	subge	r6, r3, r6
 800cc7c:	9b04      	ldr	r3, [sp, #16]
 800cc7e:	bfbc      	itt	lt
 800cc80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc82:	2600      	movlt	r6, #0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bfb7      	itett	lt
 800cc88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc90:	1a9d      	sublt	r5, r3, r2
 800cc92:	2300      	movlt	r3, #0
 800cc94:	e741      	b.n	800cb1a <_dtoa_r+0x742>
 800cc96:	9e08      	ldr	r6, [sp, #32]
 800cc98:	9d05      	ldr	r5, [sp, #20]
 800cc9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc9c:	e748      	b.n	800cb30 <_dtoa_r+0x758>
 800cc9e:	9a08      	ldr	r2, [sp, #32]
 800cca0:	e770      	b.n	800cb84 <_dtoa_r+0x7ac>
 800cca2:	9b07      	ldr	r3, [sp, #28]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	dc19      	bgt.n	800ccdc <_dtoa_r+0x904>
 800cca8:	9b02      	ldr	r3, [sp, #8]
 800ccaa:	b9bb      	cbnz	r3, 800ccdc <_dtoa_r+0x904>
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb2:	b99b      	cbnz	r3, 800ccdc <_dtoa_r+0x904>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccba:	0d1b      	lsrs	r3, r3, #20
 800ccbc:	051b      	lsls	r3, r3, #20
 800ccbe:	b183      	cbz	r3, 800cce2 <_dtoa_r+0x90a>
 800ccc0:	9b05      	ldr	r3, [sp, #20]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	9305      	str	r3, [sp, #20]
 800ccc6:	9b06      	ldr	r3, [sp, #24]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	9306      	str	r3, [sp, #24]
 800cccc:	f04f 0801 	mov.w	r8, #1
 800ccd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f47f af6f 	bne.w	800cbb6 <_dtoa_r+0x7de>
 800ccd8:	2001      	movs	r0, #1
 800ccda:	e774      	b.n	800cbc6 <_dtoa_r+0x7ee>
 800ccdc:	f04f 0800 	mov.w	r8, #0
 800cce0:	e7f6      	b.n	800ccd0 <_dtoa_r+0x8f8>
 800cce2:	4698      	mov	r8, r3
 800cce4:	e7f4      	b.n	800ccd0 <_dtoa_r+0x8f8>
 800cce6:	d082      	beq.n	800cbee <_dtoa_r+0x816>
 800cce8:	9a05      	ldr	r2, [sp, #20]
 800ccea:	331c      	adds	r3, #28
 800ccec:	441a      	add	r2, r3
 800ccee:	9205      	str	r2, [sp, #20]
 800ccf0:	9a06      	ldr	r2, [sp, #24]
 800ccf2:	441a      	add	r2, r3
 800ccf4:	441d      	add	r5, r3
 800ccf6:	9206      	str	r2, [sp, #24]
 800ccf8:	e779      	b.n	800cbee <_dtoa_r+0x816>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	e7f4      	b.n	800cce8 <_dtoa_r+0x910>
 800ccfe:	9b04      	ldr	r3, [sp, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dc37      	bgt.n	800cd74 <_dtoa_r+0x99c>
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	dd34      	ble.n	800cd74 <_dtoa_r+0x99c>
 800cd0a:	9b04      	ldr	r3, [sp, #16]
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	9b01      	ldr	r3, [sp, #4]
 800cd10:	b963      	cbnz	r3, 800cd2c <_dtoa_r+0x954>
 800cd12:	4631      	mov	r1, r6
 800cd14:	2205      	movs	r2, #5
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 f9fe 	bl	800d118 <__multadd>
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	4606      	mov	r6, r0
 800cd20:	4650      	mov	r0, sl
 800cd22:	f000 fc13 	bl	800d54c <__mcmp>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f73f adbb 	bgt.w	800c8a2 <_dtoa_r+0x4ca>
 800cd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd2e:	9d00      	ldr	r5, [sp, #0]
 800cd30:	ea6f 0b03 	mvn.w	fp, r3
 800cd34:	f04f 0800 	mov.w	r8, #0
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 f9ca 	bl	800d0d4 <_Bfree>
 800cd40:	2f00      	cmp	r7, #0
 800cd42:	f43f aeab 	beq.w	800ca9c <_dtoa_r+0x6c4>
 800cd46:	f1b8 0f00 	cmp.w	r8, #0
 800cd4a:	d005      	beq.n	800cd58 <_dtoa_r+0x980>
 800cd4c:	45b8      	cmp	r8, r7
 800cd4e:	d003      	beq.n	800cd58 <_dtoa_r+0x980>
 800cd50:	4641      	mov	r1, r8
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 f9be 	bl	800d0d4 <_Bfree>
 800cd58:	4639      	mov	r1, r7
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f9ba 	bl	800d0d4 <_Bfree>
 800cd60:	e69c      	b.n	800ca9c <_dtoa_r+0x6c4>
 800cd62:	2600      	movs	r6, #0
 800cd64:	4637      	mov	r7, r6
 800cd66:	e7e1      	b.n	800cd2c <_dtoa_r+0x954>
 800cd68:	46bb      	mov	fp, r7
 800cd6a:	4637      	mov	r7, r6
 800cd6c:	e599      	b.n	800c8a2 <_dtoa_r+0x4ca>
 800cd6e:	bf00      	nop
 800cd70:	40240000 	.word	0x40240000
 800cd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80c8 	beq.w	800cf0c <_dtoa_r+0xb34>
 800cd7c:	9b04      	ldr	r3, [sp, #16]
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	dd05      	ble.n	800cd90 <_dtoa_r+0x9b8>
 800cd84:	4639      	mov	r1, r7
 800cd86:	462a      	mov	r2, r5
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 fb73 	bl	800d474 <__lshift>
 800cd8e:	4607      	mov	r7, r0
 800cd90:	f1b8 0f00 	cmp.w	r8, #0
 800cd94:	d05b      	beq.n	800ce4e <_dtoa_r+0xa76>
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 f95b 	bl	800d054 <_Balloc>
 800cd9e:	4605      	mov	r5, r0
 800cda0:	b928      	cbnz	r0, 800cdae <_dtoa_r+0x9d6>
 800cda2:	4b83      	ldr	r3, [pc, #524]	; (800cfb0 <_dtoa_r+0xbd8>)
 800cda4:	4602      	mov	r2, r0
 800cda6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cdaa:	f7ff bb2e 	b.w	800c40a <_dtoa_r+0x32>
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	3202      	adds	r2, #2
 800cdb2:	0092      	lsls	r2, r2, #2
 800cdb4:	f107 010c 	add.w	r1, r7, #12
 800cdb8:	300c      	adds	r0, #12
 800cdba:	f000 ff3d 	bl	800dc38 <memcpy>
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 fb56 	bl	800d474 <__lshift>
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	9308      	str	r3, [sp, #32]
 800cdd6:	9b02      	ldr	r3, [sp, #8]
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	46b8      	mov	r8, r7
 800cdde:	9306      	str	r3, [sp, #24]
 800cde0:	4607      	mov	r7, r0
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	4631      	mov	r1, r6
 800cde6:	3b01      	subs	r3, #1
 800cde8:	4650      	mov	r0, sl
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	f7ff fa69 	bl	800c2c2 <quorem>
 800cdf0:	4641      	mov	r1, r8
 800cdf2:	9002      	str	r0, [sp, #8]
 800cdf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdf8:	4650      	mov	r0, sl
 800cdfa:	f000 fba7 	bl	800d54c <__mcmp>
 800cdfe:	463a      	mov	r2, r7
 800ce00:	9005      	str	r0, [sp, #20]
 800ce02:	4631      	mov	r1, r6
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fbbd 	bl	800d584 <__mdiff>
 800ce0a:	68c2      	ldr	r2, [r0, #12]
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	bb02      	cbnz	r2, 800ce52 <_dtoa_r+0xa7a>
 800ce10:	4601      	mov	r1, r0
 800ce12:	4650      	mov	r0, sl
 800ce14:	f000 fb9a 	bl	800d54c <__mcmp>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce20:	f000 f958 	bl	800d0d4 <_Bfree>
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce28:	9d04      	ldr	r5, [sp, #16]
 800ce2a:	ea43 0102 	orr.w	r1, r3, r2
 800ce2e:	9b06      	ldr	r3, [sp, #24]
 800ce30:	4319      	orrs	r1, r3
 800ce32:	d110      	bne.n	800ce56 <_dtoa_r+0xa7e>
 800ce34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce38:	d029      	beq.n	800ce8e <_dtoa_r+0xab6>
 800ce3a:	9b05      	ldr	r3, [sp, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	dd02      	ble.n	800ce46 <_dtoa_r+0xa6e>
 800ce40:	9b02      	ldr	r3, [sp, #8]
 800ce42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	f883 9000 	strb.w	r9, [r3]
 800ce4c:	e774      	b.n	800cd38 <_dtoa_r+0x960>
 800ce4e:	4638      	mov	r0, r7
 800ce50:	e7ba      	b.n	800cdc8 <_dtoa_r+0x9f0>
 800ce52:	2201      	movs	r2, #1
 800ce54:	e7e1      	b.n	800ce1a <_dtoa_r+0xa42>
 800ce56:	9b05      	ldr	r3, [sp, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	db04      	blt.n	800ce66 <_dtoa_r+0xa8e>
 800ce5c:	9907      	ldr	r1, [sp, #28]
 800ce5e:	430b      	orrs	r3, r1
 800ce60:	9906      	ldr	r1, [sp, #24]
 800ce62:	430b      	orrs	r3, r1
 800ce64:	d120      	bne.n	800cea8 <_dtoa_r+0xad0>
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	dded      	ble.n	800ce46 <_dtoa_r+0xa6e>
 800ce6a:	4651      	mov	r1, sl
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 fb00 	bl	800d474 <__lshift>
 800ce74:	4631      	mov	r1, r6
 800ce76:	4682      	mov	sl, r0
 800ce78:	f000 fb68 	bl	800d54c <__mcmp>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	dc03      	bgt.n	800ce88 <_dtoa_r+0xab0>
 800ce80:	d1e1      	bne.n	800ce46 <_dtoa_r+0xa6e>
 800ce82:	f019 0f01 	tst.w	r9, #1
 800ce86:	d0de      	beq.n	800ce46 <_dtoa_r+0xa6e>
 800ce88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce8c:	d1d8      	bne.n	800ce40 <_dtoa_r+0xa68>
 800ce8e:	9a01      	ldr	r2, [sp, #4]
 800ce90:	2339      	movs	r3, #57	; 0x39
 800ce92:	7013      	strb	r3, [r2, #0]
 800ce94:	462b      	mov	r3, r5
 800ce96:	461d      	mov	r5, r3
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce9e:	2a39      	cmp	r2, #57	; 0x39
 800cea0:	d06c      	beq.n	800cf7c <_dtoa_r+0xba4>
 800cea2:	3201      	adds	r2, #1
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	e747      	b.n	800cd38 <_dtoa_r+0x960>
 800cea8:	2a00      	cmp	r2, #0
 800ceaa:	dd07      	ble.n	800cebc <_dtoa_r+0xae4>
 800ceac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ceb0:	d0ed      	beq.n	800ce8e <_dtoa_r+0xab6>
 800ceb2:	9a01      	ldr	r2, [sp, #4]
 800ceb4:	f109 0301 	add.w	r3, r9, #1
 800ceb8:	7013      	strb	r3, [r2, #0]
 800ceba:	e73d      	b.n	800cd38 <_dtoa_r+0x960>
 800cebc:	9b04      	ldr	r3, [sp, #16]
 800cebe:	9a08      	ldr	r2, [sp, #32]
 800cec0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d043      	beq.n	800cf50 <_dtoa_r+0xb78>
 800cec8:	4651      	mov	r1, sl
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 f922 	bl	800d118 <__multadd>
 800ced4:	45b8      	cmp	r8, r7
 800ced6:	4682      	mov	sl, r0
 800ced8:	f04f 0300 	mov.w	r3, #0
 800cedc:	f04f 020a 	mov.w	r2, #10
 800cee0:	4641      	mov	r1, r8
 800cee2:	4620      	mov	r0, r4
 800cee4:	d107      	bne.n	800cef6 <_dtoa_r+0xb1e>
 800cee6:	f000 f917 	bl	800d118 <__multadd>
 800ceea:	4680      	mov	r8, r0
 800ceec:	4607      	mov	r7, r0
 800ceee:	9b04      	ldr	r3, [sp, #16]
 800cef0:	3301      	adds	r3, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	e775      	b.n	800cde2 <_dtoa_r+0xa0a>
 800cef6:	f000 f90f 	bl	800d118 <__multadd>
 800cefa:	4639      	mov	r1, r7
 800cefc:	4680      	mov	r8, r0
 800cefe:	2300      	movs	r3, #0
 800cf00:	220a      	movs	r2, #10
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 f908 	bl	800d118 <__multadd>
 800cf08:	4607      	mov	r7, r0
 800cf0a:	e7f0      	b.n	800ceee <_dtoa_r+0xb16>
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	9d00      	ldr	r5, [sp, #0]
 800cf12:	4631      	mov	r1, r6
 800cf14:	4650      	mov	r0, sl
 800cf16:	f7ff f9d4 	bl	800c2c2 <quorem>
 800cf1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf1e:	9b00      	ldr	r3, [sp, #0]
 800cf20:	f805 9b01 	strb.w	r9, [r5], #1
 800cf24:	1aea      	subs	r2, r5, r3
 800cf26:	9b01      	ldr	r3, [sp, #4]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	dd07      	ble.n	800cf3c <_dtoa_r+0xb64>
 800cf2c:	4651      	mov	r1, sl
 800cf2e:	2300      	movs	r3, #0
 800cf30:	220a      	movs	r2, #10
 800cf32:	4620      	mov	r0, r4
 800cf34:	f000 f8f0 	bl	800d118 <__multadd>
 800cf38:	4682      	mov	sl, r0
 800cf3a:	e7ea      	b.n	800cf12 <_dtoa_r+0xb3a>
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	bfc8      	it	gt
 800cf42:	461d      	movgt	r5, r3
 800cf44:	9b00      	ldr	r3, [sp, #0]
 800cf46:	bfd8      	it	le
 800cf48:	2501      	movle	r5, #1
 800cf4a:	441d      	add	r5, r3
 800cf4c:	f04f 0800 	mov.w	r8, #0
 800cf50:	4651      	mov	r1, sl
 800cf52:	2201      	movs	r2, #1
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fa8d 	bl	800d474 <__lshift>
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4682      	mov	sl, r0
 800cf5e:	f000 faf5 	bl	800d54c <__mcmp>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	dc96      	bgt.n	800ce94 <_dtoa_r+0xabc>
 800cf66:	d102      	bne.n	800cf6e <_dtoa_r+0xb96>
 800cf68:	f019 0f01 	tst.w	r9, #1
 800cf6c:	d192      	bne.n	800ce94 <_dtoa_r+0xabc>
 800cf6e:	462b      	mov	r3, r5
 800cf70:	461d      	mov	r5, r3
 800cf72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf76:	2a30      	cmp	r2, #48	; 0x30
 800cf78:	d0fa      	beq.n	800cf70 <_dtoa_r+0xb98>
 800cf7a:	e6dd      	b.n	800cd38 <_dtoa_r+0x960>
 800cf7c:	9a00      	ldr	r2, [sp, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d189      	bne.n	800ce96 <_dtoa_r+0xabe>
 800cf82:	f10b 0b01 	add.w	fp, fp, #1
 800cf86:	2331      	movs	r3, #49	; 0x31
 800cf88:	e796      	b.n	800ceb8 <_dtoa_r+0xae0>
 800cf8a:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <_dtoa_r+0xbdc>)
 800cf8c:	f7ff ba99 	b.w	800c4c2 <_dtoa_r+0xea>
 800cf90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f47f aa6d 	bne.w	800c472 <_dtoa_r+0x9a>
 800cf98:	4b07      	ldr	r3, [pc, #28]	; (800cfb8 <_dtoa_r+0xbe0>)
 800cf9a:	f7ff ba92 	b.w	800c4c2 <_dtoa_r+0xea>
 800cf9e:	9b01      	ldr	r3, [sp, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dcb5      	bgt.n	800cf10 <_dtoa_r+0xb38>
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	f73f aeb1 	bgt.w	800cd0e <_dtoa_r+0x936>
 800cfac:	e7b0      	b.n	800cf10 <_dtoa_r+0xb38>
 800cfae:	bf00      	nop
 800cfb0:	0800e03c 	.word	0x0800e03c
 800cfb4:	0800df9c 	.word	0x0800df9c
 800cfb8:	0800dfc0 	.word	0x0800dfc0

0800cfbc <_free_r>:
 800cfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfbe:	2900      	cmp	r1, #0
 800cfc0:	d044      	beq.n	800d04c <_free_r+0x90>
 800cfc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfc6:	9001      	str	r0, [sp, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f1a1 0404 	sub.w	r4, r1, #4
 800cfce:	bfb8      	it	lt
 800cfd0:	18e4      	addlt	r4, r4, r3
 800cfd2:	f7fe fa6d 	bl	800b4b0 <__malloc_lock>
 800cfd6:	4a1e      	ldr	r2, [pc, #120]	; (800d050 <_free_r+0x94>)
 800cfd8:	9801      	ldr	r0, [sp, #4]
 800cfda:	6813      	ldr	r3, [r2, #0]
 800cfdc:	b933      	cbnz	r3, 800cfec <_free_r+0x30>
 800cfde:	6063      	str	r3, [r4, #4]
 800cfe0:	6014      	str	r4, [r2, #0]
 800cfe2:	b003      	add	sp, #12
 800cfe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfe8:	f7fe ba68 	b.w	800b4bc <__malloc_unlock>
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	d908      	bls.n	800d002 <_free_r+0x46>
 800cff0:	6825      	ldr	r5, [r4, #0]
 800cff2:	1961      	adds	r1, r4, r5
 800cff4:	428b      	cmp	r3, r1
 800cff6:	bf01      	itttt	eq
 800cff8:	6819      	ldreq	r1, [r3, #0]
 800cffa:	685b      	ldreq	r3, [r3, #4]
 800cffc:	1949      	addeq	r1, r1, r5
 800cffe:	6021      	streq	r1, [r4, #0]
 800d000:	e7ed      	b.n	800cfde <_free_r+0x22>
 800d002:	461a      	mov	r2, r3
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	b10b      	cbz	r3, 800d00c <_free_r+0x50>
 800d008:	42a3      	cmp	r3, r4
 800d00a:	d9fa      	bls.n	800d002 <_free_r+0x46>
 800d00c:	6811      	ldr	r1, [r2, #0]
 800d00e:	1855      	adds	r5, r2, r1
 800d010:	42a5      	cmp	r5, r4
 800d012:	d10b      	bne.n	800d02c <_free_r+0x70>
 800d014:	6824      	ldr	r4, [r4, #0]
 800d016:	4421      	add	r1, r4
 800d018:	1854      	adds	r4, r2, r1
 800d01a:	42a3      	cmp	r3, r4
 800d01c:	6011      	str	r1, [r2, #0]
 800d01e:	d1e0      	bne.n	800cfe2 <_free_r+0x26>
 800d020:	681c      	ldr	r4, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	6053      	str	r3, [r2, #4]
 800d026:	440c      	add	r4, r1
 800d028:	6014      	str	r4, [r2, #0]
 800d02a:	e7da      	b.n	800cfe2 <_free_r+0x26>
 800d02c:	d902      	bls.n	800d034 <_free_r+0x78>
 800d02e:	230c      	movs	r3, #12
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	e7d6      	b.n	800cfe2 <_free_r+0x26>
 800d034:	6825      	ldr	r5, [r4, #0]
 800d036:	1961      	adds	r1, r4, r5
 800d038:	428b      	cmp	r3, r1
 800d03a:	bf04      	itt	eq
 800d03c:	6819      	ldreq	r1, [r3, #0]
 800d03e:	685b      	ldreq	r3, [r3, #4]
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	bf04      	itt	eq
 800d044:	1949      	addeq	r1, r1, r5
 800d046:	6021      	streq	r1, [r4, #0]
 800d048:	6054      	str	r4, [r2, #4]
 800d04a:	e7ca      	b.n	800cfe2 <_free_r+0x26>
 800d04c:	b003      	add	sp, #12
 800d04e:	bd30      	pop	{r4, r5, pc}
 800d050:	20000aa8 	.word	0x20000aa8

0800d054 <_Balloc>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	69c6      	ldr	r6, [r0, #28]
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	b976      	cbnz	r6, 800d07c <_Balloc+0x28>
 800d05e:	2010      	movs	r0, #16
 800d060:	f7fe f976 	bl	800b350 <malloc>
 800d064:	4602      	mov	r2, r0
 800d066:	61e0      	str	r0, [r4, #28]
 800d068:	b920      	cbnz	r0, 800d074 <_Balloc+0x20>
 800d06a:	4b18      	ldr	r3, [pc, #96]	; (800d0cc <_Balloc+0x78>)
 800d06c:	4818      	ldr	r0, [pc, #96]	; (800d0d0 <_Balloc+0x7c>)
 800d06e:	216b      	movs	r1, #107	; 0x6b
 800d070:	f000 fdf0 	bl	800dc54 <__assert_func>
 800d074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d078:	6006      	str	r6, [r0, #0]
 800d07a:	60c6      	str	r6, [r0, #12]
 800d07c:	69e6      	ldr	r6, [r4, #28]
 800d07e:	68f3      	ldr	r3, [r6, #12]
 800d080:	b183      	cbz	r3, 800d0a4 <_Balloc+0x50>
 800d082:	69e3      	ldr	r3, [r4, #28]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d08a:	b9b8      	cbnz	r0, 800d0bc <_Balloc+0x68>
 800d08c:	2101      	movs	r1, #1
 800d08e:	fa01 f605 	lsl.w	r6, r1, r5
 800d092:	1d72      	adds	r2, r6, #5
 800d094:	0092      	lsls	r2, r2, #2
 800d096:	4620      	mov	r0, r4
 800d098:	f000 fdfa 	bl	800dc90 <_calloc_r>
 800d09c:	b160      	cbz	r0, 800d0b8 <_Balloc+0x64>
 800d09e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0a2:	e00e      	b.n	800d0c2 <_Balloc+0x6e>
 800d0a4:	2221      	movs	r2, #33	; 0x21
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fdf1 	bl	800dc90 <_calloc_r>
 800d0ae:	69e3      	ldr	r3, [r4, #28]
 800d0b0:	60f0      	str	r0, [r6, #12]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e4      	bne.n	800d082 <_Balloc+0x2e>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	6802      	ldr	r2, [r0, #0]
 800d0be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0c8:	e7f7      	b.n	800d0ba <_Balloc+0x66>
 800d0ca:	bf00      	nop
 800d0cc:	0800dfcd 	.word	0x0800dfcd
 800d0d0:	0800e04d 	.word	0x0800e04d

0800d0d4 <_Bfree>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	69c6      	ldr	r6, [r0, #28]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b976      	cbnz	r6, 800d0fc <_Bfree+0x28>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f7fe f936 	bl	800b350 <malloc>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	61e8      	str	r0, [r5, #28]
 800d0e8:	b920      	cbnz	r0, 800d0f4 <_Bfree+0x20>
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <_Bfree+0x3c>)
 800d0ec:	4809      	ldr	r0, [pc, #36]	; (800d114 <_Bfree+0x40>)
 800d0ee:	218f      	movs	r1, #143	; 0x8f
 800d0f0:	f000 fdb0 	bl	800dc54 <__assert_func>
 800d0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f8:	6006      	str	r6, [r0, #0]
 800d0fa:	60c6      	str	r6, [r0, #12]
 800d0fc:	b13c      	cbz	r4, 800d10e <_Bfree+0x3a>
 800d0fe:	69eb      	ldr	r3, [r5, #28]
 800d100:	6862      	ldr	r2, [r4, #4]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d108:	6021      	str	r1, [r4, #0]
 800d10a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	0800dfcd 	.word	0x0800dfcd
 800d114:	0800e04d 	.word	0x0800e04d

0800d118 <__multadd>:
 800d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11c:	690d      	ldr	r5, [r1, #16]
 800d11e:	4607      	mov	r7, r0
 800d120:	460c      	mov	r4, r1
 800d122:	461e      	mov	r6, r3
 800d124:	f101 0c14 	add.w	ip, r1, #20
 800d128:	2000      	movs	r0, #0
 800d12a:	f8dc 3000 	ldr.w	r3, [ip]
 800d12e:	b299      	uxth	r1, r3
 800d130:	fb02 6101 	mla	r1, r2, r1, r6
 800d134:	0c1e      	lsrs	r6, r3, #16
 800d136:	0c0b      	lsrs	r3, r1, #16
 800d138:	fb02 3306 	mla	r3, r2, r6, r3
 800d13c:	b289      	uxth	r1, r1
 800d13e:	3001      	adds	r0, #1
 800d140:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d144:	4285      	cmp	r5, r0
 800d146:	f84c 1b04 	str.w	r1, [ip], #4
 800d14a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d14e:	dcec      	bgt.n	800d12a <__multadd+0x12>
 800d150:	b30e      	cbz	r6, 800d196 <__multadd+0x7e>
 800d152:	68a3      	ldr	r3, [r4, #8]
 800d154:	42ab      	cmp	r3, r5
 800d156:	dc19      	bgt.n	800d18c <__multadd+0x74>
 800d158:	6861      	ldr	r1, [r4, #4]
 800d15a:	4638      	mov	r0, r7
 800d15c:	3101      	adds	r1, #1
 800d15e:	f7ff ff79 	bl	800d054 <_Balloc>
 800d162:	4680      	mov	r8, r0
 800d164:	b928      	cbnz	r0, 800d172 <__multadd+0x5a>
 800d166:	4602      	mov	r2, r0
 800d168:	4b0c      	ldr	r3, [pc, #48]	; (800d19c <__multadd+0x84>)
 800d16a:	480d      	ldr	r0, [pc, #52]	; (800d1a0 <__multadd+0x88>)
 800d16c:	21ba      	movs	r1, #186	; 0xba
 800d16e:	f000 fd71 	bl	800dc54 <__assert_func>
 800d172:	6922      	ldr	r2, [r4, #16]
 800d174:	3202      	adds	r2, #2
 800d176:	f104 010c 	add.w	r1, r4, #12
 800d17a:	0092      	lsls	r2, r2, #2
 800d17c:	300c      	adds	r0, #12
 800d17e:	f000 fd5b 	bl	800dc38 <memcpy>
 800d182:	4621      	mov	r1, r4
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff ffa5 	bl	800d0d4 <_Bfree>
 800d18a:	4644      	mov	r4, r8
 800d18c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d190:	3501      	adds	r5, #1
 800d192:	615e      	str	r6, [r3, #20]
 800d194:	6125      	str	r5, [r4, #16]
 800d196:	4620      	mov	r0, r4
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	0800e03c 	.word	0x0800e03c
 800d1a0:	0800e04d 	.word	0x0800e04d

0800d1a4 <__hi0bits>:
 800d1a4:	0c03      	lsrs	r3, r0, #16
 800d1a6:	041b      	lsls	r3, r3, #16
 800d1a8:	b9d3      	cbnz	r3, 800d1e0 <__hi0bits+0x3c>
 800d1aa:	0400      	lsls	r0, r0, #16
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1b2:	bf04      	itt	eq
 800d1b4:	0200      	lsleq	r0, r0, #8
 800d1b6:	3308      	addeq	r3, #8
 800d1b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1bc:	bf04      	itt	eq
 800d1be:	0100      	lsleq	r0, r0, #4
 800d1c0:	3304      	addeq	r3, #4
 800d1c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1c6:	bf04      	itt	eq
 800d1c8:	0080      	lsleq	r0, r0, #2
 800d1ca:	3302      	addeq	r3, #2
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	db05      	blt.n	800d1dc <__hi0bits+0x38>
 800d1d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1d4:	f103 0301 	add.w	r3, r3, #1
 800d1d8:	bf08      	it	eq
 800d1da:	2320      	moveq	r3, #32
 800d1dc:	4618      	mov	r0, r3
 800d1de:	4770      	bx	lr
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	e7e4      	b.n	800d1ae <__hi0bits+0xa>

0800d1e4 <__lo0bits>:
 800d1e4:	6803      	ldr	r3, [r0, #0]
 800d1e6:	f013 0207 	ands.w	r2, r3, #7
 800d1ea:	d00c      	beq.n	800d206 <__lo0bits+0x22>
 800d1ec:	07d9      	lsls	r1, r3, #31
 800d1ee:	d422      	bmi.n	800d236 <__lo0bits+0x52>
 800d1f0:	079a      	lsls	r2, r3, #30
 800d1f2:	bf49      	itett	mi
 800d1f4:	085b      	lsrmi	r3, r3, #1
 800d1f6:	089b      	lsrpl	r3, r3, #2
 800d1f8:	6003      	strmi	r3, [r0, #0]
 800d1fa:	2201      	movmi	r2, #1
 800d1fc:	bf5c      	itt	pl
 800d1fe:	6003      	strpl	r3, [r0, #0]
 800d200:	2202      	movpl	r2, #2
 800d202:	4610      	mov	r0, r2
 800d204:	4770      	bx	lr
 800d206:	b299      	uxth	r1, r3
 800d208:	b909      	cbnz	r1, 800d20e <__lo0bits+0x2a>
 800d20a:	0c1b      	lsrs	r3, r3, #16
 800d20c:	2210      	movs	r2, #16
 800d20e:	b2d9      	uxtb	r1, r3
 800d210:	b909      	cbnz	r1, 800d216 <__lo0bits+0x32>
 800d212:	3208      	adds	r2, #8
 800d214:	0a1b      	lsrs	r3, r3, #8
 800d216:	0719      	lsls	r1, r3, #28
 800d218:	bf04      	itt	eq
 800d21a:	091b      	lsreq	r3, r3, #4
 800d21c:	3204      	addeq	r2, #4
 800d21e:	0799      	lsls	r1, r3, #30
 800d220:	bf04      	itt	eq
 800d222:	089b      	lsreq	r3, r3, #2
 800d224:	3202      	addeq	r2, #2
 800d226:	07d9      	lsls	r1, r3, #31
 800d228:	d403      	bmi.n	800d232 <__lo0bits+0x4e>
 800d22a:	085b      	lsrs	r3, r3, #1
 800d22c:	f102 0201 	add.w	r2, r2, #1
 800d230:	d003      	beq.n	800d23a <__lo0bits+0x56>
 800d232:	6003      	str	r3, [r0, #0]
 800d234:	e7e5      	b.n	800d202 <__lo0bits+0x1e>
 800d236:	2200      	movs	r2, #0
 800d238:	e7e3      	b.n	800d202 <__lo0bits+0x1e>
 800d23a:	2220      	movs	r2, #32
 800d23c:	e7e1      	b.n	800d202 <__lo0bits+0x1e>
	...

0800d240 <__i2b>:
 800d240:	b510      	push	{r4, lr}
 800d242:	460c      	mov	r4, r1
 800d244:	2101      	movs	r1, #1
 800d246:	f7ff ff05 	bl	800d054 <_Balloc>
 800d24a:	4602      	mov	r2, r0
 800d24c:	b928      	cbnz	r0, 800d25a <__i2b+0x1a>
 800d24e:	4b05      	ldr	r3, [pc, #20]	; (800d264 <__i2b+0x24>)
 800d250:	4805      	ldr	r0, [pc, #20]	; (800d268 <__i2b+0x28>)
 800d252:	f240 1145 	movw	r1, #325	; 0x145
 800d256:	f000 fcfd 	bl	800dc54 <__assert_func>
 800d25a:	2301      	movs	r3, #1
 800d25c:	6144      	str	r4, [r0, #20]
 800d25e:	6103      	str	r3, [r0, #16]
 800d260:	bd10      	pop	{r4, pc}
 800d262:	bf00      	nop
 800d264:	0800e03c 	.word	0x0800e03c
 800d268:	0800e04d 	.word	0x0800e04d

0800d26c <__multiply>:
 800d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d270:	4691      	mov	r9, r2
 800d272:	690a      	ldr	r2, [r1, #16]
 800d274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d278:	429a      	cmp	r2, r3
 800d27a:	bfb8      	it	lt
 800d27c:	460b      	movlt	r3, r1
 800d27e:	460c      	mov	r4, r1
 800d280:	bfbc      	itt	lt
 800d282:	464c      	movlt	r4, r9
 800d284:	4699      	movlt	r9, r3
 800d286:	6927      	ldr	r7, [r4, #16]
 800d288:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	6861      	ldr	r1, [r4, #4]
 800d290:	eb07 060a 	add.w	r6, r7, sl
 800d294:	42b3      	cmp	r3, r6
 800d296:	b085      	sub	sp, #20
 800d298:	bfb8      	it	lt
 800d29a:	3101      	addlt	r1, #1
 800d29c:	f7ff feda 	bl	800d054 <_Balloc>
 800d2a0:	b930      	cbnz	r0, 800d2b0 <__multiply+0x44>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	4b44      	ldr	r3, [pc, #272]	; (800d3b8 <__multiply+0x14c>)
 800d2a6:	4845      	ldr	r0, [pc, #276]	; (800d3bc <__multiply+0x150>)
 800d2a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2ac:	f000 fcd2 	bl	800dc54 <__assert_func>
 800d2b0:	f100 0514 	add.w	r5, r0, #20
 800d2b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2b8:	462b      	mov	r3, r5
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	4543      	cmp	r3, r8
 800d2be:	d321      	bcc.n	800d304 <__multiply+0x98>
 800d2c0:	f104 0314 	add.w	r3, r4, #20
 800d2c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2c8:	f109 0314 	add.w	r3, r9, #20
 800d2cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2d0:	9202      	str	r2, [sp, #8]
 800d2d2:	1b3a      	subs	r2, r7, r4
 800d2d4:	3a15      	subs	r2, #21
 800d2d6:	f022 0203 	bic.w	r2, r2, #3
 800d2da:	3204      	adds	r2, #4
 800d2dc:	f104 0115 	add.w	r1, r4, #21
 800d2e0:	428f      	cmp	r7, r1
 800d2e2:	bf38      	it	cc
 800d2e4:	2204      	movcc	r2, #4
 800d2e6:	9201      	str	r2, [sp, #4]
 800d2e8:	9a02      	ldr	r2, [sp, #8]
 800d2ea:	9303      	str	r3, [sp, #12]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d80c      	bhi.n	800d30a <__multiply+0x9e>
 800d2f0:	2e00      	cmp	r6, #0
 800d2f2:	dd03      	ble.n	800d2fc <__multiply+0x90>
 800d2f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d05b      	beq.n	800d3b4 <__multiply+0x148>
 800d2fc:	6106      	str	r6, [r0, #16]
 800d2fe:	b005      	add	sp, #20
 800d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d304:	f843 2b04 	str.w	r2, [r3], #4
 800d308:	e7d8      	b.n	800d2bc <__multiply+0x50>
 800d30a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d30e:	f1ba 0f00 	cmp.w	sl, #0
 800d312:	d024      	beq.n	800d35e <__multiply+0xf2>
 800d314:	f104 0e14 	add.w	lr, r4, #20
 800d318:	46a9      	mov	r9, r5
 800d31a:	f04f 0c00 	mov.w	ip, #0
 800d31e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d322:	f8d9 1000 	ldr.w	r1, [r9]
 800d326:	fa1f fb82 	uxth.w	fp, r2
 800d32a:	b289      	uxth	r1, r1
 800d32c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d330:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d334:	f8d9 2000 	ldr.w	r2, [r9]
 800d338:	4461      	add	r1, ip
 800d33a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d33e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d346:	b289      	uxth	r1, r1
 800d348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d34c:	4577      	cmp	r7, lr
 800d34e:	f849 1b04 	str.w	r1, [r9], #4
 800d352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d356:	d8e2      	bhi.n	800d31e <__multiply+0xb2>
 800d358:	9a01      	ldr	r2, [sp, #4]
 800d35a:	f845 c002 	str.w	ip, [r5, r2]
 800d35e:	9a03      	ldr	r2, [sp, #12]
 800d360:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d364:	3304      	adds	r3, #4
 800d366:	f1b9 0f00 	cmp.w	r9, #0
 800d36a:	d021      	beq.n	800d3b0 <__multiply+0x144>
 800d36c:	6829      	ldr	r1, [r5, #0]
 800d36e:	f104 0c14 	add.w	ip, r4, #20
 800d372:	46ae      	mov	lr, r5
 800d374:	f04f 0a00 	mov.w	sl, #0
 800d378:	f8bc b000 	ldrh.w	fp, [ip]
 800d37c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d380:	fb09 220b 	mla	r2, r9, fp, r2
 800d384:	4452      	add	r2, sl
 800d386:	b289      	uxth	r1, r1
 800d388:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d38c:	f84e 1b04 	str.w	r1, [lr], #4
 800d390:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d398:	f8be 1000 	ldrh.w	r1, [lr]
 800d39c:	fb09 110a 	mla	r1, r9, sl, r1
 800d3a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3a4:	4567      	cmp	r7, ip
 800d3a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3aa:	d8e5      	bhi.n	800d378 <__multiply+0x10c>
 800d3ac:	9a01      	ldr	r2, [sp, #4]
 800d3ae:	50a9      	str	r1, [r5, r2]
 800d3b0:	3504      	adds	r5, #4
 800d3b2:	e799      	b.n	800d2e8 <__multiply+0x7c>
 800d3b4:	3e01      	subs	r6, #1
 800d3b6:	e79b      	b.n	800d2f0 <__multiply+0x84>
 800d3b8:	0800e03c 	.word	0x0800e03c
 800d3bc:	0800e04d 	.word	0x0800e04d

0800d3c0 <__pow5mult>:
 800d3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c4:	4615      	mov	r5, r2
 800d3c6:	f012 0203 	ands.w	r2, r2, #3
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	d007      	beq.n	800d3e0 <__pow5mult+0x20>
 800d3d0:	4c25      	ldr	r4, [pc, #148]	; (800d468 <__pow5mult+0xa8>)
 800d3d2:	3a01      	subs	r2, #1
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3da:	f7ff fe9d 	bl	800d118 <__multadd>
 800d3de:	4607      	mov	r7, r0
 800d3e0:	10ad      	asrs	r5, r5, #2
 800d3e2:	d03d      	beq.n	800d460 <__pow5mult+0xa0>
 800d3e4:	69f4      	ldr	r4, [r6, #28]
 800d3e6:	b97c      	cbnz	r4, 800d408 <__pow5mult+0x48>
 800d3e8:	2010      	movs	r0, #16
 800d3ea:	f7fd ffb1 	bl	800b350 <malloc>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	61f0      	str	r0, [r6, #28]
 800d3f2:	b928      	cbnz	r0, 800d400 <__pow5mult+0x40>
 800d3f4:	4b1d      	ldr	r3, [pc, #116]	; (800d46c <__pow5mult+0xac>)
 800d3f6:	481e      	ldr	r0, [pc, #120]	; (800d470 <__pow5mult+0xb0>)
 800d3f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d3fc:	f000 fc2a 	bl	800dc54 <__assert_func>
 800d400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d404:	6004      	str	r4, [r0, #0]
 800d406:	60c4      	str	r4, [r0, #12]
 800d408:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d410:	b94c      	cbnz	r4, 800d426 <__pow5mult+0x66>
 800d412:	f240 2171 	movw	r1, #625	; 0x271
 800d416:	4630      	mov	r0, r6
 800d418:	f7ff ff12 	bl	800d240 <__i2b>
 800d41c:	2300      	movs	r3, #0
 800d41e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d422:	4604      	mov	r4, r0
 800d424:	6003      	str	r3, [r0, #0]
 800d426:	f04f 0900 	mov.w	r9, #0
 800d42a:	07eb      	lsls	r3, r5, #31
 800d42c:	d50a      	bpl.n	800d444 <__pow5mult+0x84>
 800d42e:	4639      	mov	r1, r7
 800d430:	4622      	mov	r2, r4
 800d432:	4630      	mov	r0, r6
 800d434:	f7ff ff1a 	bl	800d26c <__multiply>
 800d438:	4639      	mov	r1, r7
 800d43a:	4680      	mov	r8, r0
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff fe49 	bl	800d0d4 <_Bfree>
 800d442:	4647      	mov	r7, r8
 800d444:	106d      	asrs	r5, r5, #1
 800d446:	d00b      	beq.n	800d460 <__pow5mult+0xa0>
 800d448:	6820      	ldr	r0, [r4, #0]
 800d44a:	b938      	cbnz	r0, 800d45c <__pow5mult+0x9c>
 800d44c:	4622      	mov	r2, r4
 800d44e:	4621      	mov	r1, r4
 800d450:	4630      	mov	r0, r6
 800d452:	f7ff ff0b 	bl	800d26c <__multiply>
 800d456:	6020      	str	r0, [r4, #0]
 800d458:	f8c0 9000 	str.w	r9, [r0]
 800d45c:	4604      	mov	r4, r0
 800d45e:	e7e4      	b.n	800d42a <__pow5mult+0x6a>
 800d460:	4638      	mov	r0, r7
 800d462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d466:	bf00      	nop
 800d468:	0800e198 	.word	0x0800e198
 800d46c:	0800dfcd 	.word	0x0800dfcd
 800d470:	0800e04d 	.word	0x0800e04d

0800d474 <__lshift>:
 800d474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d478:	460c      	mov	r4, r1
 800d47a:	6849      	ldr	r1, [r1, #4]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d482:	68a3      	ldr	r3, [r4, #8]
 800d484:	4607      	mov	r7, r0
 800d486:	4691      	mov	r9, r2
 800d488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d48c:	f108 0601 	add.w	r6, r8, #1
 800d490:	42b3      	cmp	r3, r6
 800d492:	db0b      	blt.n	800d4ac <__lshift+0x38>
 800d494:	4638      	mov	r0, r7
 800d496:	f7ff fddd 	bl	800d054 <_Balloc>
 800d49a:	4605      	mov	r5, r0
 800d49c:	b948      	cbnz	r0, 800d4b2 <__lshift+0x3e>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b28      	ldr	r3, [pc, #160]	; (800d544 <__lshift+0xd0>)
 800d4a2:	4829      	ldr	r0, [pc, #164]	; (800d548 <__lshift+0xd4>)
 800d4a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4a8:	f000 fbd4 	bl	800dc54 <__assert_func>
 800d4ac:	3101      	adds	r1, #1
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	e7ee      	b.n	800d490 <__lshift+0x1c>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f100 0114 	add.w	r1, r0, #20
 800d4b8:	f100 0210 	add.w	r2, r0, #16
 800d4bc:	4618      	mov	r0, r3
 800d4be:	4553      	cmp	r3, sl
 800d4c0:	db33      	blt.n	800d52a <__lshift+0xb6>
 800d4c2:	6920      	ldr	r0, [r4, #16]
 800d4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4c8:	f104 0314 	add.w	r3, r4, #20
 800d4cc:	f019 091f 	ands.w	r9, r9, #31
 800d4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4d8:	d02b      	beq.n	800d532 <__lshift+0xbe>
 800d4da:	f1c9 0e20 	rsb	lr, r9, #32
 800d4de:	468a      	mov	sl, r1
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	6818      	ldr	r0, [r3, #0]
 800d4e4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4e8:	4310      	orrs	r0, r2
 800d4ea:	f84a 0b04 	str.w	r0, [sl], #4
 800d4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f2:	459c      	cmp	ip, r3
 800d4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4f8:	d8f3      	bhi.n	800d4e2 <__lshift+0x6e>
 800d4fa:	ebac 0304 	sub.w	r3, ip, r4
 800d4fe:	3b15      	subs	r3, #21
 800d500:	f023 0303 	bic.w	r3, r3, #3
 800d504:	3304      	adds	r3, #4
 800d506:	f104 0015 	add.w	r0, r4, #21
 800d50a:	4584      	cmp	ip, r0
 800d50c:	bf38      	it	cc
 800d50e:	2304      	movcc	r3, #4
 800d510:	50ca      	str	r2, [r1, r3]
 800d512:	b10a      	cbz	r2, 800d518 <__lshift+0xa4>
 800d514:	f108 0602 	add.w	r6, r8, #2
 800d518:	3e01      	subs	r6, #1
 800d51a:	4638      	mov	r0, r7
 800d51c:	612e      	str	r6, [r5, #16]
 800d51e:	4621      	mov	r1, r4
 800d520:	f7ff fdd8 	bl	800d0d4 <_Bfree>
 800d524:	4628      	mov	r0, r5
 800d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d52e:	3301      	adds	r3, #1
 800d530:	e7c5      	b.n	800d4be <__lshift+0x4a>
 800d532:	3904      	subs	r1, #4
 800d534:	f853 2b04 	ldr.w	r2, [r3], #4
 800d538:	f841 2f04 	str.w	r2, [r1, #4]!
 800d53c:	459c      	cmp	ip, r3
 800d53e:	d8f9      	bhi.n	800d534 <__lshift+0xc0>
 800d540:	e7ea      	b.n	800d518 <__lshift+0xa4>
 800d542:	bf00      	nop
 800d544:	0800e03c 	.word	0x0800e03c
 800d548:	0800e04d 	.word	0x0800e04d

0800d54c <__mcmp>:
 800d54c:	b530      	push	{r4, r5, lr}
 800d54e:	6902      	ldr	r2, [r0, #16]
 800d550:	690c      	ldr	r4, [r1, #16]
 800d552:	1b12      	subs	r2, r2, r4
 800d554:	d10e      	bne.n	800d574 <__mcmp+0x28>
 800d556:	f100 0314 	add.w	r3, r0, #20
 800d55a:	3114      	adds	r1, #20
 800d55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d56c:	42a5      	cmp	r5, r4
 800d56e:	d003      	beq.n	800d578 <__mcmp+0x2c>
 800d570:	d305      	bcc.n	800d57e <__mcmp+0x32>
 800d572:	2201      	movs	r2, #1
 800d574:	4610      	mov	r0, r2
 800d576:	bd30      	pop	{r4, r5, pc}
 800d578:	4283      	cmp	r3, r0
 800d57a:	d3f3      	bcc.n	800d564 <__mcmp+0x18>
 800d57c:	e7fa      	b.n	800d574 <__mcmp+0x28>
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295
 800d582:	e7f7      	b.n	800d574 <__mcmp+0x28>

0800d584 <__mdiff>:
 800d584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	460c      	mov	r4, r1
 800d58a:	4606      	mov	r6, r0
 800d58c:	4611      	mov	r1, r2
 800d58e:	4620      	mov	r0, r4
 800d590:	4690      	mov	r8, r2
 800d592:	f7ff ffdb 	bl	800d54c <__mcmp>
 800d596:	1e05      	subs	r5, r0, #0
 800d598:	d110      	bne.n	800d5bc <__mdiff+0x38>
 800d59a:	4629      	mov	r1, r5
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff fd59 	bl	800d054 <_Balloc>
 800d5a2:	b930      	cbnz	r0, 800d5b2 <__mdiff+0x2e>
 800d5a4:	4b3a      	ldr	r3, [pc, #232]	; (800d690 <__mdiff+0x10c>)
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	f240 2137 	movw	r1, #567	; 0x237
 800d5ac:	4839      	ldr	r0, [pc, #228]	; (800d694 <__mdiff+0x110>)
 800d5ae:	f000 fb51 	bl	800dc54 <__assert_func>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5bc:	bfa4      	itt	ge
 800d5be:	4643      	movge	r3, r8
 800d5c0:	46a0      	movge	r8, r4
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5c8:	bfa6      	itte	ge
 800d5ca:	461c      	movge	r4, r3
 800d5cc:	2500      	movge	r5, #0
 800d5ce:	2501      	movlt	r5, #1
 800d5d0:	f7ff fd40 	bl	800d054 <_Balloc>
 800d5d4:	b920      	cbnz	r0, 800d5e0 <__mdiff+0x5c>
 800d5d6:	4b2e      	ldr	r3, [pc, #184]	; (800d690 <__mdiff+0x10c>)
 800d5d8:	4602      	mov	r2, r0
 800d5da:	f240 2145 	movw	r1, #581	; 0x245
 800d5de:	e7e5      	b.n	800d5ac <__mdiff+0x28>
 800d5e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5e4:	6926      	ldr	r6, [r4, #16]
 800d5e6:	60c5      	str	r5, [r0, #12]
 800d5e8:	f104 0914 	add.w	r9, r4, #20
 800d5ec:	f108 0514 	add.w	r5, r8, #20
 800d5f0:	f100 0e14 	add.w	lr, r0, #20
 800d5f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5fc:	f108 0210 	add.w	r2, r8, #16
 800d600:	46f2      	mov	sl, lr
 800d602:	2100      	movs	r1, #0
 800d604:	f859 3b04 	ldr.w	r3, [r9], #4
 800d608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d60c:	fa11 f88b 	uxtah	r8, r1, fp
 800d610:	b299      	uxth	r1, r3
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	eba8 0801 	sub.w	r8, r8, r1
 800d618:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d61c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d620:	fa1f f888 	uxth.w	r8, r8
 800d624:	1419      	asrs	r1, r3, #16
 800d626:	454e      	cmp	r6, r9
 800d628:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d62c:	f84a 3b04 	str.w	r3, [sl], #4
 800d630:	d8e8      	bhi.n	800d604 <__mdiff+0x80>
 800d632:	1b33      	subs	r3, r6, r4
 800d634:	3b15      	subs	r3, #21
 800d636:	f023 0303 	bic.w	r3, r3, #3
 800d63a:	3304      	adds	r3, #4
 800d63c:	3415      	adds	r4, #21
 800d63e:	42a6      	cmp	r6, r4
 800d640:	bf38      	it	cc
 800d642:	2304      	movcc	r3, #4
 800d644:	441d      	add	r5, r3
 800d646:	4473      	add	r3, lr
 800d648:	469e      	mov	lr, r3
 800d64a:	462e      	mov	r6, r5
 800d64c:	4566      	cmp	r6, ip
 800d64e:	d30e      	bcc.n	800d66e <__mdiff+0xea>
 800d650:	f10c 0203 	add.w	r2, ip, #3
 800d654:	1b52      	subs	r2, r2, r5
 800d656:	f022 0203 	bic.w	r2, r2, #3
 800d65a:	3d03      	subs	r5, #3
 800d65c:	45ac      	cmp	ip, r5
 800d65e:	bf38      	it	cc
 800d660:	2200      	movcc	r2, #0
 800d662:	4413      	add	r3, r2
 800d664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d668:	b17a      	cbz	r2, 800d68a <__mdiff+0x106>
 800d66a:	6107      	str	r7, [r0, #16]
 800d66c:	e7a4      	b.n	800d5b8 <__mdiff+0x34>
 800d66e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d672:	fa11 f288 	uxtah	r2, r1, r8
 800d676:	1414      	asrs	r4, r2, #16
 800d678:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d67c:	b292      	uxth	r2, r2
 800d67e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d682:	f84e 2b04 	str.w	r2, [lr], #4
 800d686:	1421      	asrs	r1, r4, #16
 800d688:	e7e0      	b.n	800d64c <__mdiff+0xc8>
 800d68a:	3f01      	subs	r7, #1
 800d68c:	e7ea      	b.n	800d664 <__mdiff+0xe0>
 800d68e:	bf00      	nop
 800d690:	0800e03c 	.word	0x0800e03c
 800d694:	0800e04d 	.word	0x0800e04d

0800d698 <__d2b>:
 800d698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	460f      	mov	r7, r1
 800d69e:	2101      	movs	r1, #1
 800d6a0:	ec59 8b10 	vmov	r8, r9, d0
 800d6a4:	4616      	mov	r6, r2
 800d6a6:	f7ff fcd5 	bl	800d054 <_Balloc>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	b930      	cbnz	r0, 800d6bc <__d2b+0x24>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	4b24      	ldr	r3, [pc, #144]	; (800d744 <__d2b+0xac>)
 800d6b2:	4825      	ldr	r0, [pc, #148]	; (800d748 <__d2b+0xb0>)
 800d6b4:	f240 310f 	movw	r1, #783	; 0x30f
 800d6b8:	f000 facc 	bl	800dc54 <__assert_func>
 800d6bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6c4:	bb2d      	cbnz	r5, 800d712 <__d2b+0x7a>
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	f1b8 0300 	subs.w	r3, r8, #0
 800d6cc:	d026      	beq.n	800d71c <__d2b+0x84>
 800d6ce:	4668      	mov	r0, sp
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	f7ff fd87 	bl	800d1e4 <__lo0bits>
 800d6d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6da:	b1e8      	cbz	r0, 800d718 <__d2b+0x80>
 800d6dc:	f1c0 0320 	rsb	r3, r0, #32
 800d6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e4:	430b      	orrs	r3, r1
 800d6e6:	40c2      	lsrs	r2, r0
 800d6e8:	6163      	str	r3, [r4, #20]
 800d6ea:	9201      	str	r2, [sp, #4]
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	61a3      	str	r3, [r4, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	bf14      	ite	ne
 800d6f4:	2202      	movne	r2, #2
 800d6f6:	2201      	moveq	r2, #1
 800d6f8:	6122      	str	r2, [r4, #16]
 800d6fa:	b1bd      	cbz	r5, 800d72c <__d2b+0x94>
 800d6fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d700:	4405      	add	r5, r0
 800d702:	603d      	str	r5, [r7, #0]
 800d704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d708:	6030      	str	r0, [r6, #0]
 800d70a:	4620      	mov	r0, r4
 800d70c:	b003      	add	sp, #12
 800d70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d716:	e7d6      	b.n	800d6c6 <__d2b+0x2e>
 800d718:	6161      	str	r1, [r4, #20]
 800d71a:	e7e7      	b.n	800d6ec <__d2b+0x54>
 800d71c:	a801      	add	r0, sp, #4
 800d71e:	f7ff fd61 	bl	800d1e4 <__lo0bits>
 800d722:	9b01      	ldr	r3, [sp, #4]
 800d724:	6163      	str	r3, [r4, #20]
 800d726:	3020      	adds	r0, #32
 800d728:	2201      	movs	r2, #1
 800d72a:	e7e5      	b.n	800d6f8 <__d2b+0x60>
 800d72c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d734:	6038      	str	r0, [r7, #0]
 800d736:	6918      	ldr	r0, [r3, #16]
 800d738:	f7ff fd34 	bl	800d1a4 <__hi0bits>
 800d73c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d740:	e7e2      	b.n	800d708 <__d2b+0x70>
 800d742:	bf00      	nop
 800d744:	0800e03c 	.word	0x0800e03c
 800d748:	0800e04d 	.word	0x0800e04d

0800d74c <__sfputc_r>:
 800d74c:	6893      	ldr	r3, [r2, #8]
 800d74e:	3b01      	subs	r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	b410      	push	{r4}
 800d754:	6093      	str	r3, [r2, #8]
 800d756:	da08      	bge.n	800d76a <__sfputc_r+0x1e>
 800d758:	6994      	ldr	r4, [r2, #24]
 800d75a:	42a3      	cmp	r3, r4
 800d75c:	db01      	blt.n	800d762 <__sfputc_r+0x16>
 800d75e:	290a      	cmp	r1, #10
 800d760:	d103      	bne.n	800d76a <__sfputc_r+0x1e>
 800d762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d766:	f7fe bc88 	b.w	800c07a <__swbuf_r>
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	1c58      	adds	r0, r3, #1
 800d76e:	6010      	str	r0, [r2, #0]
 800d770:	7019      	strb	r1, [r3, #0]
 800d772:	4608      	mov	r0, r1
 800d774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <__sfputs_r>:
 800d77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77c:	4606      	mov	r6, r0
 800d77e:	460f      	mov	r7, r1
 800d780:	4614      	mov	r4, r2
 800d782:	18d5      	adds	r5, r2, r3
 800d784:	42ac      	cmp	r4, r5
 800d786:	d101      	bne.n	800d78c <__sfputs_r+0x12>
 800d788:	2000      	movs	r0, #0
 800d78a:	e007      	b.n	800d79c <__sfputs_r+0x22>
 800d78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d790:	463a      	mov	r2, r7
 800d792:	4630      	mov	r0, r6
 800d794:	f7ff ffda 	bl	800d74c <__sfputc_r>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d1f3      	bne.n	800d784 <__sfputs_r+0xa>
 800d79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7a0 <_vfiprintf_r>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	460d      	mov	r5, r1
 800d7a6:	b09d      	sub	sp, #116	; 0x74
 800d7a8:	4614      	mov	r4, r2
 800d7aa:	4698      	mov	r8, r3
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	b118      	cbz	r0, 800d7b8 <_vfiprintf_r+0x18>
 800d7b0:	6a03      	ldr	r3, [r0, #32]
 800d7b2:	b90b      	cbnz	r3, 800d7b8 <_vfiprintf_r+0x18>
 800d7b4:	f7fe fb7a 	bl	800beac <__sinit>
 800d7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7ba:	07d9      	lsls	r1, r3, #31
 800d7bc:	d405      	bmi.n	800d7ca <_vfiprintf_r+0x2a>
 800d7be:	89ab      	ldrh	r3, [r5, #12]
 800d7c0:	059a      	lsls	r2, r3, #22
 800d7c2:	d402      	bmi.n	800d7ca <_vfiprintf_r+0x2a>
 800d7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7c6:	f7fe fd7a 	bl	800c2be <__retarget_lock_acquire_recursive>
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	071b      	lsls	r3, r3, #28
 800d7ce:	d501      	bpl.n	800d7d4 <_vfiprintf_r+0x34>
 800d7d0:	692b      	ldr	r3, [r5, #16]
 800d7d2:	b99b      	cbnz	r3, 800d7fc <_vfiprintf_r+0x5c>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7fe fc8c 	bl	800c0f4 <__swsetup_r>
 800d7dc:	b170      	cbz	r0, 800d7fc <_vfiprintf_r+0x5c>
 800d7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7e0:	07dc      	lsls	r4, r3, #31
 800d7e2:	d504      	bpl.n	800d7ee <_vfiprintf_r+0x4e>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	b01d      	add	sp, #116	; 0x74
 800d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ee:	89ab      	ldrh	r3, [r5, #12]
 800d7f0:	0598      	lsls	r0, r3, #22
 800d7f2:	d4f7      	bmi.n	800d7e4 <_vfiprintf_r+0x44>
 800d7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7f6:	f7fe fd63 	bl	800c2c0 <__retarget_lock_release_recursive>
 800d7fa:	e7f3      	b.n	800d7e4 <_vfiprintf_r+0x44>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d800:	2320      	movs	r3, #32
 800d802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d806:	f8cd 800c 	str.w	r8, [sp, #12]
 800d80a:	2330      	movs	r3, #48	; 0x30
 800d80c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d9c0 <_vfiprintf_r+0x220>
 800d810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d814:	f04f 0901 	mov.w	r9, #1
 800d818:	4623      	mov	r3, r4
 800d81a:	469a      	mov	sl, r3
 800d81c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d820:	b10a      	cbz	r2, 800d826 <_vfiprintf_r+0x86>
 800d822:	2a25      	cmp	r2, #37	; 0x25
 800d824:	d1f9      	bne.n	800d81a <_vfiprintf_r+0x7a>
 800d826:	ebba 0b04 	subs.w	fp, sl, r4
 800d82a:	d00b      	beq.n	800d844 <_vfiprintf_r+0xa4>
 800d82c:	465b      	mov	r3, fp
 800d82e:	4622      	mov	r2, r4
 800d830:	4629      	mov	r1, r5
 800d832:	4630      	mov	r0, r6
 800d834:	f7ff ffa1 	bl	800d77a <__sfputs_r>
 800d838:	3001      	adds	r0, #1
 800d83a:	f000 80a9 	beq.w	800d990 <_vfiprintf_r+0x1f0>
 800d83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d840:	445a      	add	r2, fp
 800d842:	9209      	str	r2, [sp, #36]	; 0x24
 800d844:	f89a 3000 	ldrb.w	r3, [sl]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 80a1 	beq.w	800d990 <_vfiprintf_r+0x1f0>
 800d84e:	2300      	movs	r3, #0
 800d850:	f04f 32ff 	mov.w	r2, #4294967295
 800d854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d858:	f10a 0a01 	add.w	sl, sl, #1
 800d85c:	9304      	str	r3, [sp, #16]
 800d85e:	9307      	str	r3, [sp, #28]
 800d860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d864:	931a      	str	r3, [sp, #104]	; 0x68
 800d866:	4654      	mov	r4, sl
 800d868:	2205      	movs	r2, #5
 800d86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86e:	4854      	ldr	r0, [pc, #336]	; (800d9c0 <_vfiprintf_r+0x220>)
 800d870:	f7f2 fcae 	bl	80001d0 <memchr>
 800d874:	9a04      	ldr	r2, [sp, #16]
 800d876:	b9d8      	cbnz	r0, 800d8b0 <_vfiprintf_r+0x110>
 800d878:	06d1      	lsls	r1, r2, #27
 800d87a:	bf44      	itt	mi
 800d87c:	2320      	movmi	r3, #32
 800d87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d882:	0713      	lsls	r3, r2, #28
 800d884:	bf44      	itt	mi
 800d886:	232b      	movmi	r3, #43	; 0x2b
 800d888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d88c:	f89a 3000 	ldrb.w	r3, [sl]
 800d890:	2b2a      	cmp	r3, #42	; 0x2a
 800d892:	d015      	beq.n	800d8c0 <_vfiprintf_r+0x120>
 800d894:	9a07      	ldr	r2, [sp, #28]
 800d896:	4654      	mov	r4, sl
 800d898:	2000      	movs	r0, #0
 800d89a:	f04f 0c0a 	mov.w	ip, #10
 800d89e:	4621      	mov	r1, r4
 800d8a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a4:	3b30      	subs	r3, #48	; 0x30
 800d8a6:	2b09      	cmp	r3, #9
 800d8a8:	d94d      	bls.n	800d946 <_vfiprintf_r+0x1a6>
 800d8aa:	b1b0      	cbz	r0, 800d8da <_vfiprintf_r+0x13a>
 800d8ac:	9207      	str	r2, [sp, #28]
 800d8ae:	e014      	b.n	800d8da <_vfiprintf_r+0x13a>
 800d8b0:	eba0 0308 	sub.w	r3, r0, r8
 800d8b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	46a2      	mov	sl, r4
 800d8be:	e7d2      	b.n	800d866 <_vfiprintf_r+0xc6>
 800d8c0:	9b03      	ldr	r3, [sp, #12]
 800d8c2:	1d19      	adds	r1, r3, #4
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	9103      	str	r1, [sp, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bfbb      	ittet	lt
 800d8cc:	425b      	neglt	r3, r3
 800d8ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d2:	9307      	strge	r3, [sp, #28]
 800d8d4:	9307      	strlt	r3, [sp, #28]
 800d8d6:	bfb8      	it	lt
 800d8d8:	9204      	strlt	r2, [sp, #16]
 800d8da:	7823      	ldrb	r3, [r4, #0]
 800d8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d8de:	d10c      	bne.n	800d8fa <_vfiprintf_r+0x15a>
 800d8e0:	7863      	ldrb	r3, [r4, #1]
 800d8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e4:	d134      	bne.n	800d950 <_vfiprintf_r+0x1b0>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	1d1a      	adds	r2, r3, #4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	9203      	str	r2, [sp, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bfb8      	it	lt
 800d8f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8f6:	3402      	adds	r4, #2
 800d8f8:	9305      	str	r3, [sp, #20]
 800d8fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d9d0 <_vfiprintf_r+0x230>
 800d8fe:	7821      	ldrb	r1, [r4, #0]
 800d900:	2203      	movs	r2, #3
 800d902:	4650      	mov	r0, sl
 800d904:	f7f2 fc64 	bl	80001d0 <memchr>
 800d908:	b138      	cbz	r0, 800d91a <_vfiprintf_r+0x17a>
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	eba0 000a 	sub.w	r0, r0, sl
 800d910:	2240      	movs	r2, #64	; 0x40
 800d912:	4082      	lsls	r2, r0
 800d914:	4313      	orrs	r3, r2
 800d916:	3401      	adds	r4, #1
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91e:	4829      	ldr	r0, [pc, #164]	; (800d9c4 <_vfiprintf_r+0x224>)
 800d920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d924:	2206      	movs	r2, #6
 800d926:	f7f2 fc53 	bl	80001d0 <memchr>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d03f      	beq.n	800d9ae <_vfiprintf_r+0x20e>
 800d92e:	4b26      	ldr	r3, [pc, #152]	; (800d9c8 <_vfiprintf_r+0x228>)
 800d930:	bb1b      	cbnz	r3, 800d97a <_vfiprintf_r+0x1da>
 800d932:	9b03      	ldr	r3, [sp, #12]
 800d934:	3307      	adds	r3, #7
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	3308      	adds	r3, #8
 800d93c:	9303      	str	r3, [sp, #12]
 800d93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d940:	443b      	add	r3, r7
 800d942:	9309      	str	r3, [sp, #36]	; 0x24
 800d944:	e768      	b.n	800d818 <_vfiprintf_r+0x78>
 800d946:	fb0c 3202 	mla	r2, ip, r2, r3
 800d94a:	460c      	mov	r4, r1
 800d94c:	2001      	movs	r0, #1
 800d94e:	e7a6      	b.n	800d89e <_vfiprintf_r+0xfe>
 800d950:	2300      	movs	r3, #0
 800d952:	3401      	adds	r4, #1
 800d954:	9305      	str	r3, [sp, #20]
 800d956:	4619      	mov	r1, r3
 800d958:	f04f 0c0a 	mov.w	ip, #10
 800d95c:	4620      	mov	r0, r4
 800d95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d962:	3a30      	subs	r2, #48	; 0x30
 800d964:	2a09      	cmp	r2, #9
 800d966:	d903      	bls.n	800d970 <_vfiprintf_r+0x1d0>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0c6      	beq.n	800d8fa <_vfiprintf_r+0x15a>
 800d96c:	9105      	str	r1, [sp, #20]
 800d96e:	e7c4      	b.n	800d8fa <_vfiprintf_r+0x15a>
 800d970:	fb0c 2101 	mla	r1, ip, r1, r2
 800d974:	4604      	mov	r4, r0
 800d976:	2301      	movs	r3, #1
 800d978:	e7f0      	b.n	800d95c <_vfiprintf_r+0x1bc>
 800d97a:	ab03      	add	r3, sp, #12
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	462a      	mov	r2, r5
 800d980:	4b12      	ldr	r3, [pc, #72]	; (800d9cc <_vfiprintf_r+0x22c>)
 800d982:	a904      	add	r1, sp, #16
 800d984:	4630      	mov	r0, r6
 800d986:	f7fd fe3f 	bl	800b608 <_printf_float>
 800d98a:	4607      	mov	r7, r0
 800d98c:	1c78      	adds	r0, r7, #1
 800d98e:	d1d6      	bne.n	800d93e <_vfiprintf_r+0x19e>
 800d990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	d405      	bmi.n	800d9a2 <_vfiprintf_r+0x202>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	059a      	lsls	r2, r3, #22
 800d99a:	d402      	bmi.n	800d9a2 <_vfiprintf_r+0x202>
 800d99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d99e:	f7fe fc8f 	bl	800c2c0 <__retarget_lock_release_recursive>
 800d9a2:	89ab      	ldrh	r3, [r5, #12]
 800d9a4:	065b      	lsls	r3, r3, #25
 800d9a6:	f53f af1d 	bmi.w	800d7e4 <_vfiprintf_r+0x44>
 800d9aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9ac:	e71c      	b.n	800d7e8 <_vfiprintf_r+0x48>
 800d9ae:	ab03      	add	r3, sp, #12
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <_vfiprintf_r+0x22c>)
 800d9b6:	a904      	add	r1, sp, #16
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7fe f8c9 	bl	800bb50 <_printf_i>
 800d9be:	e7e4      	b.n	800d98a <_vfiprintf_r+0x1ea>
 800d9c0:	0800e1a4 	.word	0x0800e1a4
 800d9c4:	0800e1ae 	.word	0x0800e1ae
 800d9c8:	0800b609 	.word	0x0800b609
 800d9cc:	0800d77b 	.word	0x0800d77b
 800d9d0:	0800e1aa 	.word	0x0800e1aa

0800d9d4 <__sflush_r>:
 800d9d4:	898a      	ldrh	r2, [r1, #12]
 800d9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9da:	4605      	mov	r5, r0
 800d9dc:	0710      	lsls	r0, r2, #28
 800d9de:	460c      	mov	r4, r1
 800d9e0:	d458      	bmi.n	800da94 <__sflush_r+0xc0>
 800d9e2:	684b      	ldr	r3, [r1, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dc05      	bgt.n	800d9f4 <__sflush_r+0x20>
 800d9e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	dc02      	bgt.n	800d9f4 <__sflush_r+0x20>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9f6:	2e00      	cmp	r6, #0
 800d9f8:	d0f9      	beq.n	800d9ee <__sflush_r+0x1a>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da00:	682f      	ldr	r7, [r5, #0]
 800da02:	6a21      	ldr	r1, [r4, #32]
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	d032      	beq.n	800da6e <__sflush_r+0x9a>
 800da08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	075a      	lsls	r2, r3, #29
 800da0e:	d505      	bpl.n	800da1c <__sflush_r+0x48>
 800da10:	6863      	ldr	r3, [r4, #4]
 800da12:	1ac0      	subs	r0, r0, r3
 800da14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da16:	b10b      	cbz	r3, 800da1c <__sflush_r+0x48>
 800da18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da1a:	1ac0      	subs	r0, r0, r3
 800da1c:	2300      	movs	r3, #0
 800da1e:	4602      	mov	r2, r0
 800da20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da22:	6a21      	ldr	r1, [r4, #32]
 800da24:	4628      	mov	r0, r5
 800da26:	47b0      	blx	r6
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	d106      	bne.n	800da3c <__sflush_r+0x68>
 800da2e:	6829      	ldr	r1, [r5, #0]
 800da30:	291d      	cmp	r1, #29
 800da32:	d82b      	bhi.n	800da8c <__sflush_r+0xb8>
 800da34:	4a29      	ldr	r2, [pc, #164]	; (800dadc <__sflush_r+0x108>)
 800da36:	410a      	asrs	r2, r1
 800da38:	07d6      	lsls	r6, r2, #31
 800da3a:	d427      	bmi.n	800da8c <__sflush_r+0xb8>
 800da3c:	2200      	movs	r2, #0
 800da3e:	6062      	str	r2, [r4, #4]
 800da40:	04d9      	lsls	r1, r3, #19
 800da42:	6922      	ldr	r2, [r4, #16]
 800da44:	6022      	str	r2, [r4, #0]
 800da46:	d504      	bpl.n	800da52 <__sflush_r+0x7e>
 800da48:	1c42      	adds	r2, r0, #1
 800da4a:	d101      	bne.n	800da50 <__sflush_r+0x7c>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b903      	cbnz	r3, 800da52 <__sflush_r+0x7e>
 800da50:	6560      	str	r0, [r4, #84]	; 0x54
 800da52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da54:	602f      	str	r7, [r5, #0]
 800da56:	2900      	cmp	r1, #0
 800da58:	d0c9      	beq.n	800d9ee <__sflush_r+0x1a>
 800da5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da5e:	4299      	cmp	r1, r3
 800da60:	d002      	beq.n	800da68 <__sflush_r+0x94>
 800da62:	4628      	mov	r0, r5
 800da64:	f7ff faaa 	bl	800cfbc <_free_r>
 800da68:	2000      	movs	r0, #0
 800da6a:	6360      	str	r0, [r4, #52]	; 0x34
 800da6c:	e7c0      	b.n	800d9f0 <__sflush_r+0x1c>
 800da6e:	2301      	movs	r3, #1
 800da70:	4628      	mov	r0, r5
 800da72:	47b0      	blx	r6
 800da74:	1c41      	adds	r1, r0, #1
 800da76:	d1c8      	bne.n	800da0a <__sflush_r+0x36>
 800da78:	682b      	ldr	r3, [r5, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0c5      	beq.n	800da0a <__sflush_r+0x36>
 800da7e:	2b1d      	cmp	r3, #29
 800da80:	d001      	beq.n	800da86 <__sflush_r+0xb2>
 800da82:	2b16      	cmp	r3, #22
 800da84:	d101      	bne.n	800da8a <__sflush_r+0xb6>
 800da86:	602f      	str	r7, [r5, #0]
 800da88:	e7b1      	b.n	800d9ee <__sflush_r+0x1a>
 800da8a:	89a3      	ldrh	r3, [r4, #12]
 800da8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	e7ad      	b.n	800d9f0 <__sflush_r+0x1c>
 800da94:	690f      	ldr	r7, [r1, #16]
 800da96:	2f00      	cmp	r7, #0
 800da98:	d0a9      	beq.n	800d9ee <__sflush_r+0x1a>
 800da9a:	0793      	lsls	r3, r2, #30
 800da9c:	680e      	ldr	r6, [r1, #0]
 800da9e:	bf08      	it	eq
 800daa0:	694b      	ldreq	r3, [r1, #20]
 800daa2:	600f      	str	r7, [r1, #0]
 800daa4:	bf18      	it	ne
 800daa6:	2300      	movne	r3, #0
 800daa8:	eba6 0807 	sub.w	r8, r6, r7
 800daac:	608b      	str	r3, [r1, #8]
 800daae:	f1b8 0f00 	cmp.w	r8, #0
 800dab2:	dd9c      	ble.n	800d9ee <__sflush_r+0x1a>
 800dab4:	6a21      	ldr	r1, [r4, #32]
 800dab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dab8:	4643      	mov	r3, r8
 800daba:	463a      	mov	r2, r7
 800dabc:	4628      	mov	r0, r5
 800dabe:	47b0      	blx	r6
 800dac0:	2800      	cmp	r0, #0
 800dac2:	dc06      	bgt.n	800dad2 <__sflush_r+0xfe>
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	e78e      	b.n	800d9f0 <__sflush_r+0x1c>
 800dad2:	4407      	add	r7, r0
 800dad4:	eba8 0800 	sub.w	r8, r8, r0
 800dad8:	e7e9      	b.n	800daae <__sflush_r+0xda>
 800dada:	bf00      	nop
 800dadc:	dfbffffe 	.word	0xdfbffffe

0800dae0 <_fflush_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	690b      	ldr	r3, [r1, #16]
 800dae4:	4605      	mov	r5, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	b913      	cbnz	r3, 800daf0 <_fflush_r+0x10>
 800daea:	2500      	movs	r5, #0
 800daec:	4628      	mov	r0, r5
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	b118      	cbz	r0, 800dafa <_fflush_r+0x1a>
 800daf2:	6a03      	ldr	r3, [r0, #32]
 800daf4:	b90b      	cbnz	r3, 800dafa <_fflush_r+0x1a>
 800daf6:	f7fe f9d9 	bl	800beac <__sinit>
 800dafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0f3      	beq.n	800daea <_fflush_r+0xa>
 800db02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db04:	07d0      	lsls	r0, r2, #31
 800db06:	d404      	bmi.n	800db12 <_fflush_r+0x32>
 800db08:	0599      	lsls	r1, r3, #22
 800db0a:	d402      	bmi.n	800db12 <_fflush_r+0x32>
 800db0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db0e:	f7fe fbd6 	bl	800c2be <__retarget_lock_acquire_recursive>
 800db12:	4628      	mov	r0, r5
 800db14:	4621      	mov	r1, r4
 800db16:	f7ff ff5d 	bl	800d9d4 <__sflush_r>
 800db1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db1c:	07da      	lsls	r2, r3, #31
 800db1e:	4605      	mov	r5, r0
 800db20:	d4e4      	bmi.n	800daec <_fflush_r+0xc>
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	059b      	lsls	r3, r3, #22
 800db26:	d4e1      	bmi.n	800daec <_fflush_r+0xc>
 800db28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db2a:	f7fe fbc9 	bl	800c2c0 <__retarget_lock_release_recursive>
 800db2e:	e7dd      	b.n	800daec <_fflush_r+0xc>

0800db30 <__swhatbuf_r>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	460c      	mov	r4, r1
 800db34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db38:	2900      	cmp	r1, #0
 800db3a:	b096      	sub	sp, #88	; 0x58
 800db3c:	4615      	mov	r5, r2
 800db3e:	461e      	mov	r6, r3
 800db40:	da0d      	bge.n	800db5e <__swhatbuf_r+0x2e>
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db48:	f04f 0100 	mov.w	r1, #0
 800db4c:	bf0c      	ite	eq
 800db4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db52:	2340      	movne	r3, #64	; 0x40
 800db54:	2000      	movs	r0, #0
 800db56:	6031      	str	r1, [r6, #0]
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	b016      	add	sp, #88	; 0x58
 800db5c:	bd70      	pop	{r4, r5, r6, pc}
 800db5e:	466a      	mov	r2, sp
 800db60:	f000 f848 	bl	800dbf4 <_fstat_r>
 800db64:	2800      	cmp	r0, #0
 800db66:	dbec      	blt.n	800db42 <__swhatbuf_r+0x12>
 800db68:	9901      	ldr	r1, [sp, #4]
 800db6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db72:	4259      	negs	r1, r3
 800db74:	4159      	adcs	r1, r3
 800db76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db7a:	e7eb      	b.n	800db54 <__swhatbuf_r+0x24>

0800db7c <__smakebuf_r>:
 800db7c:	898b      	ldrh	r3, [r1, #12]
 800db7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db80:	079d      	lsls	r5, r3, #30
 800db82:	4606      	mov	r6, r0
 800db84:	460c      	mov	r4, r1
 800db86:	d507      	bpl.n	800db98 <__smakebuf_r+0x1c>
 800db88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	6123      	str	r3, [r4, #16]
 800db90:	2301      	movs	r3, #1
 800db92:	6163      	str	r3, [r4, #20]
 800db94:	b002      	add	sp, #8
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	ab01      	add	r3, sp, #4
 800db9a:	466a      	mov	r2, sp
 800db9c:	f7ff ffc8 	bl	800db30 <__swhatbuf_r>
 800dba0:	9900      	ldr	r1, [sp, #0]
 800dba2:	4605      	mov	r5, r0
 800dba4:	4630      	mov	r0, r6
 800dba6:	f7fd fc03 	bl	800b3b0 <_malloc_r>
 800dbaa:	b948      	cbnz	r0, 800dbc0 <__smakebuf_r+0x44>
 800dbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbb0:	059a      	lsls	r2, r3, #22
 800dbb2:	d4ef      	bmi.n	800db94 <__smakebuf_r+0x18>
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
 800dbb8:	f043 0302 	orr.w	r3, r3, #2
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	e7e3      	b.n	800db88 <__smakebuf_r+0xc>
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	6020      	str	r0, [r4, #0]
 800dbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc8:	81a3      	strh	r3, [r4, #12]
 800dbca:	9b00      	ldr	r3, [sp, #0]
 800dbcc:	6163      	str	r3, [r4, #20]
 800dbce:	9b01      	ldr	r3, [sp, #4]
 800dbd0:	6120      	str	r0, [r4, #16]
 800dbd2:	b15b      	cbz	r3, 800dbec <__smakebuf_r+0x70>
 800dbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f000 f81d 	bl	800dc18 <_isatty_r>
 800dbde:	b128      	cbz	r0, 800dbec <__smakebuf_r+0x70>
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	f023 0303 	bic.w	r3, r3, #3
 800dbe6:	f043 0301 	orr.w	r3, r3, #1
 800dbea:	81a3      	strh	r3, [r4, #12]
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	431d      	orrs	r5, r3
 800dbf0:	81a5      	strh	r5, [r4, #12]
 800dbf2:	e7cf      	b.n	800db94 <__smakebuf_r+0x18>

0800dbf4 <_fstat_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	4d07      	ldr	r5, [pc, #28]	; (800dc14 <_fstat_r+0x20>)
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	602b      	str	r3, [r5, #0]
 800dc02:	f7f4 f8de 	bl	8001dc2 <_fstat>
 800dc06:	1c43      	adds	r3, r0, #1
 800dc08:	d102      	bne.n	800dc10 <_fstat_r+0x1c>
 800dc0a:	682b      	ldr	r3, [r5, #0]
 800dc0c:	b103      	cbz	r3, 800dc10 <_fstat_r+0x1c>
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	bd38      	pop	{r3, r4, r5, pc}
 800dc12:	bf00      	nop
 800dc14:	20000bec 	.word	0x20000bec

0800dc18 <_isatty_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d06      	ldr	r5, [pc, #24]	; (800dc34 <_isatty_r+0x1c>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	f7f4 f8dd 	bl	8001de2 <_isatty>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d102      	bne.n	800dc32 <_isatty_r+0x1a>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	b103      	cbz	r3, 800dc32 <_isatty_r+0x1a>
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	bd38      	pop	{r3, r4, r5, pc}
 800dc34:	20000bec 	.word	0x20000bec

0800dc38 <memcpy>:
 800dc38:	440a      	add	r2, r1
 800dc3a:	4291      	cmp	r1, r2
 800dc3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc40:	d100      	bne.n	800dc44 <memcpy+0xc>
 800dc42:	4770      	bx	lr
 800dc44:	b510      	push	{r4, lr}
 800dc46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc4e:	4291      	cmp	r1, r2
 800dc50:	d1f9      	bne.n	800dc46 <memcpy+0xe>
 800dc52:	bd10      	pop	{r4, pc}

0800dc54 <__assert_func>:
 800dc54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc56:	4614      	mov	r4, r2
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <__assert_func+0x2c>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4605      	mov	r5, r0
 800dc60:	68d8      	ldr	r0, [r3, #12]
 800dc62:	b14c      	cbz	r4, 800dc78 <__assert_func+0x24>
 800dc64:	4b07      	ldr	r3, [pc, #28]	; (800dc84 <__assert_func+0x30>)
 800dc66:	9100      	str	r1, [sp, #0]
 800dc68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc6c:	4906      	ldr	r1, [pc, #24]	; (800dc88 <__assert_func+0x34>)
 800dc6e:	462b      	mov	r3, r5
 800dc70:	f000 f844 	bl	800dcfc <fiprintf>
 800dc74:	f000 f854 	bl	800dd20 <abort>
 800dc78:	4b04      	ldr	r3, [pc, #16]	; (800dc8c <__assert_func+0x38>)
 800dc7a:	461c      	mov	r4, r3
 800dc7c:	e7f3      	b.n	800dc66 <__assert_func+0x12>
 800dc7e:	bf00      	nop
 800dc80:	20000084 	.word	0x20000084
 800dc84:	0800e1bf 	.word	0x0800e1bf
 800dc88:	0800e1cc 	.word	0x0800e1cc
 800dc8c:	0800e1fa 	.word	0x0800e1fa

0800dc90 <_calloc_r>:
 800dc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc92:	fba1 2402 	umull	r2, r4, r1, r2
 800dc96:	b94c      	cbnz	r4, 800dcac <_calloc_r+0x1c>
 800dc98:	4611      	mov	r1, r2
 800dc9a:	9201      	str	r2, [sp, #4]
 800dc9c:	f7fd fb88 	bl	800b3b0 <_malloc_r>
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	4605      	mov	r5, r0
 800dca4:	b930      	cbnz	r0, 800dcb4 <_calloc_r+0x24>
 800dca6:	4628      	mov	r0, r5
 800dca8:	b003      	add	sp, #12
 800dcaa:	bd30      	pop	{r4, r5, pc}
 800dcac:	220c      	movs	r2, #12
 800dcae:	6002      	str	r2, [r0, #0]
 800dcb0:	2500      	movs	r5, #0
 800dcb2:	e7f8      	b.n	800dca6 <_calloc_r+0x16>
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7fe fa75 	bl	800c1a4 <memset>
 800dcba:	e7f4      	b.n	800dca6 <_calloc_r+0x16>

0800dcbc <__ascii_mbtowc>:
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	b901      	cbnz	r1, 800dcc2 <__ascii_mbtowc+0x6>
 800dcc0:	a901      	add	r1, sp, #4
 800dcc2:	b142      	cbz	r2, 800dcd6 <__ascii_mbtowc+0x1a>
 800dcc4:	b14b      	cbz	r3, 800dcda <__ascii_mbtowc+0x1e>
 800dcc6:	7813      	ldrb	r3, [r2, #0]
 800dcc8:	600b      	str	r3, [r1, #0]
 800dcca:	7812      	ldrb	r2, [r2, #0]
 800dccc:	1e10      	subs	r0, r2, #0
 800dcce:	bf18      	it	ne
 800dcd0:	2001      	movne	r0, #1
 800dcd2:	b002      	add	sp, #8
 800dcd4:	4770      	bx	lr
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	e7fb      	b.n	800dcd2 <__ascii_mbtowc+0x16>
 800dcda:	f06f 0001 	mvn.w	r0, #1
 800dcde:	e7f8      	b.n	800dcd2 <__ascii_mbtowc+0x16>

0800dce0 <__ascii_wctomb>:
 800dce0:	b149      	cbz	r1, 800dcf6 <__ascii_wctomb+0x16>
 800dce2:	2aff      	cmp	r2, #255	; 0xff
 800dce4:	bf85      	ittet	hi
 800dce6:	238a      	movhi	r3, #138	; 0x8a
 800dce8:	6003      	strhi	r3, [r0, #0]
 800dcea:	700a      	strbls	r2, [r1, #0]
 800dcec:	f04f 30ff 	movhi.w	r0, #4294967295
 800dcf0:	bf98      	it	ls
 800dcf2:	2001      	movls	r0, #1
 800dcf4:	4770      	bx	lr
 800dcf6:	4608      	mov	r0, r1
 800dcf8:	4770      	bx	lr
	...

0800dcfc <fiprintf>:
 800dcfc:	b40e      	push	{r1, r2, r3}
 800dcfe:	b503      	push	{r0, r1, lr}
 800dd00:	4601      	mov	r1, r0
 800dd02:	ab03      	add	r3, sp, #12
 800dd04:	4805      	ldr	r0, [pc, #20]	; (800dd1c <fiprintf+0x20>)
 800dd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0a:	6800      	ldr	r0, [r0, #0]
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	f7ff fd47 	bl	800d7a0 <_vfiprintf_r>
 800dd12:	b002      	add	sp, #8
 800dd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd18:	b003      	add	sp, #12
 800dd1a:	4770      	bx	lr
 800dd1c:	20000084 	.word	0x20000084

0800dd20 <abort>:
 800dd20:	b508      	push	{r3, lr}
 800dd22:	2006      	movs	r0, #6
 800dd24:	f000 f82c 	bl	800dd80 <raise>
 800dd28:	2001      	movs	r0, #1
 800dd2a:	f7f3 fffb 	bl	8001d24 <_exit>

0800dd2e <_raise_r>:
 800dd2e:	291f      	cmp	r1, #31
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4604      	mov	r4, r0
 800dd34:	460d      	mov	r5, r1
 800dd36:	d904      	bls.n	800dd42 <_raise_r+0x14>
 800dd38:	2316      	movs	r3, #22
 800dd3a:	6003      	str	r3, [r0, #0]
 800dd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dd44:	b112      	cbz	r2, 800dd4c <_raise_r+0x1e>
 800dd46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd4a:	b94b      	cbnz	r3, 800dd60 <_raise_r+0x32>
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 f831 	bl	800ddb4 <_getpid_r>
 800dd52:	462a      	mov	r2, r5
 800dd54:	4601      	mov	r1, r0
 800dd56:	4620      	mov	r0, r4
 800dd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd5c:	f000 b818 	b.w	800dd90 <_kill_r>
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d00a      	beq.n	800dd7a <_raise_r+0x4c>
 800dd64:	1c59      	adds	r1, r3, #1
 800dd66:	d103      	bne.n	800dd70 <_raise_r+0x42>
 800dd68:	2316      	movs	r3, #22
 800dd6a:	6003      	str	r3, [r0, #0]
 800dd6c:	2001      	movs	r0, #1
 800dd6e:	e7e7      	b.n	800dd40 <_raise_r+0x12>
 800dd70:	2400      	movs	r4, #0
 800dd72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd76:	4628      	mov	r0, r5
 800dd78:	4798      	blx	r3
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	e7e0      	b.n	800dd40 <_raise_r+0x12>
	...

0800dd80 <raise>:
 800dd80:	4b02      	ldr	r3, [pc, #8]	; (800dd8c <raise+0xc>)
 800dd82:	4601      	mov	r1, r0
 800dd84:	6818      	ldr	r0, [r3, #0]
 800dd86:	f7ff bfd2 	b.w	800dd2e <_raise_r>
 800dd8a:	bf00      	nop
 800dd8c:	20000084 	.word	0x20000084

0800dd90 <_kill_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	; (800ddb0 <_kill_r+0x20>)
 800dd94:	2300      	movs	r3, #0
 800dd96:	4604      	mov	r4, r0
 800dd98:	4608      	mov	r0, r1
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	602b      	str	r3, [r5, #0]
 800dd9e:	f7f3 ffb1 	bl	8001d04 <_kill>
 800dda2:	1c43      	adds	r3, r0, #1
 800dda4:	d102      	bne.n	800ddac <_kill_r+0x1c>
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	b103      	cbz	r3, 800ddac <_kill_r+0x1c>
 800ddaa:	6023      	str	r3, [r4, #0]
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
 800ddae:	bf00      	nop
 800ddb0:	20000bec 	.word	0x20000bec

0800ddb4 <_getpid_r>:
 800ddb4:	f7f3 bf9e 	b.w	8001cf4 <_getpid>

0800ddb8 <_init>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr

0800ddc4 <_fini>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	bf00      	nop
 800ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddca:	bc08      	pop	{r3}
 800ddcc:	469e      	mov	lr, r3
 800ddce:	4770      	bx	lr
